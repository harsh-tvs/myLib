"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type Query {
  _: String!
  _empty: String
  serviceProvider(id: Int, status: Int): ServiceProvider
  allServiceProviders(status: Int): [ServiceProvider!]!
  deviceModel(
    id: Int
    model_name: String
    devicetype: String
    status: Int
  ): DeviceModel
  getAllDeviceModelDetails(
    model: String
    vehicle_type_id: Int
    variant: String
  ): getAllDeviceModelDetailsResponse
  allDeviceModels(manufacturerId: Int, status: Int): [DeviceModel!]!
  checkDeviceModelName(
    deviceModelId: Int
    manufacturerId: Int!
    model_name: String!
  ): String!
  getActivationStatus(vin: String!): activationStatus
  countryById(country_id: Int!): CountryModel
  allCountries: [CountryModel!]!
  stateByZoneId(zone_id: Int!): StateModel
  allStatesByCountryId(country_id: Int!): [StateModel!]!
  simDetail(
    id: Int
    phoneNumber: String
    simNumber: String
    status: Int
  ): SimDetail
  simDetail1(
    id: Int
    phoneNumber: String
    simNumber: String
    status: Int
  ): SimDetail
  allSimDetails(
    ownerLoginId: Int!
    serviceProviderId: Int
    status: Int
  ): [SimDetail!]!
  allSimDetails1(
    ownerLoginId: Int!
    serviceProviderId: Int
    status: Int
  ): [SimDetail!]!
  getAllSimDetailsAPI(status: SimStatus): [SimDetailResponse!]!
  getSimCountByOperator(superAdminLoginId: Int!): [SimCountByOperator!]!
  checkSimNumber(simNumber: String!): String!
  checkPhoneNumber(phoneNumber: String!): String!
  loginDetail(loginId: Int, username: String, status: Int): Login
  allLoginDetails(status: Int): [Login!]!
  login(username: String!, password: String!, accountType: String): AuthPayload

  """
  This API is used to generate OTP for new login.
  """
  newLoginWithOTP(
    username: String!
    password: String!
    accountType: String
    isResend: Boolean!
  ): newLoginWithOTPResponse

  """
  This API is used logout and delete token.
  """
  logoutAuthTokenAPI(
    """
    Token generated for the login.
    """
    token: String!
    loginId: Int!
  ): logoutResponse!

  """
  This API is used logout from all instance of a client.
  LoginId is loginId of the login should be expired.
  """
  logoutAuthTokenAllClientsAPI(loginId: Int!): Boolean!
  generateAuthTokenAPI(
    username: String!
    password: String!
    hours: Int
  ): AuthToken
  generateLoginOTP(username: String!, password: String!): Boolean!
  generateLoginOTPForDriver(contactNumber: String!): Boolean
  validateOTP(OTP: String!, username: String!): AuthPayload
  validatingOTP(
    OTP: Int!
    username: String!
    accountType: String
  ): validateOtpResponse
  validatingOTPNew(
    OTP: Int!
    username: String!
    accountType: String
    expiryDateTime: String!
    roleId: String!
  ): validateOtpResponse
  createTimeLimitedLogin(
    username: String!
    password: String!
    portalURL: String!
    hours: Int!
    accountType: String
  ): AuthPayload

  """
  This API generates a token for a time period of requested timestamp. Need business admin token in the header.
  Token is generated for the login under business admin.
  """
  getClientLoginToken(
    """
    Id here is client Id
    """
    id: Int!

    """
    toTimestamp is GMT timestamp(in seconds). Timestamp passed should be greater than current timestamp.
    """
    toTimestamp: String
  ): AuthPayload

  """
  This API generates a token for a time period of requested timestamp. Need business admin token in the header.
  Token is generated for the login under business admin. Business admin token must be saved in redis.
  """
  getLoginTokenAPI(
    loginId: Int!

    """
    toTimestamp is GMT timestamp(in seconds). Timestamp passed should be greater than current timestamp.
    """
    toTimestamp: String
  ): AuthPayload
  checkUsername(loginId: Int, username: String!): String!
  createLiveLocationSharingToken(
    hours: Int!
    uniquedeviceid: String!
    apiUri: String!
    httpUri: String!
    title: String!
  ): liveLocSharingToken!
  sendSmsAndEmail(
    phoneNumber: [String]!
    email: [String]!
    shareLink: String!
    vehicleNumber: String!
  ): Boolean!
  regenerateToken(
    vin: String!
    app_user_id: String!
    device_id: String
  ): regerateResponseToken
  getPartnerDomainConfig(loginId: Int!): String!
  partnerDetail(
    id: Int
    businessName: String
    email: String
    contactNumber: String
    loginId: Int
    panNumber: String
  ): PartnerDetail
  allPartnerDetails(status: Int): [PartnerDetail!]!
  checkBusinessName(id: Int, businessName: String!): String!
  checkPartnerContactNumber(id: Int, contactNumber: String!): String!
  checkPartnerPanNumber(id: Int, panNumber: String!): String!
  checkPartnerEmail(id: Int, email: String!): String!
  getManufacturer(
    id: Int
    manufacturerName: String
    manufacturerCode: String
    status: Int
  ): Manufacturer
  getAllManufacturer(status: Int): [Manufacturer!]!
  checkManufacturerCode(manufacturerCode: String!): String!
  checkManufacturerName(manufacturerName: String!): Int!
  checkManufacturerContactNumber(contactNumber: String!): Int!
  checkManufacturerEmail(email: String!): Int!
  devicePartnerAssignDetail(
    id: Int
    uniqueDeviceId: String
    partnerLoginId: Int
  ): DevicePartnerAssign
  allDevicePartnerAssignDetails(
    partnerLoginId: Int
    status: Int
  ): [DevicePartnerAssign!]!
  getPartnerDeviceStockByDeviceModel(
    partnerLoginId: Int!
  ): [PartnerDeviceStockDetail!]!
  getAllAssignedDevicesToClient(clientLoginId: Int!): [DevicePartnerAssign!]
  checkDeviceAvailableForSubscription(
    partnerLoginId: Int!
    deviceList: [DeviceListInput!]!
    deviceModelId: Int!
  ): [DeviceAvailabilityVerification!]!
  getClientDeviceStock(clientLoginId: Int!): ClientDeviceStock!
  simPartnerAssignDetail(id: Int, simId: Int): SimPartnerAssign
  allSimPartnerAssignDetails(
    partnerLoginId: Int
    status: Int
  ): [SimPartnerAssign!]!
  getPartnerSimStockByServiceProvider(
    partnerLoginId: Int!
  ): [PartnerSimStockDetail!]!
  getAllAssignedSimToClient(clientLoginId: Int!): [SimPartnerAssign!]
  checkSimAvailableForSubscription(
    partnerLoginId: Int!
    simList: [SimListInput!]!
    serviceProviderId: Int!
  ): [SimAvailabilityVerification!]!
  clientDetail(
    id: Int
    loginId: Int
    clientName: String
    email: String
    contactNumber: String
    partnerLoginId: Int
    status: Int
  ): ClientDetail
  allClientDetails(
    partnerLoginId: Int
    resellerLoginId: Int
    planId: Int
    status: Int
    superAdmin: Boolean
  ): [ClientDetail!]!
  allClientDetails1(
    partnerLoginId: Int
    resellerLoginId: Int
    planId: Int
    status: Int
    superAdmin: Boolean
  ): [ClientDetail!]!
  allClientDetailsAPI: [ClientDetail!]!
  checkClientName(id: Int, clientName: String!): String!
  checkClientGST(GST: String!, clientLoginId: Int): String!
  checkClientPAN(PAN: String!): String!
  checkClientContactNumber(id: Int, contactNumber: String!): String!
  checkClientPanNumber(id: Int, clientLoginId: Int, panNumber: String!): String!
  checkClientEmail(id: Int, email: String!): String!
  getClientSOCThreshold(clientId: Int!): ClientSOC
  getClientOfflineCondition(clientLoginId: Int!): clientOffline

  """
  Get vehicle details of a single vehicle
  """
  getVehicleDetail(
    """
    Id of the vehicle
    """
    entityId: Int

    """
    Number of the vehicle
    """
    vehicleNumber: String

    """
    Unique of the device.
    """
    deviceUniqueId_fk: String

    """
    Id of the sim
    """
    simId: Int

    """
    Status of the vehicle
    """
    status: Int
  ): VehicleDetail
  getAllVehicleDetails(
    """
    LoginId of the client
    """
    clientLoginId: Int

    """
    Status of the vehicle
    """
    status: [Int!]

    """
    obdOnly need to be true if device is OBD.
    """
    obdOnly: Boolean
  ): [VehicleDeviceDetail!]!

  """
  Get vehicle details of the Active vehicles.
  """
  getAllActiveVehicleDetails(
    """
    LoginId of the client
    """
    clientLoginId: Int

    """
    Status of the vehicle
    """
    status: [Int!]

    """
    obdOnly need to be true if device is OBD.
    """
    obdOnly: Boolean
  ): [VehicleDeviceDetail!]!

  """
  CLient login id need to be published to affect the changes made in the vehicle data.
  """
  publishMQTTUsingClientLoginId(
    """
    LoginId of the client.
    """
    clientLoginId: Int!
  ): Boolean!
  getAllVehicles(model: [modelList!]!): VinUsersResponse!
  checkVinOnboard(vin: String!): checkResponse!
  getAlertConfig(
    uniqueDeviceId: String
    alertType: String!
    areaId: Int
    tripId: Int
    routeId: Int
  ): AlertConfig
  getConfiguredSpeedLimit(uniqueDeviceId: String!): DeviceData
  getTimeFenceAlertConfig(
    vin: String!
    app_user_id: String!
    kids_timefence: Boolean
  ): allTimeFenceConfigResponse
  getAllAlertsParameters(
    model: String
    alert_parameter: String
  ): alertParametersResponse
  getConditionalAlertConfig(
    vin: String!
    alert_parameter: String!
    enabled: Boolean
  ): getConditionalAlertConfigData
  getOverspeedThreshold(vin: String!, app_user_id: String!): overSpeedRes
  roleDetail(clientLoginId: Int!, roleName: String!, status: Int): Roles
  allRolesDetails(clientLoginId: Int!, status: Int): [Roles!]!
  groupDetail(clientLoginId: Int!, id: Int!, status: Int): Groups
  getGroupIdByGroupName(groupName: String!): Groups
  allGroupsDetails(clientLoginId: Int!, status: Int): [Groups!]!
  getAllGroups: [GroupDetail]
  checkGroupName(groupName: String!, clientLoginId: Int!): String!
  userDetail(id: Int, clientLoginId: Int, loginId: Int, status: Int): UserDetail
  allUserDetails(clientLoginId: Int, status: Int): [UserDetail!]!
  getAllUserIdNew(clientLoginId: Int): [UserIdNew!]
  getSubloginDetails(subLoginId: Int, status: Int): [SubloginData!]!
  checkSubClientName(userName: String!): String!
  driverDetail(id: Int!, driverName: String, license: String): Driver
  allDrivers(clientLoginId: Int, userLoginId: Int, status: Int): [Driver!]!
  getDriverDetails(clientLoginId: Int, uniqueDeviceId: String): DriverDetails
  getDriverDetail(clientLoginId: Int, imei_num: String): DriverDetail
  getDriverByDriverLogin: Driver
  checkLicenseNumber(license: String!): String!
  checkContactNumber(contactNumber: String!): String!
  getMinioFileURL(bucketName: String!, fileName: String!): FileDetails
  getAllDriverDetails(clientLoginId: Int): [DriverDetail]
  vehicleGroupAssignDetail(groupId: Int, vehicleId: Int): VehicleGroupAssign
  allVehicleGroupAssignDetails(
    groupId: Int
    status: Int
    vehicleId: Int
  ): [VehicleGroupAssign!]!
  featureDetail(featureName: String!, status: Int): Features
  allFeatures(status: Int): [Features!]!
  getPlans(partnerLoginId: Int, id: Int!, status: Int): Plans
  getAllPlans(partnerLoginId: Int!, status: Int): [Plans!]!
  getAreaType(areaTypeName: String, id: Int!, status: Int): AreaType
  getAllAreaType: [AreaType!]!

  """
  Fetches the deteails of AOI(Stop).
  """
  getAreaDetails(
    """
    Area id of the existing area.
    """
    id: Int!

    """
    Status of the area. Optional
    """
    status: Int
  ): Area

  """
  Gets all the areas of client and its subClients
  """
  getAllAreaDetails(
    """
    Login ID of the client
    """
    clientLoginId: Int!
  ): [Area!]!
  getGeofenceList(
    userId: String!
    vin: String!
    geofenceId: Int
  ): getGeofenceListResponse
  getVinDetails(vin: String!): vinDetailsResponse
  getUserDetails(app_user_id: String!): getUserDetailsResponse!
  getUserDetailsByMobileNumber(
    mobile_number: String!
    iso_code: ISO_CODES!
  ): getUserDetailsByMobileNumberResponse
  getVinBasedTokens(
    vin: String!
    app_user_id: String!
    secretKey: String!
  ): getVinBasedTokensResponse!
  getVinUserIdDetails(
    vin: String!
    app_user_id: String!
  ): getVinUserIdDetailsResponse!
  redisScript: redisResponse
  getSubscriptionInventoryAssign(
    subscriptionId: Int!
    clientLoginId: Int
    status: Int
  ): SubscriptionInventoryAssign
  getLicenseType(id: Int!, status: Int): LicenseType
  getAllLicenseType(status: Int): [LicenseType!]!
  getallsmss(loginId: Int): [data!]!

  """
  Get all device tracking data based on clientLogin Id
  """
  getAllDeviceLocationsForClient(
    """
    Client's login id
    """
    clientLoginId: Int!
  ): [DeviceTrackingDataNew]!
  getSalesPerson(id: Int!): SalesPerson
  getAllSalesPerson(
    clientLoginId: Int
    partnerLoginId: Int
    status: Int
  ): [SalesPerson!]
  getDeviceSimMapped(vehicleIdentificationNumber: String!): deviceSimMapped
  getAllDeviceSimMapped(
    vehicleIdentificationNumber: String
    clientLoginId: Int
    serviceProvider: ServiceProviders
    deviceModel: DeviceModels
  ): [deviceSimMapped!]!
  uploads: [File]
  getAirtelPlans(serialNumber: Int, uniqueAccessoryId: String): [AirtelPlans]
  getAirtelSimDetails(
    simFilterType: simFilterType!

    """
    1)If simFilterType is MSISDN then mobile number is to be passed  2) If SIM_NO Then sim number needs to be passed
    """
    filterValue: String!
  ): [AirtelSimDetails]
  getAllSharedLiveLocation(
    vin: String!
    app_user_id: String!
    request_id: Int
    from_time: String
    to_time: String
  ): getAllSharedLiveLocationResponse
  getShareLinkShortnerUrl(shorten_token: String!): sharedLiveShortLinkDetails
  fetchEmergencyContacts(
    app_user_id: String!
    vin: String
    emergency_contact_id: Int
  ): fetchEmergencyContactsResponse
  getOfflineMaps(vin: String): offlineMapsResponse
  getHomeChargerDetails(
    vin: String
    hc_imei: String
  ): HomeChargerDetailsResponse
  getBatteryDetails(bat_id: String!): BatteryDetailsResponse
  getHomechargerDetailsforhc_imei(
    hc_imei: String!
  ): HomechargerDetailsforhc_imeiResponse
  getAccessoryData(
    vin: String
    app_user_id: String
    device_id: String
  ): getAccessoryDataResponse
  getAllRoleDetails(
    roleId: String
    roleName: String
    model_name: Model
  ): getAllRoleDetailsResponse
  autoAPIUpdate: autoUpdateAPIResponse
  getAllAPIs(api_id: Int): getAllAPIsResponse
  generateServiceAuthToken(
    username: String!
    password: String!
    roleId: String!
    type: String
  ): serviceAuthTokenResponse
  generateSAToken(
    secretKey: String!
    expiryDateTime: String!
  ): generateSATokenResponse

  """
  This API is used to fetch RoleNameDetails
  """
  getRoleNameDetails(rolename: String): getRoleNameDetailsResponse
  fetchWallpapers(
    vin: String
    wallpaper_id: Int
    app_user_id: String
    type: wallpaperType!
  ): fetchwallpaperResponse
  fetchDocuments(
    vin: String
    document_id: Int
    app_user_id: String
    category: documentCategory!
  ): fetchDocumentsResponse
  getPortableChargerDetails(
    vin: String
    pcc_imei: String
  ): PortableChargerDetailsResponse

  """
  Exposed to Aquila 4.x, will force fetch from geo-backend if not in cache/db
  """
  getAddressForCoordinate(input: CoordinateInput!): PlusCodeAddress!

  """
  Fetch addresses for Plus codes from cache/db, 'Unnamed Location' if not
  """
  getAddressesForPlusCodes(plusCodes: [String!]!): [PlusCodeAddress!]!

  """
  Fetch addresses for Coordinates from cache/db, 'Unnamed Location' if not
  """
  getAddressesForCoordinates(input: [CoordinateInput!]!): [PlusCodeAddress!]!
  placesSearch(
    """
    The place name to search for. Partial name search is also allowed.
    """
    text: String!

    """
    How many results to return, Defaults to 5. Min 1, Max 20.
    """
    size: Int

    """
    focus will return results ordered by closeness to provided coordinate
    """
    focus: CoordinateInput
  ): [PlaceFeature]!

  """
  Fetch route with distance and time from geo-backend for a series of points
  """
  getRouteDetails(input: [RouteCoordinateInput!]!): RouteDetails!
  getRouteDetailsWithMap(
    input: [RouteCoordinateInput!]!
    mapType: mapType!
  ): RouteDetails!
  getReverseGeocodeWithPlusCode(plusCode: String!): PlusCodeAddress!
  getAllSubTripAlerts(tripId: Int!, clientLoginId: Int): [TripAlert]!
  getAllAlertsByClientLogin(
    clientLogin: Int!
    from: String
    to: String
  ): [Alert!]!
  getAllAlertsByUniqueId(uniqueId: String!, from: String, to: String): [Alert!]!
  getAllAlertsByAlertType(
    clientLogin: Int!
    alertType: String!
    from: String
    to: String
  ): [Alert!]!
  getAllRecordsByUniqueIdsAndTimeRangeAndAlertType(
    uniqueIds: [String!]!
    alerttype: String!
    from_ts: String!
    to_ts: String!
  ): [Alert!]!
  getAllAlerts(
    vin: String!
    app_user_id: [String]!
    startDateTime: String
    endDateTime: String
    alerttype: alerttype
    no_of_records: Int
  ): allAlertResponse
  getSMSHistory(from_ts: String!, to_ts: String!): fetchSmsDataReponse
  getWhatsappHistory(from_ts: String!, to_ts: String!): fetchwhatsappDataReponse
  getEmailHistory(from_ts: String!, to_ts: String!): fetchEmailDataReponse
  getChargeHistoryNew(
    vin: String!

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    startDateTime: String

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    endDateTime: String
    no_of_records: Int
  ): ChargeHistoryResponseNewV1!
  homeChargerChargingHistory(
    vin: String!

    """
    Date Format is DD/MM/YYYY hh:mm:ss In UTC
    """
    from_date: String

    """
    Date Format is DD/MM/YYYY hh:mm:ss In UTC
    """
    to_date: String
  ): HCChargingHistoryResponse!
  homeChargerChargingHistoryNew(
    vin: String!

    """
    Date Format is DD/MM/YYYY hh:mm:ss In UTC
    """
    from_date: String

    """
    Date Format is DD/MM/YYYY hh:mm:ss In UTC
    """
    to_date: String
    no_of_records: Int
  ): HCChargingHistoryResponseNew!
  getHomeChargerChargingCummulativeData(vin: String!): HCCummulativeDataResponse
  getPortableChargerChargingCummulativeData(
    vin: String!
  ): PCCummulativeDataResponse
  getPortableChargerChargingHistory(
    vin: String!
    from_date: String
    to_date: String
    no_of_records: Int
  ): PCCHResponse
  getChargeHistory(
    vin: String!

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    startDateTime: String!

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    endDateTime: String!
  ): ChargeHistoryResponse!
  getTripPoints(
    vin: String!

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    startDateTime: String!

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    endDateTime: String!
  ): tripHistory!
  getChargingPoints(
    type: types!
    vin: String!

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    startDateTime: String

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    endDateTime: String
  ): chargingPointsHistory
  getTrackingPoints(
    type: types!
    vin: String!

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    startDateTime: String

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    endDateTime: String
  ): TrackingPointsResponse
  getChargeSummary(
    vin: String!

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    startDateTime: String!

    """
    Date Format is YYYY-MM-DD HH:mm:ss
    """
    endDateTime: String!
  ): chargeSummaryresponse!
  getTripHistory(
    vin: String!
    start_datetime: String!
    end_datetime: String!
  ): tripDataResponse
  getConsolidatedTrips(
    vin: String!
    start_datetime: String
    end_datetime: String
    no_of_records: Int
  ): tripDataResponseNew
  getTripHistoryNew(
    vin: String!
    start_datetime: String
    end_datetime: String
    no_of_records: Int
  ): tripDataResponseNewV1
  getAllTripSessions(
    vin: String!
    start_datetime: String!
    end_datetime: String!
  ): AllTripSessionsResponse
  getAllChargeSessions(
    type: types!
    vin: String!
    start_datetime: String!
    end_datetime: String!
  ): AllChargeSessionsResponse
  getDayWiseRide(
    vin: String!
    start_datetime: String!
    end_datetime: String!
  ): rideAnalysisResponse
  getTripsCumulativeSummary(vin: String!): GetTripsCumulativeSummaryResponse
  getChargingStationsWithLatLong(
    organizationId: Int!

    """
    Radius in meters and min is 10 mtr and max is 10000000 meters
    """
    radius: Float!
    latitude: Float!
    longitude: Float!
  ): ChargingStationsResponse
  getAllGeofenceAlerts(
    vin: String!
    userId: String!
    startDateTime: String
    endDateTime: String
    geofenceIds: [Int]
  ): allGeofenceAlertsResponse
  fetchData(
    vin: String!
    start_time: String
    end_time: String
    select_fields: [String]
    where: String
  ): fetchDataReponse
  getChargeCumulativeSummary(vin: String!): getChargeCumulativeSummaryResponse
  getChargingStationsAlongRoute(
    route_details: [route_Array!]
    buffer_distance: Float!
    dte: [Float!]!
    vin: String!
  ): ChargingStationsAlongRouteResponse!
  getChargingStationsByKazam(
    """
    The latitude of the user, around which charge points are to be located.
    """
    latitude: Float!

    """
    The longitude of the user, around which charge points are to be located.
    """
    longitude: Float!

    """
    The radius of the sphere in kilometres from the with loc as the center, in range of which Charge Points are to be located. (Default is 5km)
    """
    radius: Float!

    """
    When set to true, returns the human-readable version of the address of the Charger, along with location coordinates.
    """
    fullAddress: Boolean
  ): getChargeStationsResponse
  getTransactionsByKazam(
    vin: String!
    app_user_id: String!
    host_id: String!
    start_time: String!
    end_time: String!
  ): getTransactionsResponse
  getLatestTransactionsByKazam(
    vin: String!
    app_user_id: String!
    device_id: String!
  ): getLatestTransactionsResponse
  getTransactionDetailsByKazam(
    vin: String!
    app_user_id: String!
    txn_id: String!
  ): getTransactionDetailsResponse
  getDeviceStateByKazam(
    vin: String!
    app_user_id: String!
    device_id: String!
  ): getDeviceStateResponse
  enableDeviceByKazam(
    vin: String!
    app_user_id: String!
    device_id: String!
  ): enableDeviceResponse
  disableDeviceByKazam(
    vin: String!
    app_user_id: String!
    device_id: String!
  ): disableDeviceResponse
  getTariffDetailsByKazam(
    vin: String!
    app_user_id: String!
    tariff_id: String!
  ): getTariffDetailsResponse
  getCurrentWeatherData(
    lat: Float!
    lon: Float!
    units: unitsEnum!
    lang: enumLang
  ): currentWeatherDataResponse
  getHourlyForecastData(
    lat: Float!
    lon: Float!
    units: unitsEnum!
    lang: enumLang
  ): HourlyForecastDataResponse
  getCityData(id: Int, lang: enumLang): HourlyForecastDataResponse
  getCricketMatchList(
    timezone: String!
    status: statusEnum!
    per_page: Int
    paged: Int
    from_time: String
    to_time: String
  ): getCrricketMatchResponse
  getFootballMatchList(
    timezone: String!
    status: footballStatusEnum!
  ): getFootballMatchListResponse
  startTransactionByKazam(
    vin: String!
    app_user_id: String!
    device_id: String!
    txn_id: String!
    connector_id: Int
    start_time: String!
    duration: Int!
    user_id: String!
    usage_limit: Float
  ): startTransactionResponse
  stopTransactionByKazam(
    vin: String!
    app_user_id: String!
    device_id: String!
    connector_id: Int!
  ): stopTransactionResponse
  configDeviceByKazam(
    vin: String!
    app_user_id: String!
    device_id: String!
    host_id: String
    device_group: String
    location: String
    rate: Int
    theft_state: Int
  ): configDeviceResponse
  configDeviceThresoldByKazam(
    vin: String!
    app_user_id: String!
    device_id: String!
    cp_cmd: Int
    vthresh: Int
  ): configDeviceThresoldResponse
  getCurrentAirPollutionData(
    lat: Float!
    lon: Float!
    vin: String
  ): CurrentAirPollutionDataResponse
  getDailyWeatherForecastData(
    lat: Float!
    lon: Float!
    days: Int
    vin: String
    units: unitsEnum!
    lang: enumLang
  ): getDailyWeatherForecastDataResponse
  getNearestServiceStation(location: LatLong!): getNearestServiceStationResponse
  timeToCharge(vin: String!): timeToChargeResponse

  """
  if  we send request as fromTime and toTime then response will be list of common shared between that time,else latest one destination will be shared
  """
  getAllSharedDestinations(
    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    placeId length range should be 3 to 255
    """
    placeId: String
    no_of_records: Int
  ): AllSharedLocationsResponse
  getAllFavoriteLocations(
    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    placeId length range should be 3 to 255
    """
    placeId: String
    no_of_records: Int
  ): allLocationResponse
  getAllRecentLocations(
    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    placeId length range should be 3 to 255
    """
    placeId: String
    no_of_records: Int
  ): allLocationResponse
  getApiStatistics(
    api_name: String
    vin: String
    app_user_id: String
    from_time: String
    to_time: String
  ): getApiStatResponse
  fetchClusterChargeSessionSummary(
    vin: String!
    app_user_id: [String!]!
    from_time: String
    to_time: String
    no_of_records: Int
  ): fetchClusterChargeSessionSummaryResponse
  fetchClusterCumulativeChargeSessionSummary(
    vin: String!
    app_user_id: [String!]!
  ): CumulativeChargeSessionSummaryResponse
  getRideDetails(
    vin: String!
    app_user_id: String!
    type: Int!
    travelId: Int
    travelStartDateTime: String
    travelEndDateTime: String
    tourStartDateTime: String
    tourEndDateTime: String
    lastInfo: Boolean
  ): rideDetailsResponse
  getVehicleOverview(
    vin: String!
    app_user_id: String!
    vehicleTypeId: Int!
  ): getVehicleOverViewResponse
  getRidingPattern(
    vin: String!
    app_user_id: String!
    vehicleTypeId: Int!
  ): getRidingPatternResponse
  fetchICEGearedAggregatedData(
    variant: [String]
    vehicle: [Int]
    user_id: [Int]
    vin: [String]
    city: [String]
    state: [String]
    postal_code: [Int]
    trip_start_time: String
    trip_end_time: String
    no_of_records: Int
    per_page: Int
    page_number: Int
  ): fetchICEGearedAggregatedDataResponse
  fetchICENonGearedAggregatedData(
    variant: [String]
    vehicle: [Int]
    user_id: [Int]
    vin: [String]
    city: [String]
    state: [String]
    postal_code: [Int]
    trip_start_time: String
    trip_end_time: String
    no_of_records: Int
    per_page: Int
    page_number: Int
  ): ICENonGearedAggregatedDataResponse
  fetchClusterRideSessionSummary(
    vin: String!
    app_user_id: [String!]!
    from_time: String
    to_time: String
    no_of_records: Int
  ): fetchClusterRideSessionSummaryResponse
  fetchClusterCumulativeRideSessionSummary(
    vin: String!
    app_user_id: [String!]!
  ): fetchClusterCumulativeRideSessionSummaryResponse
  getCaloriesBurnt(
    vin: String!
    app_user_id: String!
    from_date: String!
    to_date: String!
  ): getCaloriesBurntResponse
  fetchAnnualReport(
    vin: String!
    from_date: String
    to_date: String
    range: rangeType
  ): fetchAnnualReportResponse
  getHomeChargerSettings(vin: String!): getHomeChargerSettingsResponse
  getHomeChargerCommandStatus(
    vin: String!
    commands: [hcCommandsEnum]
  ): getHomeChargerCommandStatusResponse
  getHomeChargerCommandFromDevice(
    vin: String!
    commands: [hcCommandsEnum]!
  ): getHomeChargerCommandFromDeviceResponse
  getVehicleSettings(
    vin: String!
    app_user_id: String
  ): getVehicleCommandResponse
  getVehicleCommandStatus(
    vin: String!
    app_user_id: String!
    commands: [vehicleCommandsEnum]
  ): getVehicleCommandStatusResponse
  getVehicleCommandFromDevice(
    vin: String!
    app_user_id: String!
    commands: [vehicleCommandEnums]!
  ): getVehicleCommandFromDeviceResponse
  getPortableChargerSettings(vin: String!): getPortableChargerSettingsResponse
  getPortableChargerCommandStatus(
    vin: String!
    commands: [pcCommandsEnum]
  ): getPortableChargerCommandStatusResponse
  getPortableChargerCommandFromDevice(
    vin: String!
    commands: [pcCommandsEnum]!
  ): getPortableChargerCommandFromDeviceResponse
  getAllDeviceLocations(
    filters: Filters
    configs: Configs
  ): [DeviceTrackingData!]!
  getDeviceLatestLocation(deviceId: String!): DeviceTrackingData!
  getAllDeviceLocationsAdditionalStatuses(
    filters: Filters
    configs: Configs
  ): [DeviceTrackingData!]!
  getTvsmLatestDeviceData(vin: String!): LiveDataTrackingResponse
  getHomechargerLatestData(vin: String!): HomechargerDataResponse
  getBatteriesLatestData(vin: String!): BatteriesLatestDataResponse
  getBatteryUsageTracking(
    vin: String
    battery_uid: String
  ): BatteryUsageTrackingResponse
  getPortablechargerLatestData(vin: String!): PortablechargerLatestData
  getTvsmLatestDeviceDataWatch(vin: String!): WatchResponseLive
  getTvsmAggregateDeviceDataWatch(vin: String!): WatchResponseAggregate
  getTvsmLifetimeAggregateDeviceDataWatch(
    vin: String!
  ): WatchResponseLifetimeAggregate
}

type Mutation {
  _: String!
  _emptyMutation: String
  addServiceProvider(name: String!): Boolean!
  addDeviceModel(
    model_name: String!
    version: Float!
    devicetype: String!
    description: String
    maxPrice: Int
    manufacturerId: Int!
  ): Boolean!
  updateDeviceModel(
    id: Int!
    model_name: String!
    version: Float!
    devicetype: String!
    description: String
    maxPrice: Int
    status: Int!
  ): Boolean!
  addDeviceModeldetails(
    vehicle_type_id: Int
    model: String!
    variant: String!
    theme: Int
    series: String!
    description: String!
  ): addDeviceModeldetailsResponse
  addDeviceDetail(
    serial_num: String!
    imei_num: String!
    uniqueDeviceId: String!
    deviceModelId: Int!
    manufacturerId: Int!
    ownerLoginId: Int!
  ): Boolean!
  updateDeviceDetail(
    serial_num: String!
    imei_num: String!
    uniqueDeviceId: String!
    status: Int!
    deviceModelId: Int!
    manufacturerId: Int!
    ownerLoginId: Int!
    oldUniqueDeviceId: String!
  ): Boolean!
  updateDevicePartner(
    serial_num: String!
    imei_num: String!
    uniqueDeviceId: String!
    status: Int!
    deviceModelId: Int!
    manufacturerId: Int!
    ownerLoginId: Int!
    oldUniqueDeviceId: String!
  ): Boolean!
  deassignDeviceFromSubscription(
    serial_num: String!
    imei_num: String!
    subscriptionId: Int!
  ): Boolean!
  addDeviceDetailsFromPartnerAdmin(
    serial_num: String!
    imei_num: String!
    uniqueDeviceId: String!
    deviceModelId: Int!
    manufacturerId: Int!
    ownerLoginId: Int!
  ): Boolean!
  addDeviceToInventoryAndSubscriptionAPI(
    deviceNumbers: [inputDevices!]!
    simProvider: SIMPROVIDER!
    deviceModel: DEVICEMODEL!
    deviceManufacturer: DEVICEMANUFACTURER!
  ): deviceResponse!
  deleteDeviceFromInventoryAndSubscription(
    deviceNumbers: [inputDevices!]!
    clientLoginId: Int!
  ): [deletedDevice!]!
  deleteDeviceFromInventoryAndSubscriptionAPI(
    deviceNumbers: inputDevices!
  ): deletedDevice!
  testAPI(clientLoginId: Int): String!
  decoupleDeviceSim(
    newDeviceUniqueId: String
    existingDeviceUniqueId: String
    newSimId: Int
    existingSimId: Int
    decoupleType: String!
    loginType: String!
  ): String!
  testDecouple(
    newDeviceUniqueId: String
    existingDeviceUniqueId: String
    newSimNumber: Int
    existingSimNumber: Int
    newPhoneNumber: Int
    exixtingPhoneNumber: Int
    decoupleType: String!
    loginType: String!
  ): String!
  deleteDeviceInStock(deviceUniqueId: String!): Boolean!
  addSimDetail(
    phoneNumber: String!
    simNumber: String!
    service_provider_id: Int!
    monthlyCharges: Int!
    ownerLoginId: Int!
    status: Int
  ): Boolean!
  updateSimDetail(
    id: Int!
    phoneNumber: String!
    simNumber: String!
    ownerLoginId: Int!
    monthlyCharges: Int!
    status: Int!
    service_provider_id: Int
  ): Boolean!
  addSimToInventoryAndSubscriptionAPI(
    simPhoneNumber: [inputSims!]!
    simProvider: SIMPROVIDER!
    deviceModel: DEVICEMODEL!
    deviceManufacturer: DEVICEMANUFACTURER!
  ): simResponse!
  addSimDetailsFromPartnerAdmin(
    phoneNumber: String!
    simNumber: String!
    service_provider_id: Int!
    ownerLoginId: Int!
    monthlyCharges: Int!
  ): Boolean!
  addSimDetailsFromResellerAdmin(
    phoneNumber: String!
    simNumber: String!
    service_provider_id: Int!
    ownerLoginId: Int!
    monthlyCharges: Int!
  ): Boolean!
  deleteSim(
    phoneNumber: String!
    simNumber: String!
    ownerLoginId: Int!
  ): Boolean!
  deleteSingleSim(
    phoneNumber: String!
    simNumber: String!
    ownerLoginId: Int!
  ): Boolean!
  deassignSimFromSubscription(
    phoneNumber: String!
    simNumber: String!
    subscriptionId: Int!
  ): Boolean!
  clientSignup(
    username: String!
    password: String!
    accountType: String!
    clientName: String!
    email: String!
    contactPerson: String!
    contactNumber: String!
    primaryCountryCode: String!
    address: String!
    city: String!
    state: Int!
    country: Int!
    pincode: Int
    panNumber: String
    gst: String
    planId: Int
    solution: String!
    billingMode: Int!
    salesPersonId: Int
    clientType: String!
    timezone: String!
    lat: Float
    long: Float
    partnerLoginId: Int
    resellerLoginId: Int
    licenseTypeId: Int
    typeOfClient: String
    expiryDate: String
    registrationType: String
    secondaryContactName: String
    secondaryContactNumber: String
    secondaryCountryCode: String
    secondaryEmail: String
    shippingAddress: String
    shippingCountry: Int
    shippingState: Int
    shippingCity: String
    shippingPincode: Int
    minimumTrackedDays: Int!
    packetThreshold: Int
    prorata: Int!
    addressEffectiveDate: String
  ): String!
  decryptPass(pass: String): String
  createUser(
    username: String!
    password: String!
    accountType: String
    email: String
    contactNumber: String!
    userName: String!
    roleId: Int!
    groupId: Int!
  ): Boolean!
  changeUsernamePassword(
    newUsername: String
    newPassword: String!
    confirmNewPassword: String
    oldPassword: String
    loginId: Int
  ): Boolean!
  verifyUser(username: String!, password: String!, email: String!): Login
  updateClient(
    username: String
    password: String
    clientName: String
    email: String
    contactPerson: String
    contactNumber: String
    address: String
    city: String
    state: Int
    country: Int
    pincode: Int
    panNumber: String
    timezone: String
    gst: String
    businessName: String
    updateBusinessDetails: Boolean
    clientLoginId: Int
    roleId: Int
    groupId: Int
  ): Boolean!
  updatePartnerDomainConfig(loginId: Int!, domain: String!): Boolean!
  updatePartnerDetail(
    id: Int!
    businessName: String!
    email: String!
    contactPerson: String!
    contactNumber: String!
    countryCode: String!
    billingMode: Int!
    salesPersonId: Int!
    login_id: Int!
    address: String!
    city: String!
    state_id: Int!
    country_id: Int!
    pincode: Int!
    panNumber: String!
    partnerType: String!
    status: Int!
    solution: String!
  ): Boolean!
  deactivatePartnerAndClients(partnerLoginId: Int!, action: action!): Boolean!
  addManufacturerDetail(
    manufacturerName: String!
    manufacturerCode: String!
    email: String!
    contactPerson: String!
    contactNumber: String!
    address: String!
    city: String!
    state_id: Int!
    country_id: Int!
    pincode: Int!
  ): Boolean!
  updateManufacturerDetail(
    id: Int!
    manufacturerName: String!
    manufacturerCode: String!
    email: String!
    contactPerson: String!
    contactNumber: String!
    address: String!
    city: String!
    state_id: Int!
    country_id: Int!
    pincode: Int!
    Status: Int!
  ): Boolean!
  addDevicePartnerAssignDetail(
    uniqueDeviceId: String!
    partnerLoginId: Int!
    deviceModelId: Int!
  ): Boolean!
  assignDevicesToClient(
    clientLoginId: Int!
    partnerLoginId: Int!
    uniqueDeviceId: String!
  ): Boolean!
  addSimPartnerAssignDetail(
    simId: Int!
    partnerLoginId: Int!
    serviceProviderId: Int!
  ): Boolean!
  assignSimToClient(
    clientLoginId: Int!
    partnerLoginId: Int!
    simId: Int!
  ): Boolean!
  updateClientDetail(
    id: Int!
    clientName: String!
    email: String!
    contactPerson: String!
    contactNumber: String!
    primaryCountryCode: String!
    loginUsername: String!
    login_id: Int!
    address: String!
    city: String!
    state_id: Int!
    country_id: Int!
    plan_id: Int
    solution: String!
    billingMode: Int!
    salesPersonId: Int
    pincode: Int
    panNumber: String
    gst: String
    clientType: String!
    timezone: String!
    lat: Float
    long: Float
    status: Int!
    partnerLoginId: Int
    resellLoginId: Int
    licenseTypeId: Int
    typeOfClient: String
    expiryDate: String
    registrationType: String
    secondaryContactName: String
    secondaryContactNumber: String
    secondaryCountryCode: String
    secondaryEmail: String
    shippingAddress: String
    shippingCountry: Int
    shippingState: Int
    shippingCity: String
    shippingPincode: Int
    packetThreshold: Int
    minimumTrackedDays: Int!
    prorata: Int!
    addressEffectiveDate: String
  ): String!
  updateDriverWeightsForClient(clientLoginId: Int!, weights: JSON!): Boolean!
  clientDeactivationAndActivation(
    clientLoginId: Int!
    activate: Boolean!
    accountType: String!
  ): String!
  clientOfflineCondition(clientLoginId: Int!, offlineSeconds: Int): String!

  """
  Register a vehicle.
  """
  updateApproveStatus(
    deviceUniqueId_fk: String!
    vehicleStatus: vehicleStatus
  ): Boolean!
  onBoardUserAndVehicle(
    vin: String!
    vehicle_registration_number: String
    vehicle_nick_name: String
    description: String
    vehicle_colour: String
    vehicle_type_id: Int
    theme: Int
    imei_number: String!
    vehicle_model: String
    variant: String
    sim_number: String
    phone_number: String
    sim_provider: String
    sale_date: String
    primary_bat_a_id: String
    primary_bat_b_id: String
    secondary_batteries_uid: [secondary_batteries_ids]
    roleId: String!
    primary_user_details: PrimaryUserDetailsInput
    onboarded_by: onboarded_byEnum!
  ): vehicleDetailsReponse
  offBoardVehicle(vin: String!): OffBoardResponse
  onBoardDeviceAndVehicle(
    clientLoginId: Int!
    deviceManufacturer: DeviceManufacturer!
    deviceModel: DeviceModels!
    deviceSerialNo: String!
    deviceImeiNo: String!
    phoneNumber: String!
    simNumber: String!
    serviceProvider: ServiceProviders!
    vehicleNumber: String!
    vehicleType: VEHICLE!
    vehicleModel: String!
    engineNumber: String
    chassisNumber: String
  ): VehicleDetails
  createGeoFenceKeys(run: Boolean!): Boolean
  setKidsTimeFence(
    vin: String!
    app_user_id: String!
    timeFenceName: String!
    fromTime: String!
    toTime: String!
    osLimit: Int!
    weekDays: [Weekday!]!
    fromDate: String!
    toDate: String!
    push_notifications_enabled: Boolean!
    whatsapp_enabled: Boolean!
    sms_enabled: Boolean!
    email_enabled: Boolean!
  ): KidsTimeFenceResponseObject
  setTimeFence(
    vin: String!
    app_user_id: String!
    timeFenceName: String!
    fromTime: String!
    toTime: String!
    osLimit: Int!
    weekDays: [Weekday!]!
    fromDate: String!
    toDate: String!
    push_notifications_enabled: Boolean!
    whatsapp_enabled: Boolean!
    sms_enabled: Boolean!
    email_enabled: Boolean!
  ): TimeFenceResponseObject
  updateTimeFence(
    vin: String!
    app_user_id: String!
    enableAlertStatus: Boolean!
    timeFenceName: String!
    fromTime: String!
    toTime: String!
    weekDays: [Weekday!]!
    fromDate: String!
    toDate: String!
    push_notifications_enabled: Boolean!
    whatsapp_enabled: Boolean!
    sms_enabled: Boolean!
    email_enabled: Boolean!
    osLimit: Int!
    kids_timefence: Boolean
  ): updateTimeFenceResponse
  deleteTimeFence(
    vin: String!
    app_user_id: String!
    kids_timefence: Boolean
  ): deleteTimeFenceRes
  setConditionalAlertConfig(
    vin: String!
    app_user_id: String!
    alert_parameter: String!
    alert_threshold_critical_high: Float
    alert_threshold_high: Float
    alert_threshold_low: Float
    alert_threshold_critical_low: Float
    is_enabled: Boolean!
  ): setConditionalAlertConfigResponse
  addOverSpeedAlertConfig(
    osLimit: Int!
    clientLoginId: Int!
    uniqueDeviceId: String!
    fromTimestamp: String!
    toTimestamp: String!
    email: String
    sms: String
  ): Boolean!
  updateOverSpeedAlertConfig(
    id: Int!
    osLimit: Int!
    clientLoginId: Int!
    uniqueDeviceId: String!
    fromTimestamp: String!
    toTimestamp: String!
    email: String
    sms: String
    status: Int!
  ): Boolean!
  setOverspeedThreshold(
    osLimit: Int!
    vin: String!
    app_user_id: String!
  ): overSpeedResponse
  addGeofenceAlertConfig(
    areaId: Int!
    clientLoginId: Int!
    uniqueDeviceId: String!
    fromTimestamp: String!
    toTimestamp: String!
    email: String
    sms: String
  ): Boolean!
  updateGeofenceAlertConfig(
    id: Int!
    areaId: Int!
    clientLoginId: Int!
    uniqueDeviceId: String!
    fromTimestamp: String!
    toTimestamp: String!
    email: String
    sms: String
    status: Int!
  ): Boolean!
  addRoles(clientLoginId: Int!, roleName: String!): Boolean!
  addRoleAndFeatures(
    clientLoginId: Int!
    roleName: String!
    featureRoleAssignLists: [FeatureRoleAssigns!]
  ): Boolean!
  updateRoleDetail(
    id: Int!
    clientLoginId: Int!
    roleName: String!
    status: Int!
  ): Boolean!
  deleteRoleFeatures(roleId: Int!): Response!
  addGroups(clientLoginId: Int!, groupName: String!): Boolean!
  updateGroupDetail(
    id: Int!
    clientLoginId: Int!
    groupName: String!
    status: Int!
  ): Boolean!
  addGroup(groupName: String!): groupDetails!
  updateGroupName(groupId: Int!, newGroupName: String!): updatedGroupDet!
  deleteGroupAPI(groupId: Int!): deletedGroup!
  assignVehiclesToGroupAPI(
    groupId: Int!
    vehicleList: [VehicleNumList!]!
  ): assignDetails!
  deAssignVehiclesFromGroupAPI(
    groupId: Int!
    vehicleList: [VehicleNumList!]!
  ): assignDetails!
  updateUserDetail(
    id: Int!
    userName: String!
    email: String
    contactNumber: String!
    countryCode: String!
    clientLoginId: Int
    roleId: Int!
    groupId: Int!
    status: Int!
    loginId: Int!
    loginUsername: String!
    address: String
  ): String!
  deleteGroup(groupId: Int!): String!
  deleteUser(userId: Int!): String!
  addDriver(
    driverName: String!
    firstName: String!
    lastName: String!
    email: String
    license: String!
    countryCode: String!
    contactNumber: String!
    userLoginId: Int
    clientLoginId: Int
    vehicleId: Int
    rfid: String!
    vehicleType: String!
    driverType: String!
    licenseExpiry: String!
    driverImage: String
    otherDocument: String
  ): Boolean!
  updateDriverDetail(
    id: Int!
    driverName: String!
    firstName: String!
    lastName: String!
    email: String
    license: String!
    countryCode: String!
    contactNumber: String!
    clientLoginId: Int
    userLoginId: Int
    vehicleId: Int
    rfid: String!
    vehicleType: String!
    driverType: String!
    licenseExpiry: String!
    driverImage: String
    otherDocument: String
    status: Int!
  ): Boolean!
  deleteDriver(id: Int!): Boolean!
  assignVehiclesToGroup(
    groupId: Int!
    vehicleList: [VehicleListInput!]!
  ): Boolean!
  assignVehicleToGroup(
    groupId: Int!
    vehicleList: [VehicleListInput!]!
  ): Boolean!
  deAssignVehicleFromGroup(
    groupId: Int!
    vehicleList: [VehicleListInput!]!
  ): Boolean!
  addFeatures(
    featureName: String!
    featureKey: String!
    costPerAssetPerMonth: Int!
    featureDescription: String!
  ): Boolean!
  updateFeature(
    id: Int!
    featureName: String!
    featureKey: String!
    costPerAssetPerMonth: Int!
    featureDescription: String!
    status: Int!
  ): Boolean!
  addPlans(
    planName: String!
    description: String!
    featureList: String!
    costPerAsset: Int!
    partnerLoginId: Int
  ): Boolean!
  updatePlans(
    id: Int!
    planName: String!
    description: String!
    featureList: String!
    costPerAsset: Int!
    partnerLoginId: Int
    status: Int!
  ): Boolean!
  deletePlan(id: Int!, partnerLoginId: Int): Boolean!
  addAccessoryDetail(
    serialNumber: Int!
    uniqueAccessoryId: String!
    accessoryTypeId: Int!
    manufacturerId: Int!
    ownerLoginId: Int!
  ): Boolean!
  updateAccessoryDetail(
    serialNumber: Int!
    uniqueAccessoryId: String!
    status: Int!
    accessoryTypeId: Int!
    manufacturerId: Int!
    ownerLoginId: Int!
    oldUniqueAccessoryId: String!
  ): Boolean!
  deleteSubscription(
    id: Int!
    clientLoginId: Int!
    partnerLoginId: Int!
  ): Boolean!
  addAreaType(areaTypeName: String!): Boolean!
  updateAreaType(id: Int!, areaTypeName: String!, status: Int!): Boolean!
  deleteGeofence(
    vin: String!
    app_user_id: String!
    geofence_id: [Int!]!
  ): DetetedGeoFenceResponse
  setGeofenceOld(
    userId: String!
    centerLat: Float
    centerLng: Float
    radius: Int
    type: geofenceType!
    polygonCoordinates: [lat_Long]
    geofenceName: String!
  ): geofenceResponse!
  setGeofence(
    """
    Userid must be app_user_id
    """
    userId: String!

    """
    Vehicle identification number associated with the userId
    """
    vin: String!

    """
    Particular name must be give to set geofence
    """
    geofenceName: String!

    """
    circularPosition and radius must be provided
    """
    circularGeofence: CircularGeofences

    """
    required geofenceType circle or polygon
    """
    geofenceType: geofenceType!

    """
    coordinate and polygonposition must be provided
    """
    polygonGeofence: PolygonGeofences

    """
    recipient id  must be phonenumber
    """
    recipients: [String]!
    notification_enabled: Boolean
    entry_notification_enabled: Boolean
    exit_notification_enabled: Boolean
  ): geofenceResponses!
  setKidsModeGeofence(
    """
    Userid must be app_user_id
    """
    app_user_id: String!

    """
    Vehicle identification number associated with the userId
    """
    vin: String!

    """
    Particular name must be give to set geofence
    """
    geofenceName: String!

    """
    circularPosition and radius must be provided
    """
    circularGeofence: CircularGeofences

    """
    required geofenceType circle or polygon
    """
    geofenceType: geofenceType!

    """
    coordinate and polygonposition must be provided
    """
    polygonGeofence: PolygonGeofences

    """
    recipient id  must be phonenumber
    """
    recipients: [String]!
  ): kidsGeofenceResponses!
  editGeofenceOld(
    geofenceId: Int!
    userId: String!
    geofenceType: editType!
    centerLat: Float
    centerLng: Float
    radius: Int
    polygonCoordinates: [lat_Long]
    geofenceName: String
    recipients: [String]!
    alertStatus: Int!
  ): editGeofenceOldResponse!
  editGeofence(
    geofenceId: Int!
    userId: String!
    vin: String!
    geofenceName: String!
    circularGeofence: CircularGeofences
    geofenceType: geofenceType!
    polygonGeofence: PolygonGeofences
    recipients: [String]!
    alertStatus: Boolean!
    notification_enabled: Boolean
    entry_notification_enabled: Boolean
    exit_notification_enabled: Boolean
  ): editGeofenceResponse!
  removeVehicleFromGeofence(
    geofenceId: Int!
    vin: [String!]
  ): RemoveVehicleFromGeofenceResponse!
  addSecondaryUser(
    vin: String!
    user_name: String!
    email: String
    iso_code: ISO_CODES!
    mobile_number: String!
    blood_group: BGList
    roleId: String!
  ): secondaryUserResponse
  addUser(
    user_name: String!
    email: String
    iso_code: ISO_CODES!
    mobile_number: String!
    blood_group: BGList
  ): UserResponse
  removeUserVehicleAssociation(
    vin: String!
    primary_app_user_id: String!
    app_user_ids: [String!]!
  ): removeSecondaryUsersResponse!
  updateUserDetails(
    app_user_id: String!
    user_name: String!
    email: String
    mobile_number: String!
    blood_group: BGList
    iso_code: ISO_CODES!
    fleet_owner_email: String
  ): updateUserDetailsResponse!
  updatePrimaryUser(
    vin: String!
    old_primary_app_user_id: String!
    user_name: String!
    mobile_number: String!
    iso_code: ISO_CODES!
    blood_group: BGList
    email: String!
    roleId: String!
    fleet_owner_email: String
  ): updatePrimaryUserResponse!
  updateVinDetails(
    vin: String!
    vehicle_nick_name: String
    sale_date: String
    vehicle_registration_number: String
    description: String
    vehicle_colour: String
    imei_number: String
    phone_number: String
    sim_number: String
    hc_imei: String
    pcc_imei: String
    primary_bat_a_uid: String
    primary_bat_b_uid: String
    secondary_batteries_uid: [secondary_batteries_uid]
    HCC_nick_name: String
    PCC_nick_name: String
  ): updateVinDetailsResponce
  updateNonOwnerStatus(
    vin: String!
    app_user_id: String!
    status: String!
    command_value: Int!
  ): CommandStatusResponse
  offBoardUser(app_user_id: String!): offBoardUserResponse
  addLicenseType(
    licenseType: String!
    description: String!
    featureList: String!
    maxPrice: Int!
  ): Boolean!
  updateLicenseType(
    id: Int!
    licenseType: String!
    description: String!
    featureList: String!
    maxPrice: Int!
    status: Int!
  ): Boolean!
  addSalesPerson(
    personName: String!
    contactNumber: String!
    email: String!
    address: String
    partnerLoginId: Int
    clientLoginId: Int
  ): String!
  updateSalesPerson(
    id: Int!
    personName: String!
    contactNumber: String!
    email: String!
    address: String
    partnerLoginId: Int!
    clientLoginId: Int!
  ): String!

  """
  Sync third party api's data
  """
  syncThirdPartyAPIData(
    """
    Type of script to run
    """
    scriptType: ScriptType!

    """
    Partner's unique login id
    """
    partnerLoginId: Int

    """
    Client's unique login id
    """
    clientLoginId: Int
  ): SyncDataResponse!
  addDeviceSimMapping(
    vehicleIdentificationNumber: String!
    deviceSerialNo: String!
    deviceImeiNo: String!
    deviceModel: DeviceModels
    phoneNumber: String!
    simNumber: String!
    serviceProvider: ServiceProviders
    clientLoginId: Int
  ): deviceSimMapped!
  updateDeviceSimMapping(
    vehicleIdentificationNumber: String!
    deviceSerialNo: String
    deviceImeiNo: String
    deviceModel: DeviceModels
    phoneNumber: String
    simNumber: String
    serviceProvider: ServiceProviders
    clientLoginId: Int
    status: Int
  ): Boolean
  updatevehicleIdentificationNumber(
    deviceSerialNo: String!
    vehicleIdentificationNumber: String!
  ): Boolean
  deleteDeviceSimMapping(vehicleIdentificationNumber: String!): Boolean!
  uploadFile(file: Upload!, vehicleNumber: String!): File!
  activateSim(simDOList: [simDOList!]!): ActivateSimResponse
  shareLiveLocation(
    vin: String!
    shared_by_app_user_id: String!
    map_provider: Maps
    share_name: String
    shared_to_emails: [String!]!
    shared_to_sms: [countryCode_phoneNumber!]!
    shared_to_app_user_ids: [String!]!
    time_to_share_till: String
    destination: [lat_long_destination!]!
  ): ShareLiveLocationResponse
  stopLiveLocation(
    request_id: Int!
    vin: String!
    app_user_id: String
  ): stopLiveLocationResponse
  addEmergencyContacts(
    app_user_id: String!
    vin: String
    contacts_details: [contacts_detailsRequest]!
  ): addEmergencyContactsResponse
  updateEmergencyContacts(
    app_user_id: String!
    vin: String
    emergency_contact_id: Int!
    emergency_contact_name: String!
    iso_code: ISO_CODES!
    emergency_mobile_number: String!
    email_id: String
  ): updateEmergencyContactsResponse
  deleteEmergencyContacts(
    app_user_id: String!
    vin: String
    emergency_contact_id: [Int!]!
  ): deleteEmergencyContactsResponse
  updateEmergencyContactsStatus(
    app_user_id: String!
    vin: String!
    status: String!
    command_value: commandValueInputs!
  ): updateStatusResponse
  setOfflineMaps(
    vin: String!
    map1: String
    size1: Float
    map2: String
    size2: Float
  ): ResultDetails
  removeHomecharger(vin: String!, hc_imei: String!): removeHomechargerResponce
  removePortableCharger(
    vin: String!
    pcc_imei: String!
  ): removePortableChargerResponce
  onboardHomecharger(
    hc_imei: String!
    vin: String!
    HCC_nick_name: String
  ): onboardHomechargerResponse
  addAccessoryData(
    role_id: String!
    device_id: String!
    device_type: String!
    accessory_name: String!
  ): addAccessoryDataResponse
  updateAccessoryData(
    device_id: String!
    device_type: String!
    accessory_name: String!
  ): accessoryDataResponse
  deleteAccessoryData(device_id: String!): accessoryDataResponse
  createRole(
    role_name: String!
    api_ids: [Int!]!
    role_type: RoleType!
    model_name: Model!
  ): createRoleResponse
  deleteRole(roleId: String!): deleteRoleResponse
  updateRole(
    roleId: String!
    api_ids: [Int!]!
    role_type: RoleType!
  ): updateRoleResponse
  addAPI(api_name: String!, api_type: api_typeEnum): addAPIResponse
  updateAPI(
    api_id: Int!
    api_name: String!
    api_type: api_typeEnum
  ): updateAPIResponse
  deleteAPI(api_id: Int!): deleteAPIResponse
  deleteAPIfromRole(roleId: String!, api_id: Int!): deleteApiRoleResponse
  deleteWallpaper(
    wallpaper_id: Int!
    vin: String
    app_user_id: String
    type: wallpaperType!
  ): wallpaperResponse
  setWallpaper(
    vin: String!
    wallpaper_id: Int!
    app_user_id: String!
  ): setWallpaperResponse
  unSetWallpaper(
    vin: String!
    wallpaper_id: Int!
    app_user_id: String!
  ): setWallpaperResponse
  updateStatus(
    vin: String!
    id: Int!
    app_user_id: String!
    status: StatusEnum!
    command: String!
  ): statusResponse
  onBoardPortableCharger(
    pcc_imei: String!
    vin: String!
    PCC_nick_name: String
  ): onBoardPortableChargerResponse
  deleteProfileImage(app_user_id: String!): deletePIResponse
  deleteDocument(
    vin: String
    app_user_id: String!
    document_id: Int!
  ): documentResponse

  """
  Insert a fcmToken,clientLoginId or update FCM settings
  """
  updateClientFcmSettings(input: FcmTokenInput!): ClientFcmToken!

  """
  Delete fcmToken, clientLoginId from DB
  """
  unregisterClientFcmToken(input: FcmTokenInput!): ClientFcmToken!

  """
  Insert a fcmToken,clientLoginId or update FCM settings
  """
  updateTheClientFcmSettings(
    fcmToken: String!
    platform: PLATFORM!
    app_user_id: String!

    """
    enabled is true by default. Setting this false will not send fcm notifications to this client
    """
    enabled: Boolean!
  ): updateTheClientFcmSettingsResponse

  """
  Delete fcmToken, clientLoginId from DB
  """
  unregisterTheClientFcmToken(
    fcmToken: String!
    platform: PLATFORM!
    app_user_id: String!
  ): unregisterTheClientFcmTokenResponse
  sendFcmToken(
    app_user_id: String!
    notification: notification
    payload: payload
    platform: String
    model: String!
    token: String
    rawJsonStringified: String
  ): sendFcmTokenResponse
  updateAlertViewStatus(
    uniqueId: String!
    alerttype: String!
    from_ts: String!
    view_status: Boolean!
  ): Message
  raiseSOSAlert(vin: String!, app_user_id: String!): RaiseSOSAlertRespone
  stopSoSAlert(
    vin: String!
    app_user_id: String
    event_id: String!
  ): stopSOSAlertResponse
  deleteFavoriteLocation(
    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    placeId length range should be 3 to 255
    """
    placeId: String!
  ): statusMessageRespons
  deleteSharedDestination(
    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    placeId length range should be 3 to 255
    """
    placeId: String!
  ): statusMessageRespons
  deleteRecentLocation(
    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    placeId length range should be 3 to 255
    """
    placeId: String!
  ): statusMessageRespons
  editFavoriteLocation(
    """
    placeId length range should be 3 to 255
    """
    placeId: String!

    """
    checking uniqueness with vin,userId ,placeId
    """
    user_generated_name: String!

    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    Location Type: home, work or other.
    """
    location_type: locationTypeEnum
  ): statusMessageRespons
  shareDestination(
    """
    min:3 and max:200 of locationName
    """
    locationName: String

    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    userId will be phone number,taking from simDetails
    """
    toUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    placeId length range should be 3 to 255
    """
    placeId: String

    """
    lat and long of the location
    """
    lat_long: [lat_longRes]!

    """
    address of the location
    """
    address: String!

    """
    Location Type: home, work or other.
    """
    location_type: locationTypeEnum
  ): statusMessageRespons!
  addFavoriteLocation(
    """
    min:3 and max:200 of locationName
    """
    locationName: String

    """
    checking uniqueness with vin,userId ,placeId
    """
    user_generated_name: String!

    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    lat and long of the location
    """
    lat_long: lat_longRes!

    """
    placeId length range should be 3 to 255
    """
    placeId: String

    """
    address of the location
    """
    address: String!

    """
    Location Type: home, work or other.
    """
    location_type: locationTypeEnum
  ): statusResponse
  addRecentLocation(
    """
    min:3 and max:200 of locationName
    """
    locationName: String

    """
    userId will be phone number,taking from simDetails
    """
    fromUserId: String!

    """
    vehicle Identification Number
    """
    vin: String!

    """
    lat and long of the location
    """
    lat_long: lat_longRes!

    """
    placeId length range should be 3 to 255
    """
    placeId: String

    """
    address of the location
    """
    address: String!
  ): statusResponse
  editTripDetails(
    vin: String!
    app_user_id: String!
    start_timestamp: String!
    end_timestamp: String!
    favourite: Boolean
    name: String
  ): editTripDetailsResponse
  addRide(
    vin: String!
    app_user_id: String!
    vehicleTypeId: Int!
    travelFileName: String
    vehicleModelName: String
    totalTime: Int
    rideTime: Int
    travelStartDateTime: Int
    travelEndDateTime: Int
    totalTravelledDistance: Float
    topSpeed: Float
    averageSpeed: Float
    travelStatsDownloadLink: String
    travelName: String
    isFavourite: Boolean
    type: Int
    travelMMIDownloadLink: String
    startLocation: String
    endLocation: String
    day: String
    currentRideBestLapTime: Int
    currentRideBestLapNumber: Int
    currentRideTotalLapTime: Int
    currentRideTotalLaps: Int
    literPer100KM: Float
    highestAltitude: Float
    lastFuelStatus: Int
    lowestAltitude: Float
    vehicleAvgSpeed: Float
    distanceToEmpty: Float
    mileage: Float
    odometerReading: Float
    batteryVoltage: Float
    cruisingRange: Int
    vehicleBest0to60: Float
    best0To100: Float
    vehicleTopSpeed: Float
    idleTime: Int
    averageRPM: Float
    topSpeedOverAll: Float
    bestShortestTimeSportMode: Float
    totalDistanceOverAll: Float
    totalDuration: Int
    maxAcceleration: Float
    altitude: Float
    maxDeceleration: Float
    temperature: Float
    isCompleted: Boolean
    bestDeceleration: String
    bestAcceleration: String
    rearTyreMacId: String
    frontTyreBattery: Float
    speedoSWVersion: String
    frontTyrePressure: Float
    frontTyreMacId: String
    rearTyrePressure: Float
    rearTyreBattery: Float
    best0To60: Float
    frontTyreTemperature: Float
    rearTyreTemperature: Float
    totalDistanceStreetMode: Float
    weatherShortDescription: String
    isSportMode: Boolean
    weatherIcon: String
    rideTimeRaceMode: Int
    averageSpeedSportMode: Float
    averageSpeedStreetMode: Float
    totalDistanceRaceMode: Float
    lapDistanceSportMode: Float
    averageSpeedRaceMode: Float
    rideTimeStreetMode: Float
    rideTag: Int
    topSpeedRaceMode: Int
    topSpeedSportMode: Float
    isStreetMode: Boolean
    topRPMRaceMode: Float
    isRaceMode: Boolean
    best0to60RaceMode: Float
    userId274140: String
    topSpeedStreetMode: Float
    weatherTemp: Float
    topRPM: Int
    topRPMStreetMode: Float
    best0to60StreetMode: Float
    averageSpeedOverAll: Float
    modes: [ModesResponse]
    gears: [GearsResponse]
    laps: [LapsResponse]
    tour: TourResponse
  ): addRideResponse
  deleteRide(
    vin: String!
    app_user_id: String!
    vehicleTypeId: Int!
    travelId: Int!
    type: Int!
  ): deleteRideResponse
  updateRide(
    vin: String!
    app_user_id: String!
    vehicleTypeId: Int!
    travelId: Int!
    travelName: String
    isFavourite: Boolean
    type: Int!
  ): updateRideResponse
  setCommandsToQueue(
    vin: String
    app_user_id: String
    hc_imei: String
    device_type: deviceTypeEnum!
    command_type: commandTypeEnum!
    commandSource: commandSource_Enum!
    commandArguments: commandArgument!
    sequence_number: String
  ): CommandsToQueueResponse
  setCommandsToQueueOld(
    commandSource: commandSource_Enum
    commandArguments: [commandArgumentsResponse]

    """
    Date Format is YYYY-mm-dd HH-MM-ss
    """
    createTime: String
    sequence_number: String
  ): CommandsToQueueResponseOld
  setVehicleKidsModeSettings(
    vin: String!
    app_user_id: String!
    kids_ovrst: overspeedInput
    kids_geofence: geofenceInputs
    kids_timefence: timefenceInputs
  ): VehicleKidsModeCommandResponse
  updateKidsTimefence(
    vin: String!
    app_user_id: String!
    kids_timefence: timefenceInputs
  ): updateKidsTimefenceResponse
  deleteKidsTimefence(
    vin: String!
    app_user_id: String!
  ): deleteKidsTimefenceResponse
  setVehicleSettings(
    commandSource: commandSource_Enum
    vin: String!
    app_user_id: String!
    settings: SettingsInput
  ): VehicleCommandResponse
  setHomeChargerSettings(
    commandSource: commandSource_Enum
    vin: String!
    settings: SettingsInputForHomeCharger
  ): setHomeChargerSettingsResponse
  setPortableChargerSettings(
    commandSource: commandSource_Enum
    vin: String!
    settings: SettingsInputForPortableCharger
  ): setPortableChargerSettingsResponse
}

scalar JSON

type ServiceProvider {
  id: Int!
  name: String!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type addDeviceModeldetailsResponse {
  status: Int
  statusMessage: String
}

type getAllDeviceModelDetailsResponse {
  status: Int
  statusMessage: String
  response: [deviceModelResponse]
}

type deviceModelResponse {
  model: String
  vehicleTypeId: Int
  series: String
  description: String
  variantAndTheme: [VariantAndThemeResonse]
}

type VariantAndThemeResonse {
  variant: String
  theme: String
}

type DeviceModel {
  id: Int!
  model_name: String!
  vehicleTypeId: Int
  version: Float!
  devicetype: String!
  description: String
  series: String
  theme: String
  maxPrice: Int
  manufacturer: Manufacturer!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type activationStatus {
  device_mapping: device_mapping
  status: Int!
  statusMessage: String!
}

type device_mapping {
  userIds: [String!]
  unitId: String!
  vin: String!
}

input inputDevices {
  deviceSerialNo: String!
  deviceImeiNo: String!
}

type deletedDevice {
  deviceSerialNo: String!
  deviceImeiNo: String!
}

type deviceResponse {
  deviceNumbers: [deviceData!]!
  simProvider: String!
  deviceModel: String!
  deviceManufacturer: String!
}

type deviceData {
  deviceSerialNo: String!
  deviceImeiNo: String!
}

type DeviceDetail {
  serial_num: String!
  imei_num: String!
  uniqueDeviceId: String!
  ownerLoginId: Int
  createdAt: String!
  updatedAt: String!
  vehicleDetail: VehicleDetail
  status: Int!
  deviceModelId: DeviceModel!
  manufacturer: Manufacturer!
  clientName: String
  clientDetails: ClientDetail
  partnerDetails: PartnerDetail
}

enum DeviceStatus {
  DEVICE_ADDED
  ASSIGNED_TO_CLIENT
  REGISTERED_TO_VEHICLE
  ALL
}

enum VEHICLETYPES {
  Car
  Bus
  Bike
  Scooter
  Ambulance
  Truck
}

enum SIMPROVIDER {
  airtel
  idea
}

enum DEVICEMANUFACTURER {
  iTriangle
  MINDA
  DANLAW
  iTriangledemo
}

enum DEVICEMODEL {
  TS_101_Basic_Hybrid
  OBD2
  TS101
  S101
  U101
  R101
  TS101_Basic
  TS101_Advance
  S101_PLUS_1
  B101V2
  Bharat_101_1
  RE_CONNECT_1
  RE_CONNECT_2
}

type DeviceCountByDeviceModel {
  id: Int!
  model_name: String!
  version: Float!
  devicetype: String!
  deviceCount: Int!
}

type CountryModel {
  country_id: Int!
  name: String!
  iso_code_2: String!
  iso_code_3: String!
  address_format: String!
  postcode_required: Int!
  status: Int!
  states: [StateModel!]
}

enum COUNTRY {
  India
}

type StateModel {
  zone_id: Int!
  country_id: Int!
  code: String!
  name: String!
  status: Int!
}

enum STATE {
  Andaman_and_Nicobar_Islands
  Andhra_Pradesh
  Arunachal_Pradesh
  Assam
  Bihar
  Chandigarh
  Dadra_and_Nagar_Haveli
  Daman_and_Diu
  Delhi
  Goa
  Gujarat
  Haryana
  Himachal_Pradesh
  Jammu_and_Kashmir
  Karnataka
  Kerala
  Lakshadweep_Islands
  Madhya_Pradesh
  Maharashtra
  Manipur
  Meghalaya
  Mizoram
  Nagaland
  Orissa
  Pondicherry
  Punjab
  Rajasthan
  Sikkim
  Tamil_Nadu
  Tripura
  Uttar_Pradesh
  West_Bengal
}

enum SimStatus {
  SIM_ADDED
  ASSIGNED_TO_CLIENT
  REGISTERED_TO_VEHICLE
  ALL
}

input inputSims {
  phoneNumber: String!
}

type simResponse {
  simPhoneNumber: [simData!]!
  simProvider: String!
  deviceModel: String!
  deviceManufacturer: String!
}

type simData {
  phoneNumber: String!
}

type SimDetail {
  id: Int!
  phoneNumber: String!
  simNumber: String!
  ownerLoginId: Int!
  monthlyCharges: Int!
  createdAt: String!
  updatedAt: String!
  status: Int!
  serviceProviderId: Int
  serviceProvider: ServiceProvider!
  clientName: String
  superAdmin: Boolean
  clientDetails: ClientDetail
  partnerDetails: PartnerDetail
  vehicleDetails: VehicleDetail
}

type SimDetailResponse {
  id: Int!
  phoneNumber: String!
  simNumber: String!
  ownerLoginId: Int!
  monthlyCharges: Int!
  createdAt: String!
  vehicleDetail: vehicleDetailsResponse
  updatedAt: String!
  status: String!
  serviceProvider: ServiceProvider!
  clientName: String
}

type SimCountByOperator {
  id: Int!
  name: String!
  simCount: Int!
}

input TIMEZONE {
  TIMEZONE: String
}

type Login {
  loginId: Int
  username: String
  password: String
  accountType: String
}

type AuthPayload {
  login: Login
  token: String
  refreshToken: String
}

type newLoginWithOTPResponse {
  loginStatus: Boolean
  status: Int
  statusMessage: String
}

type validateOtpResponse {
  token: String
  login: Login
  status: Int
  statusMessage: String
}

type logoutResponse {
  isSuccess: Boolean!
  message: String!
}

type AuthToken {
  token: String!
  expiry: String
}

type liveLocSharingToken {
  token: String!
}

type ClientDetailsResponse {
  clientLoginId: Int!
  message: String!
  loginId: Int!
  username: String!
  password: String!
  clientName: String!
  email: String!
  contactPerson: String!
  contactNumber: String!
  address: String!
  aadharNumber: String
  gst: String
  city: String!
  state: String!
  country: String!
  pincode: Int
  panNumber: String
  timezone: String!
}

type SubLoginDetails {
  subLoginId: Int!
  username: String!
  password: String!
  subLoginName: String!
  email: String
  contactNumber: String!
  roleId: Int!
  groupId: Int!
}

type regerateResponseToken {
  token: String
  expiry_time: String
  vin: String
  app_user_id: String
  status: Int!
  statusMessage: String!
}

enum action {
  ACTIVATE
  DEACTIVATE
}

type PartnerDetail {
  id: Int!
  businessName: String!
  email: String!
  contactPerson: String!
  contactNumber: String!
  countryCode: String
  billingMode: BillingMode!
  login: Login!
  address: String!
  domain: String
  city: String!
  state: StateModel!
  country: CountryModel!
  pincode: Int!
  panNumber: String!
  partnerType: String!
  createdAt: String!
  updatedAt: String!
  status: Int!
  clients: [ClientDetail!]
  assignDevices: [DevicePartnerAssign!]
  assignSIMs: [SimPartnerAssign!]
  type: ClientPartnerType
  SalesPerson: SalesPerson
  wallet: Int
  simWallet: Int
  solution: Solution!
  totalRegisteredVehicles: Int
  deviceCount: DeviceCount
  simCount: SimCount
}

enum ClientPartnerType {
  PARTNER
  CLIENT
}

enum Solution {
  PORTAL
  API
}

type DeviceCount {
  totalDevices: Int!
  inStockDevices: Int!
  assignedToClientDevices: Int!
  registeredDevices: Int!
}

type SimCount {
  totalSims: Int!
  inStockSims: Int!
  assignedToClientSims: Int!
  registeredSims: Int!
}

type Manufacturer {
  id: Int!
  manufacturerName: String!
  manufacturerCode: String!
  email: String!
  contactPerson: String!
  contactNumber: String!
  address: String!
  city: String!
  state: StateModel!
  country: CountryModel!
  pincode: Int!
  createdAt: String!
  updatedAt: String!
  status: Int!
  manufacturedDevices: [DeviceDetail!]
}

type DevicePartnerAssign {
  id: Int!
  device: DeviceDetail!
  partner: PartnerDetail!
  deviceModel: DeviceModel!
  uniqueDeviceId: String!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type ClientDeviceStock {
  totalAssignedDevice: Int!
  totalRegisteredDevice: Int!
  totalUnRegisteredDevice: Int!
}

type PartnerDeviceStockDetail {
  modelId: Int
  modelName: String!
  totalAssignedDevice: Int!
  totalAssignedDeviceToClient: Int!
  totalRegisteredDevice: Int!
  availableStock: Int!
}

type DeviceAvailabilityVerification {
  serial_num: String!
  uniqueDeviceId: String!
}

input DeviceListInput {
  serial_num: String!
  uniqueDeviceId: String!
}

type SimPartnerAssign {
  id: Int!
  sim: SimDetail!
  partner: PartnerDetail!
  serviceProvider: ServiceProvider!
  simId: Int!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type PartnerSimStockDetail {
  simProviderId: Int
  serviceProviderName: String!
  totalAssignedSim: Int!
  totalAssignedSimToClient: Int!
  totalRegisteredSim: Int!
  availableStock: Int!
}

type SimAvailabilityVerification {
  simNumber: String!
}

input SimListInput {
  simNumber: String!
}

type ClientDetail {
  id: Int!
  clientName: String!
  email: String
  partnerLoginId: Int!
  contactPerson: String!
  contactNumber: String!
  primaryCountryCode: String
  loginId: Int!
  login: Login!
  plan: Plans
  address: String!
  city: String!
  wallet: Int
  simWallet: Int
  billingMode: BillingMode!
  solution: String
  salesPerson: SalesPerson
  state: StateModel
  country: CountryModel!
  countryId: Int!
  pincode: Int
  panNumber: String
  gst: String
  clientType: String!
  timezone: String!
  lat: Float
  long: Float
  weights: JSON
  createdAt: String!
  updatedAt: String!
  partner: PartnerDetail
  reseller: ResellerDetails
  licenseType: LicenseType
  status: Int!
  totalAssignedVehicle: Int!
  totalDevices: Int!
  totalRegisteredDevices: Int!
  totalUnregisteredDevices: Int!
  assignedFeatures: [Features!]!
  type: String
  expiryDate: String
  trackingDetails: TRACKINGDETAILS
  isERP: Boolean
  totalClientVehicles: Int
  registrationType: String
  secondaryContactName: String
  secondaryContactNumber: String
  secondaryCountryCode: String
  secondaryEmail: String
  shippingAddress: String
  shippingCountry: CountryModel
  shippingState: StateModel
  shippingCity: String
  shippingPincode: Int
  minimumTrackedDays: Int!
  packetThreshold: Int
  prorata: Int!
  addressEffectiveDate: String
}

type driverWeightsForClient {
  overspeed: Float!
  harseAcceleration: Float!
  harseBreaking: Float!
  harseControl: Float!
}

input driverWeightsForClientInput {
  overspeed: Float!
  harseAcceleration: Float!
  harseBreaking: Float!
  harseControl: Float!
}

type TRACKINGDETAILS {
  trackingCount: Int!
  nonTrackingCount: Int!
}

type ClientSOC {
  threshold: Float
}

type clientOffline {
  offlineSeconds: Int
}

input secondary_batteries_ids {
  bat_uids: String
}

type UpdateOnBoardedVehicleResponse {
  vehicleId: Int!
  deviceManufacturer: String!
  deviceModel: String!
  deviceSerialNo: String!
  deviceImeiNo: String!
  phoneNumber: String!
  simNumber: String!
  serviceProvider: String!
  vehicleNumber: String!
  vehicleType: String!
  vehicleModel: String!
  engineNumber: String
  chassisNumber: String
}

type vehicleDetailsReponse {
  response: VehicleDetailsOnBoard
  status: Int
  statusMessage: String
}

type VehicleDetailsOnBoard {
  vehicle_id: String
  vin: String
  imei_number: String
  vehicle_registration_number: String
  vehicle_nick_name: String
  vehicle_model: String
  description: String
  vehicle_colour: String
  vehicle_type_id: Int
  theme: Int
  variant: String
  sim_number: String
  phone_number: String
  sim_provider: String
  sale_date_timestamp: String
  primary_bat_a_id: String
  primary_bat_b_id: String
  secondary_batteries_uid: [SecondBatteryDetails]
  primary_user_details: PrimaryUserDetailsResp
  onboarded_by: String
}

input PrimaryUserDetailsInput {
  username: String
  email: String
  mobile_number: String
  iso_code: ISO_CODES
  blood_group: BGList
  fleet_owner_email: String
}

type SecondBatteryDetails {
  bat_uids: String
}

type PrimaryUserDetailsResp {
  app_user_id: String
  username: String
  email: String
  mobile_number: String
  blood_group: String
  iso_code: String
  country_code: Int
  token: String
  fleet_owner_email: String
  expiry_time: String
}

type VehicleDetails {
  vehicleId: Int
  deviceManufacturer: String
  deviceModel: String
  deviceSerialNo: String
  deviceImeiNo: String
  serviceProvider: String
  phoneNumber: String
  simNumber: String
  vehicleNumber: String!
  vehicleModel: String!
  vehicleIdentificationNumber: String
  vehicleColour: String
}

type updatedVehicleDetails {
  vehicleNumber: String!
}

type UserVehicle {
  vehicleNumber: String
}

enum onboarded_byEnum {
  TNT
  P360
}

enum STATUS {
  ACTIVE
  DEACTIVE
  INACTIVE
  SERVICE
}

enum vehicleStatus {
  PENDING
  APPROVED
  REJECT
  OTP_GENERATED
}

enum BGList {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

type vehicleMMMTCResponse {
  mmtc: Int!
  subscriptionId: Int
  clientLoginId: Int
}

type boardedVehicleDetails {
  deviceManufacturer: String!
  deviceModel: String!
  deviceSerialNo: String!
  deviceImeiNo: String!
  simProvider: String!
  simPhoneNumber: String!
  vehicleNumber: String!
  vehicleMake: String
  vehicleModel: String!
  vehicleType: String!
  averageMileage: Int!
}

type VehicleDetail {
  entityId: Int!
  vehicleNumber: String!
  engineNumber: String
  averageMileage: Int
  chassisNumber: String
  client: ClientDetail!
  device: DeviceDetail!
  sim: SimDetail!
  speedSensorType: String!
  speedLimit: Int!
  vehicleType: String!
  vehicleModel: String!
  vehicleCapacity: Int
  createdAt: String!
  updatedAt: String!
  activatedAt: String!
  deactivatedAt: String!
  status: Int!

  """
  Invoice number (optional)
  """
  invoiceNumber: String

  """
  Equipment serial number (optional)
  """
  equipmentSerialNumber: String

  """
  Equipment serial number (optional)
  """
  equipmentName: String

  """
  Commissioning date
  """
  commissioningDate: Int
  department: String
  certificatePath: String
  approveStatus: String
  idlingSpeed: Int
  generatorCapacity: Int
  averageConsumption: Int
  tankCapacity: Int
  vehicleGroupAssign: String
  contractorName: String
  operatorName: String
  operatorContactNumber: String
  panicType: String
  model: String
  variant: String
  primary_app_user_id: String
  homeChargerDetails: homeChargerDetails
}

type vehicleDetailsResponse {
  entityId: Int!
  vehicleNumber: String!
  averageMileage: Int
  speedSensorType: String!
  vehicleType: String!
  vehicleModel: String!
  createdAt: String!
  updatedAt: String!
  status: String!
}

type VehicleDeviceDetail {
  entityId: Int!
  vehicleNumber: String!
  engineNumber: String
  chassisNumber: String
  deviceDetail: DeviceDetail!
  simDetail: SimDetail!
  vehicleGroupAssign: String
  speedSensorType: String!
  speedLimit: Int!
  vehicleType: String!
  vehicleModel: String!
  vehicleMake: String
  vehicleCapacity: Int
  panicType: String
  averageMileage: Int

  """
  Invoice number (optional)
  """
  invoiceNumber: String

  """
  Equipment serial number (optional)
  """
  equipmentSerialNumber: String

  """
  Equipment serial number (optional)
  """
  equipmentName: String

  """
  Commissioning date
  """
  commissioningDate: Int
  department: String
  idlingSpeed: Int
  certificatePath: String
  approveStatus: String

  """
  Initial x coordinate
  """
  ref_x: Float

  """
  Initial y coordinate
  """
  ref_y: Float

  """
  Initial z coordinate
  """
  ref_z: Float
  contractorName: String
  operatorName: String
  operatorContactNumber: String
  model: String
  variant: String
  primary_app_user_id: String
  homeChargerDetails: homeChargerDetails
  onboarded_by: String
}

type homeChargerDetails {
  hc_imei: String
  pcc_imei: String
  primary_bat_a_uid: String
  primary_bat_b_uid: String
  secondary_batteries_uid: [SecBatDetails]
}

type SecBatDetails {
  bat_uids: String
}

type VehicleDeviceDetails {
  createdAt: String
  entityId: Int!
  vehicleNumber: String!
  engineNumber: String
  chassisNumber: String
  deviceDetail: DeviceDetail!
  simDetail: SimDetail!
  clientName: String!
  vehicleGroupAssign: String
  partnerLoginId: Int
  partnerName: String
  speedSensorType: String!
  speedLimit: Int!
  vehicleType: String!
  vehicleModel: String!
  vehicleCapacity: Int
  panicType: String
  driverName: String

  """
  Invoice number (optional)
  """
  invoiceNumber: String

  """
  Equipment serial number (optional)
  """
  equipmentSerialNumber: String

  """
  Equipment serial number (optional)
  """
  equipmentName: String

  """
  Commissioning date
  """
  commissioningDate: Int
  department: String
  idlingSpeed: Int
  certificatePath: String
  approveStatus: String
  timeZone: String
  clientLoginId: Int
  overSpeedThreshold: Float
}

type VehicleCount {
  totalRegisteredVehicle: Int!
  totalActiveVehicle: Int!
  totalInActiveVehicle: Int!
  totalServicedVehicle: Int!
  totalDeactiveVehicle: Int!
}

type vehicleData {
  entityId: Int!
  uniqueDeviceId: String!
  vehicleNumber: String!
  serialNum: String!
}

type VehicleDataForInvoice {
  entityId: Int!
  vehicleNumber: String!
  uniqueDeviceId: String!
  createdAt: String!
  activatedAt: String
  deactivatedAt: String
}

type VehicleDeviceDetailClient {
  entityId: Int!
  vehicleNumber: String!
  engineNumber: String
  chassisNumber: String
  deviceUniqueId: String
  deviceDetail: DeviceDetail!
  simDetail: SimDetail!
  simId: Int
  speedSensorType: String!
  speedLimit: Int!
  vehicleType: String!
  vehicleModel: String!
  vehicleMake: String
  vehicleCapacity: Int
  averageMileage: Int
}

enum SupportedVehicleTypes {
  Car
  Bus
  Bike
  Scooter
  Ambulance
  Truck
}

enum DeviceManufacturer {
  iTriangle
  MINDA
  DANLAW
}

enum ServiceProviders {
  AIRTEL
  IDEA
  VODAFONE
}

enum DeviceModels {
  TS_101_Basic_Hybrid
  OBD2
  TS101
  S101
  U101
  R101
  TS101_Basic
  TS101_Advance
  S101_PLUS_1
  B101V2
  Bharat_101_1
  RE_CONNECT_1
  RE_CONNECT_2
}

enum SENSOR {
  GPS
  odemeter
}

enum VEHICLE {
  Car
  Bus
  Bike
  Scooter
  Ambulance
  Truck
}

type Excavator {
  vehicleNumber: String!
  vehicleType: String
  vehicleModel: String
  uniqueId: String!
  phoneNumber: String
  speedSensorType: String
  speedLimit: Int
  panicType: String
  averageMileage: Float
  idlingSpeed: Int
  contractorName: String
  vehicleGroups: [String]
}

type Truck {
  vehicleNumber: String!
  vehicleType: String
  vehicleModel: String
  uniqueId: String!
  phoneNumber: String
  speedSensorType: String
  speedLimit: Int
  panicType: String
  averageMileage: Float
  idlingSpeed: Int
  contractorName: String
  vehicleGroups: [String]
}

enum modelList {
  U388
  U347
  TS101
  U546
  U347_UG
  HLX
  U546_PCC
  APACHE_IOT
  APACHE_NONIOT
  Apache_RTR_160_4V_NONIOT
  Apache_RTR_160_2V_NONIOT
  Apache_RR_310_NONIOT
  N360_IOT
  Ntorq_NONIOT
  JUPITER_NONIOT
}

type VinUsersResponse {
  VinUsers: [vinUsers]
  status: Int!
  statusMessage: String!
}

type vinUsers {
  vin: String!
  vehicleModel: modelList!
  users: [String]!
}

type checkResponse {
  status: Int!
  statusMessage: String!
  response: responseObject
}

type responseObject {
  onboarded_in: String!
  source: String!
  vehicle_model: String
  variant: String
  sim_provider: String
  onboarded_with_real_user: Boolean
}

type OffBoardResponse {
  status: Int
  statusMessage: String
}

type Alerts {
  id: Int!
  alertName: String!
  alertType: String!
  alertDescription: String!
  valueType: String
  valueStatus: Int!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type ClientAlertAssignDetail {
  id: Int!
  alert: Alerts!
  valueOption: [ValueOption!]
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type ValueOption {
  id: Int
  option: String
}

enum ALERT {
  OVERSPEED
  TOW
  POWER
  HA
  HB
  HC
  EXT_BAT
  INT_BAT
  IDLE
  RPM
  MIL
  FATIGUE
  OBD_COMM_ERROR
  GEOFENCE
  ACCIDENT
  COOLANT
}

enum Weekday {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

type ParamData {
  parameter: String
  pid: String
  minValue: Int
  maxValue: Int
  isEnable: Boolean!
}

type noResponseParamData {
  typeOfAlert: String
  duration: Int
  isEnable: Boolean!
}

input ParameterData {
  parameter: String
  pid: String
  minValue: Int
  maxValue: Int
  isEnable: Boolean!
}

input noResponseParameterData {
  typeOfAlert: String
  duration: Int
  isEnable: Boolean!
}

input ALERTINPUT {
  alertType: ALERT!
  alertValue: String
  enabled: Boolean!
}

type ALERTRESPONSE {
  alertType: String!
  alertValue: String
  enabled: Boolean!
}

type groupAssignedVehicles {
  vehicleNumber: String!
}

type AlertConfig {
  panicType: Int
  osLimit: Int
  voltage: Float
  areaId: Int
  areaName: String
  tripName: String
  routeName: String
  clientLoginId: Int!
  uniqueDeviceId: String!
  vehicleNumber: String!
  fromTimestamp: String
  toTimestamp: String
  fromTime: Int!
  toTime: Int!
  haltTime: Int!
  idleTime: Int!
  coolantTemp: Int!
  RPM: Int!
  fatigueDuration: Int!
  fatigueStartTime: Int!
  email: String
  sms: String
  isEmailEnable: Boolean!
  isSMSEnable: Boolean!
  isAlertEnable: Boolean!
  loginIds: LoginIds
  minTemp: Int!
  maxTemp: Int!
  value: Int
  userId: String
  recipients: [recipientObj]
}

type recipientObj {
  recipientUserId: String
  email: String
  phoneNumber: String
}

type AlertConfigObj {
  refuel: [AlertConfig]
  pilferage: [AlertConfig]
}

type DeviceConfigurationData {
  vehicle: vehicleData
  panicType: Int
  osLimit: Int
  voltage: Float
  areaIdList: [Int!]
  routeIdList: [Int!]
  sms: String
  email: String
  isAlertEnable: Boolean!
  haltTime: Int
  idleTime: Int
  duration: Int
  fromTimestamp: String
  toTimestamp: String
  clientLoginId: Int
  fromTime: Int
  toTime: Int
  minTemp: Int
  maxTemp: Int
  maintRemindFromTimestamp: Int
  maintAtDistance: Int
  maintAtHour: Int
  maintRemindAtTimestamp: Int
  maintCurrentDistance: Int
  maintCurrentHour: Int
  recurring: Boolean
  noOfDays: Int
  runningHrs: Float
  alertSent: Int
  parametersData: [ParamData]
  noResponseParameterData: [noResponseParamData]
  value: Int
}

type DeviceData {
  Configured_Speed_Limit: Int
  email: String
  Phone: String
  Vehicle_Number: String
}

type LoginIds {
  clientLoginId: Int!
  userLogins: [Int]!
}

input AlertConfigInput {
  panicType: Int
  osLimit: Int
  voltage: Float
  areaId: Int
  routeId: Int
  uniqueDeviceId: String!
  duration: Int
  fromTimestamp: String
  toTimestamp: String
  email: String
  sms: String
  haltTime: Int
  idleTime: Int
  fromTime: Int
  toTime: Int
  minTemp: Int
  maxTemp: Int
  maintRemindFromTimestamp: Int
  maintAtDistance: Int
  maintAtHour: Int
  maintRemindAtTimestamp: Int
  recurring: Boolean
  runningHrs: Float
  noOfDays: Int
  isAlertEnable: Boolean!
  parametersData: [ParameterData]
  noResponseParameterData: [noResponseParameterData]
  value: Int
}

type TimeFenceResponseObject {
  status: Int
  statusMessage: String
  time_fence_details: TimeFenceResponse
}

type KidsTimeFenceResponseObject {
  status: Int
  statusMessage: String
  time_fence_details: KidsTimeFenceResponse
}

type KidsTimeFenceResponse {
  timeFenceName: String
  fromTime: String
  toTime: String
  osLimit: Int
  weekDays: [String]
  fromDate: String
  toDate: String
  push_notifications_enabled: Boolean
  whatsapp_enabled: Boolean
  sms_enabled: Boolean
  email_enabled: Boolean
}

type TimeFenceResponse {
  id: Int
  vin: String
  app_user_id: String
  timeFenceName: String
  fromTime: String
  toTime: String
  osLimit: Int
  weekDays: [String]
  fromDate: String
  toDate: String
  push_notifications_enabled: Boolean
  whatsapp_enabled: Boolean
  sms_enabled: Boolean
  email_enabled: Boolean
  createdAt: String
  updatedAt: String
  status: Int
}

type updateTimeFenceResponse {
  status: Int
  statusMessage: String
  time_fence_details: updateTimeFenceObject
}

type updateTimeFenceObject {
  id: Int
  vin: String
  app_user_id: String
  alert_enabled: Boolean
  timeFenceName: String
  fromTime: String
  toTime: String
  weekDays: [String]
  fromDate: String
  toDate: String
  push_notifications_enabled: Boolean
  whatsapp_enabled: Boolean
  sms_enabled: Boolean
  email_enabled: Boolean
  osLimit: Int
  createdAt: String
  updatedAt: String
  status: Int
}

type deleteTimeFenceRes {
  status: Int
  statusMessage: String
}

type allTimeFenceConfigResponse {
  status: Int
  statusMessage: String
  allTimeFenceConfig: [allTimeFenceConfigObjects]
}

type allTimeFenceConfigObjects {
  id: Int
  vin: String
  app_user_id: String
  alert_enabled: Boolean
  timeFenceName: String
  fromTime: String
  toTime: String
  weekDays: [String]
  fromDate: String
  toDate: String
  push_notifications_enabled: Boolean
  whatsapp_enabled: Boolean
  sms_enabled: Boolean
  email_enabled: Boolean
  osLimit: Int
  createdAt: String
  updatedAt: String
  status: Int
}

type alertParametersResponse {
  status: Int!
  statusMessage: String!
  alertParameters: [alertParameters]
}

type alertParameters {
  id: Int
  alert_parameter: String
  payload_alert_parameter: String
  description: String
  model: String
  critical_high_sms_template: String
  critical_high_sms_template_id: String
  critical_low_sms_tempate: String
  critical_low_sms_template_id: String
  low_sms_template: String
  low_sms_template_id: String
  high_sms_template: String
  high_sms_template_id: String
  critical_high_email_template: String
  critical_low_email_template: String
  low_email_template: String
  high_email_template: String
  critical_high_whatsapp_template: String
  critical_low_whatsapp_template: String
  low_whatsapp_template: String
  high_whatsapp_template: String
  critical_high_whatsapp_placeholders: String
  critical_low_whatsapp_placeholders: String
  low_whatsapp_placeholders: String
  high_whatsapp_placeholders: String
  created_at: Int
  updated_at: Int
  status: Boolean
}

type setConditionalAlertConfigResponse {
  status: Int
  statusMessage: String
  alertParameters: [AlertParameters]
}

type getConditionalAlertConfigData {
  status: Int
  statusMessage: String
  alertParameters: [AlertParameters]
}

type AlertParameters {
  alert_id: Int
  vin: String
  app_user_id: String
  alert_parameter: String
  description: String
  alert_threshold_critical_high: Float
  alert_threshold_high: Float
  alert_threshold_low: Float
  alert_threshold_critical_low: Float
  created_at: String
  updated_at: String
  is_enabled: Boolean
}

type overSpeedRes {
  osLimit: Int
  status: Int!
  statusMessage: String!
}

type overSpeedResponse {
  status: Int!
  statusMessage: String!
}

type OverSpeedAlertConfig {
  id: Int!
  osLimit: Int!
  clientLoginId: Int!
  uniqueDeviceId: String!
  fromTimestamp: String!
  toTimestamp: String!
  email: String
  sms: String
  isEmailEnable: Boolean!
  isSMSEnable: Boolean!
}

type GeofenceAlertConfig {
  id: Int!
  areaId: Int!
  clientLoginId: Int!
  uniqueDeviceId: String!
  fromTimestamp: String!
  toTimestamp: String!
  email: String
  sms: String
  isEmailEnable: Boolean!
  isSMSEnable: Boolean!
}

type Roles {
  id: Int!
  client: ClientDetail!
  roleName: String!
  createdAt: String!
  updatedAt: String!
  status: Int!
  assignedFeatures: [FeatureRoleAssign!]!
}

input FeatureRoleAssigns {
  featureId: Int!
  permission: String!
}

type Response {
  code: String
  message: String
}

input VehicleNumList {
  vehicleNum: String!
}

type assignDetails {
  groupId: Int!
  vehicleList: [VehicleNumLists!]!
}

type VehicleNumLists {
  vehicleNum: String!
}

type deletedGroup {
  groupId: Int!
}

type GroupDetail {
  id: Int!
  groupName: String!
  assignedVehicles: [vehicleDatas!]
}

type vehicleDatas {
  vehicleNumber: String!
}

type groupDetails {
  groupId: Int!
  groupName: String!
}

type updatedGroupDet {
  groupId: Int!
  groupName: String!
}

type Groups {
  id: Int!
  client: ClientDetail!
  groupName: String!
  createdAt: String!
  updatedAt: String!
  status: Int!
  assignedVehicles: [AssignedVehicleToGroup!]!
}

type AssignedVehicleToGroup {
  entityId: Int!
  vehicleNumber: String!
  uniqueDeviceId: String!
}

type SubloginData {
  subLoginId: Int!
  subLoginName: String!
  email: String
  contactNumber: String!
  login: Login!
  role: Roles!
  group: Groups!
  client: ClientDetail!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type UserDetail {
  id: Int!
  userName: String!
  email: String
  contactNumber: String!
  countryCode: String
  login: Login!
  role: Roles!
  group: Groups!
  client: ClientDetail!
  createdAt: String!
  updatedAt: String!
  address: String
  status: Int!
}

type UserIdNew {
  app_user_id: String
  username: String
  email: String
}

type Driver {
  id: Int!
  driverName: String!
  license: String!
  countryCode: String!
  contactNumber: String!
  userLoginId: Int
  clientLoginId: Int
  vehicleNumber: String
  vehicleId: Int
  uniqueDeviceId: String
  driverImage: String
  otherDocument: String
  score: Float
  vehicleAssignedAt: String
  createdAt: String!
  updatedAt: String!
  status: Int!
  firstName: String!
  lastName: String!
  email: String
  rfid: String!
  vehicleType: String!
  driverType: String!
  licenseExpiry: String!
  driverImageURL: String
}

type DriverDetails {
  id: Int
  driverName: String
  license: String
  contactNumber: String
  vehicleNumber: String
  driverImageURL: String
  driverImage: String
  otherDocument: String
  score: Float
  vehicleAssignedAt: String
  status: Int
}

type DriverDetail {
  id: Int
  driverName: String
  license: String
  contactNumber: String
  vehicleNumber: String
  driverImageURL: [String]
  driverImage: String
  otherDocument: String
  score: Float
  vehicleAssignedAt: String
  status: Int
  loginTime: String
  logOutTime: String
  date: String
}

type OnDutyDriver {
  driverId: Int
  driverName: String
  totalTime: String
}

type FileDetails {
  url: String
}

type VehicleGroupAssign {
  id: Int!
  group: Groups!
  vehicle: VehicleDetail!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

input VehicleListInput {
  vehicleId: Int!
}

type Features {
  id: Int!
  featureKey: String!
  featureName: String!
  costPerAssetPerMonth: Int!
  featureDescription: String!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type FeatureRoleAssign {
  id: Int!
  feature: Features!
  permission: String!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

input FeatureRoleAssignInput {
  featureId: Int!
  permission: String!
}

type Plans {
  id: Int!
  planName: String!
  description: String!
  featureList: [Features!]
  costPerAsset: Int!
  partnerLoginId: Int
  createdAt: String!
  updatedAt: String!
  numberOfAssociatedClient: Int!
  status: Int!
}

enum PLANS {
  Enterprise
}

type BillingMode {
  id: Int!
  billingMode: String!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type BillingFrequency {
  id: Int!
  frequency: String!
  billingModeId: Int!
  numberOfMonths: Int!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type BillingLogic {
  id: Int
  billingLogic: String
  billingModeId: Int
  createdAt: String
  updatedAt: String
  status: Int
}

type AccessoryType {
  id: Int!
  accessoryName: String!
  version: Float!
  description: String
  manufacturer: Manufacturer!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type Accessory {
  serialNumber: Int!
  uniqueAccessoryId: String!
  ownerLoginId: Int!
  createdAt: String!
  updatedAt: String!
  status: Int!
  accessoryType: AccessoryType!
  manufacturer: Manufacturer!
}

enum paymentMode {
  NONE
  ONLINE
  CASH
  DD
  CHEQUE
}

enum approveOrReject {
  APPROVED
  REJECTED
}

type billingDetails {
  paymentId: Int
  subscriptionBillId: Int
  totalAmount: Int
  totalAmountWithGST: Int
  totalAmountPaidGST: Int
  simBill: billAmount
  hardwareBill: billAmount
  softwareBill: billAmount
  accessoryBill: billAmount
}

input inputBillingDetails {
  simBill: inputBillAmount
  hardwareBill: inputBillAmount
  softwareBill: inputBillAmount
  accessoryBill: inputBillAmount
}

input inputBillAmount {
  amountWithGST: Int!
  expectedDateTime: String
  accountsRemrks: String
}

enum paymentType {
  FULLPAYMENT
  CREDITNOTE
}

type billAmount {
  rate: Int
  quantity: Int
  amount: Int!
  amountWithGST: Int!
  amountToBePaid: Int!
  amountPaidGST: Int!
}

type AreaType {
  id: Int!
  areaTypeName: String!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

input CircularGeofences {
  circularPosition: circle_lat_Long
  radius: Int
}

input CircularGeofencesforEdit {
  """
  circle_lat_Long must be provided
  """
  circularPosition: circle_lat_Long

  """
  radius must be <=50 and >= 10000
  """
  radius: Int
}

input circle_lat_Long {
  lat: String!
  long: String!
}

input PolygonGeofences {
  coordinates: [lat_Long!]
  polygonPosition: polygon_lat_Long
}

input PolygonGeofencesforEdit {
  """
  Valid lat_Long must be provide
  """
  coordinates: [lat_Long!]

  """
  Valid lat-long must provided
  """
  polygonPosition: polygon_lat_Long
}

input polygon_lat_Long {
  lat: String!
  long: String!
}

type RemoveVehicleFromGeofenceResponse {
  status: Int!
  statusMessage: String!
  response: [RemarkRespnse]
}

type AddVehicleToGeofenceResponse {
  status: Int!
  statusMessage: String!
  response: [RemarkRespnse]
}

type RemarkRespnse {
  vin: String
  remarks: String!
}

type RemoveGeofenceResponse {
  geofenceid: Int!
  status: Int!
  statusMessage: String!
}

type getGeofenceListResponseOld {
  geofences: [geofenceList!]
  status: Int!
  statusMessage: String
}

type getGeofenceListResponse {
  geofences: [newGeofenceList]
  status: Int!
  statusMessage: String!
}

type newGeofenceList {
  geofenceName: String
  geofenceId: Int
  geofenceType: String
  address: String
  circularGeofence: newCircularGeofence
  polygonGeofence: newPolygonGeofence
  createdUserDetails: createdUserDetailsNew
  lastModifiedDetails: lastModifiedDetailsNew
  recipients: [recepientsNew]
  created_timestamp: String
  alertStatus: String
  is_deleted: Int
  isKidsGeofence: Boolean
  notification_enabled: Boolean
  entry_notification_enabled: Boolean
  exit_notification_enabled: Boolean
}

type lastModifiedDetailsNew {
  userId: String
  userName: String
  userType: String
  updated_timestamp: String
}

type createdUserDetailsNew {
  userId: String
  userName: String
  userType: String
}

type recepientsNew {
  userId: String
  userName: String
  userType: String
}

type newCircularGeofence {
  circularPosition: lat_LongCircular
  radius: Int
}

type lat_LongCircular {
  lat: String
  long: String
}

type newPolygonGeofence {
  coordinates: [lat_LongPolygon]
  polygonPosition: polygon_lat_long_New
}

type lat_LongPolygon {
  lat: String
  long: String
}

type polygon_lat_long_New {
  lat: String
  long: String
}

type geofenceList {
  location: String!
  geofenceid: Int!
  areaType: String
  polygonGeoJson: [latLong]
  polygonGeoPosition: [centroidLatLong]
  circleGeoJson: [circleGeoJson1]
  assignedVin: [String]
}

type circleGeoJson1 {
  radius: Int
  centerLat: Float
  centerLong: Float
}

type centroidLatLong {
  centroidLat: Float
  centroidLong: Float
}

type latLong {
  lat: String
  long: String
}

type geofenceResponse {
  geofenceid: Int
  status: Int!
  statusMessage: String
}

type geofenceResponses {
  geofenceid: Int
  status: Int!
  statusMessage: String
}

type kidsGeofenceResponses {
  geojson: String
  geofenceid: Int
  status: Int!
  statusMessage: String
}

type editGeofenceOldResponse {
  geofenceid: Int
  status: Int!
  statusMessage: String
}

type editGeofenceResponse {
  geofenceid: Int
  status: Int!
  statusMessage: String
  created_timestamp: String
  updated_timestamp: String
}

enum geofenceType {
  circular
  polygon
}

enum editType {
  circular
  polygon
}

input AreaEdit {
  areaName: String!
  areaTypeId: Int!
  geoJson: String!
  geoPosition: String!
}

enum areaType {
  Circle
  Polygon
}

type DeletedAreaGeoFence {
  areaId: Int!
  areaName: String!
}

type AOI_Status {
  areaId: Int!
  vehicleList: [vehicleNumber]
}

type deAssign_STATUS {
  AreaId: Int!
  vehicleLists: [vehicleNumber]
}

type AreaGeoFenceResponse {
  areaId: Int!
  areaName: String!
  areaType: String!
  radius: Int
  coordinates: [res_lat_Long!]!
  geoPosition: res_lat_Long
}

type vehicleNumber {
  vehicleNumber: String
}

input lat_Long {
  lat: String!
  long: String!
}

input vehicleNum {
  vehicleNumber: String!
}

input vehicles {
  VehicleNumbers: String!
}

type res_lat_Long {
  lat: String!
  long: String!
}

type editedAreaResponse {
  areaId: Int!
  areaName: String!
  geoJson: String!
}

type AreaVehicleAssociation {
  uniqueId: String!
  areas: [Area]!
}

type areaResult {
  id: Int!
  areaName: String!
  clientLoginId: Int!
}

type addAreaResponse {
  areaId: Int!
  areaName: String!
  geoJson: String!
}

type AreaResponse {
  areaId: Int!
  areaName: String!
  areaType: String!
  geoJson: String
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type Area {
  id: Int!
  areaName: String!
  areaType: AreaType!
  clientLoginId: Int!
  geoJson: String
  geoPosition: String
  createdAt: String!
  updatedAt: String!
  status: Int!
  pluscode: String
}

type DetetedGeoFenceResponse {
  status: Int!
  statusMessage: String!
}

type getVinUserIdDetailsResponse {
  status: Int
  statusMessage: String
  role_id: String
  token: String
  type: String
}

type getVinBasedTokensResponse {
  status: Int
  statusMessage: String
  token: [tokenResponse]
  is_the_user_default: Boolean
}

type tokenResponse {
  app_user_id: String
  token: String
  type: String
}

type redisResponse {
  status: Int
  statusMessage: String
}

type vinDetailsResponse {
  details: detailsObj
  status: Int!
  statusMessage: String!
}

type detailsObj {
  vin_details: vinDetails
  users: [vinUsersResponse]
}

type vinDetails {
  vin: String!
  initial_imei: String
  serial_number: String
  sale_date_timestamp: String
  description: String
  vehicle_colour: String
  vehicle_type_id: Int
  theme: Int
  vehicle_registration_number: String
  vehicle_nick_name: String
  vehicle_model: String
  variant: String
  sim_provider: String
  phone_number: String
  sim_number: String
  model_name: String
  pcc_imei: String
  hc_imei: String
  primary_bat_a_uid: String
  primary_bat_b_uid: String
  secondary_batteries_uid: [BatteryDetails]
  onboarded_by: String
  HCC_nick_name: String
  PCC_nick_name: String
}

type vinUsersResponse {
  app_user_id: String!
  user_name: String!
  email: String
  iso_code: String
  blood_group: String
  mobile_number: String!
  country_code: Int
  user_type: String!
  isFCM: Boolean!
  profile_image_name: String
  profile_image_url: String
  emergency_contacts_details: [emergencyContacts_detailsResponse]
  wallpapers: [wallpapersDetails]
  documents: [documentDetails]
  accessoryData: [accessoryDetails]
  fleet_owner_email: String
}

type BatteryDetails {
  bat_uids: String
}

type usersResponse {
  app_user_id: String!
  user_name: String!
  email: String!
  country_code: Int!
  iso_code: String!
  mobile_number: String!
  user_type: String!
}

type accessoryDetails {
  accessory_name: String
  device_id: String
  device_type: String
}

input secondary_batteries_uid {
  bat_uids: String
}

enum userType {
  PRIMARY
  SECONDARY
}

type updateVinDetailsResponce {
  status: Int
  statusMessage: String
  updatedDetails: updatedDetailsResponse
}

type updatedDetailsResponse {
  vin: String!
  vehicle_nick_name: String
  sale_date: String
  vehicle_registration_number: String
  description: String
  vehicle_colour: String
  imei_number: String
  phone_number: String
  sim_number: String
  hc_imei: String
  pcc_imei: String
  primary_bat_a_uid: String
  primary_bat_b_uid: String
  secondary_batteries_uid: [secondary_batteries_uids]
  HCC_nick_name: String
  PCC_nick_name: String
}

type secondary_batteries_uids {
  bat_uids: String
}

type updateUserDetailsResponse {
  status: Int
  statusMessage: String
  user_details: updateUserDetails
}

type secondaryUserResponse {
  status: Int!
  statusMessage: String!
  user_details: userDetailsResponse
}

type userDetailsResponse {
  vin: String!
  secondary_app_user_id: String!
  user_name: String!
  email: String
  mobile_number: String!
  blood_group: String
  iso_code: String!
  country_code: Int
  token: String
  expiry_time: String
}

type UserResponse {
  user_details: addUserResponse
  status: Int!
  statusMessage: String!
}

type addUserResponse {
  app_user_id: String
  user_name: String
  email: String
  iso_code: ISO_CODES
  mobile_number: String
  blood_group: BGList
}

type removeSecondaryUsersResponse {
  status: Int
  statusMessage: String
}

type updatePrimaryUserResponse {
  status: Int
  statusMessage: String
  user_details: userDetails
}

type updateUserDetails {
  app_user_id: String
  user_name: String
  email: String
  iso_code: String
  country_code: Int
  mobile_number: String!
  blood_group: String
  fleet_owner_email: String
}

type userDetails {
  app_user_id: String
  user_name: String
  email: String
  iso_code: String
  blood_group: String
  country_code: Int
  mobile_number: String!
  token: String
  expiry_time: String
  fleet_owner_email: String
}

type getUserDetailsResponse {
  details: userDetailsObj
  status: Int!
  statusMessage: String!
}

type getUserDetailsByMobileNumberResponse {
  details: userDetailsObject
  status: Int!
  statusMessage: String!
}

type userDetailsObject {
  user_details: [detailsOfUser]
}

type userDetailsObj {
  user_details: detailsOfUser
  associated_vins: [associatedVinsArray]
}

type detailsOfUser {
  app_user_id: String
  user_name: String
  email: String
  iso_code: String
  country_code: Int
  mobile_number: String!
  blood_group: String
  associated_vins: [associatedVinsArray]
  isFCM: Boolean
  emergency_contacts_details: [emergencyContacts_detailsResponse]
  profile_image_name: String
  profile_image_url: String
  wallpapers: [wallpapersDetails]
  documents: [documentDetails]
  accessoryData: [accessoryDetails]
  fleet_owner_email: String
}

type associatedVinsArray {
  vin: String
  type: String
  approved_status: String
}

type CommandStatusResponse {
  status: Int
  statusMessage: String
}

type emergencyContacts_detailsResponse {
  emergency_contact_id: Int!
  emergency_contact_name: String!
  iso_code: String!
  country_code: Int
  emergency_mobile_number: String!
  email_id: String
  created_timestamp: String
  updated_timestamp: String
  status: Int
}

type offBoardUserResponse {
  status: Int!
  statusMessage: String!
  associated_vins: [String]
}

type SubscriptionInventoryAssign {
  id: Int!
  subscriptionId: Int!
  assignedDeviceList: String!
  assignedDeviceDetails: [SubDeviceDetail!]!
  assignedAccessoryList: String!
  assignedSimList: String!
  createdAt: String!
  updatedAt: String!
  asignedSimDetails: [SubSimDetail!]!
  status: Int!
}

input uniqueDeviceIdListInput {
  uniqueDeviceId: String!
}

type SubDeviceDetail {
  serial_num: String!
  imei_num: String!
  uniqueDeviceId: String!
  vehicleDetails: SubVehicleDetails
  status: Int!
}

type SubSimDetail {
  id: Int!
  phoneNumber: String!
  simNumber: String!
  vehicleDetails: SubVehicleDetails
  status: Int!
}

type SubVehicleDetails {
  vehiclenumber: String!
}

input uniqueAccessoryIdListInput {
  uniqueAccessoryId: String!
}

input simListInput {
  simNumber: String!
}

type ASSIGNEDVEHICLES {
  vehicleNumber: String!
  speedSensorType: String
  speedLimit: Int
  vehicleModel: String
  vehicleType: String
  deviceUniqueId_fk: String
}

type LicenseType {
  id: Int!
  licenseType: String!
  description: String!
  featureList: [Features!]
  maxPrice: Int!
  createdAt: String!
  updatedAt: String!
  numberOfAssociatedClient: Int
  status: Int!
}

type ResellerDetails {
  id: Int!
  resellerName: String!
  email: String!
  contactPerson: String!
  contactNumber: String!
  login: Login!
  address: String!
  city: String!
  state: StateModel!
  country: CountryModel!
  pincode: Int!
  panNumber: String!
  gst: String
  freePeriod: Int
  bufferPeriod: Int
  discountPercentage: Int
  defaultBillingFrequency: BillingFrequency
  licenseExpiryPeriod: Int!
  assignedDeviceModels: [DeviceModel!]!
  assignedLicenseType: [LicenseType!]!
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type data {
  id: Int
}

"""
Device tracking details
"""
type DeviceTrackingDataNew {
  """
  Vehicle's number
  """
  vehicleNumber: String!

  """
  Vehicle's type
  """
  vehicleType: String!

  """
  Vehicle's model
  """
  vehicleModel: String!

  """
  Vehicle's unique identifier
  """
  uniqueId: String!

  """
  Vehicle's groups
  """
  vehicleGroups: [String!]

  """
  """
  timestamp: String

  """
  """
  latitude: Float

  """
  """
  longitude: Float

  """
  Vehicle's GPS status
  """
  gpsStatus: String

  """
  """
  satellites: Int

  """
  Vehicle's idling status
  """
  idlingStatus: Boolean

  """
  Vehicle's halt status
  """
  haltStatus: Boolean

  """
  Is vehicle in overspeed status
  """
  isOverspeed: Boolean

  """
  """
  isHA: Boolean

  """
  """
  isHB: Boolean

  """
  """
  isPrimaryBattery: Boolean

  """
  """
  isNoGps: Boolean

  """
  Is vehicle offline
  """
  isOffline: Boolean

  """
  """
  isNoData: Boolean

  """
  Vehicle's speed
  """
  speed: Float

  """
  """
  extBatVol: Float

  """
  """
  plusCode: String

  """
  Vehicle's address
  """
  address: String
}

type ClientEmailDetail {
  limit: Int!
  count: Int!
  login: Login!
  date: String!
  createdAt: String
  updatedAt: String
  status: Int
}

type SalesPerson {
  id: Int!
  name: String!
  contactNumber: String!
  email: String!
  address: String
  partnerLoginId: Int!
  clientLoginId: Int!
  createdAt: String!
  updatedAt: String!
  status: Int
}

type SyncDataResponse {
  """
  Success/Failure message
  """
  message: String
}

"""
Type of script to run
"""
enum ScriptType {
  """
  Sync route data
  """
  SYNC_ROUTE

  """
  Sync AOI data
  """
  SYNC_AOI
}

type deviceSimMapped {
  id: Int!
  deviceId: String
  deviceSerialNo: String!
  deviceImeiNo: String!
  deviceModel: DeviceModel
  phoneNumber: String
  simNumber: String
  serviceProvider: ServiceProvider
  vehicleIdentificationNumber: String
  clientLoginId: Int
  createdAt: String
  updatedAt: String
  status: Int
}

type Pid {
  id: Int!
  clientLoginId: Int!
  pid: String!
  parameter: String!
}

input pidConfig {
  clientLoginId: Int!
  pid: String!
  parameter: String!
}

type EmailTemplate {
  clientLoginId: Int
  template: String
  emailSub: String
  sms: String
  alertName: String
}

input EmailTemplateConfig {
  toBeDeleted: Boolean!
  template: String
  emailSub: String
  sms: String
  alertName: String
}

input EmailConfig {
  toBeDeleted: Boolean!
  user: String!
  pass: String!
  host: String!
  clientLoginId: Int!
}

input Upload {
  file: String
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

input AxisData {
  X: X_Axis_Data
  Y: Y_Axis_Data
}

input X_Axis_Data {
  axis: String!
  values: FieldInput!
}

input Y_Axis_Data {
  axis: String!
  values: [FieldInput!]
}

input FieldInput {
  fieldId: String!
  fieldName: String!
  unit: String!
}

type GraphData {
  id: Int!
  graphName: String!
  graphMinThreshold: Int
  graphMaxThreshold: Int
  graphAxisData: JSON
  createdAt: String!
  updatedAt: String!
  status: Int!
}

type TempAlertConfig {
  id: Int!
  minTemp: Int!
  maxTemp: Int!
  clientLoginId: Int!
  userLoginId: Int
  uniqueDeviceId: String!
  fromTimestamp: String!
  toTimestamp: String!
  email: String
  sms: String
  isEmailEnable: Boolean!
  isSMSEnable: Boolean!
}

enum simFilterType {
  """
  Mobile number
  """
  MSISDN

  """
  Sim number
  """
  SIM_NO
}

enum simStatus {
  INITIAL
  ACTIVE
  SAFE_CUSTODY
  ACTIVATED_ON_TEST_MODE
  IN_PROGRESS
  SUSPENDED
  TEMP_DISCONNECT
  ACTIVE_AND_SAFE_CUSTODY
  ACTIVE_AND_TEMP_DISCONNECT
  ACTIVE_AND_INITIAL
}

input simDOList {
  mobileNO: String!
  planDO: planCode!
}

input planCode {
  planCode: PLANCODE!
}

enum PLANCODE {
  PKG_28796
}

type AirtelPlans {
  planCode: String!
  planName: String!
  planDescription: String!
  billFrequency: String!
  brandName: String!
  price: String!
  testPlan: String!
}

type ActivateSimResponse {
  orderCount: Int
  successCount: Int
  failureCount: Int
  inProgressCount: Int
  rejectedCount: Int
  orderInitiateDate: String
  statusMessage: String
  errorItemsCount: Int
  orderCompletionTime: String
  requestedOrderItems: Int
  statusCode: String
}

type AirtelSimDetails {
  mobileNo: String!
  simNo: String!
  imsi: String!
  status: String!
  circleName: String!
  planCode: String!
  planName: String!
  description: String!
  dataType: String!
  onboardingDate: String!
  activationDate: String!
  operatorName: String!
}

type getAllSharedLiveLocationResponse {
  status: Int
  statusMessage: String
  shared_live_locations: [shared_live_locations_details]
}

type shared_live_locations_details {
  request_id: Int
  vin: String
  shared_by_app_user_id: String
  map_provider: String
  share_name: String
  shared_to_emails: [String]
  shared_to_sms: [country_code]
  shared_to_app_users_ids: [String]
  app_user_id_ended_by: String
  time_to_share_till: String
  destination: [lat_long]
  created_at: String
  updated_at: String
  expired_time: String
  token: String
  shared_link: String
  status: Int
  is_sos_raised: Boolean
  is_crash_raised: Boolean
  is_theft_raised: Boolean
}

type sharedLiveShortLinkDetails {
  id: Int
  token: String!
  expired_time: String
  shared_link: String!
  shorten_token: String!
}

type lat_long {
  lat: String!
  long: String!
}

type country_code {
  country_code: Int
  iso_code: String
  mobile_number: String
}

input countryCode_phoneNumber {
  iso_code: ISO_CODES!
  mobile_number: String!
}

input lat_long_destination {
  lat: String!
  long: String!
}

enum Maps {
  HERE
  GOOGLE
  OSM
}

type ShareLiveLocationResponse {
  shared_details: ShareLiveLocationData
  status: Int
  statusMessage: String
}

type ShareLiveLocationData {
  request_Id: Int!
  shared_link: String!
  created_timestamp: String!
  expiry_timestamp: String!
  share_name: String
  shared_to_emails: [String]
  shared_to_sms: [isoCode_phoneNumber_resp]
  shared_to_app_users_ids: [String]
  time_to_share_till_timestamp: String!
  destination: [lat_long_resp]
}

type isoCode_phoneNumber_resp {
  iso_code: String!
  country_code: Int
  mobile_number: String!
}

type lat_long_resp {
  lat: String!
  long: String!
}

type stopLiveLocationResponse {
  status: Int
  statusMessage: String
}

enum ISO_CODES {
  AFG
  ALB
  DZA
  ASM
  AND
  AGO
  AIA
  ATA
  ATG
  ARG
  ARM
  ABW
  AUS
  AUT
  AZE
  BHS
  BHR
  BGD
  BRB
  BLR
  BEL
  BLZ
  BEN
  BMU
  BTN
  BOL
  BIH
  BWA
  BVT
  BRA
  IOT
  BRN
  BGR
  BFA
  BDI
  KHM
  CMR
  CAN
  CPV
  CYM
  CAF
  TCD
  CHL
  CHN
  CXR
  CCK
  COL
  COM
  COG
  COK
  CRI
  CIV
  HRV
  CUB
  CYP
  CZE
  DNK
  DJI
  DMA
  DOM
  TMP
  ECU
  EGY
  SLV
  GNQ
  ERI
  EST
  ETH
  FLK
  FRO
  FJI
  FIN
  FRA
  FXX
  GUF
  PYF
  ATF
  GAB
  GMB
  GEO
  DEU
  GHA
  GIB
  GRC
  GRL
  GRD
  GLP
  GUM
  GTM
  GIN
  GNB
  GUY
  HTI
  HMD
  HND
  HKG
  HUN
  ISL
  IND
  IDN
  IRN
  IRQ
  IRL
  ISR
  ITA
  JAM
  JPN
  JOR
  KAZ
  KEN
  KIR
  PRK
  KOR
  KWT
  KGZ
  LAO
  LVA
  LBN
  LSO
  LBR
  LBY
  LIE
  LTU
  LUX
  MAC
  MKD
  MDG
  MWI
  MYS
  MDV
  MLI
  MLT
  MHL
  MTQ
  MRT
  MUS
  MYT
  MEX
  FSM
  MDA
  MCO
  MNG
  MSR
  MAR
  MOZ
  MMR
  NAM
  NRU
  NPL
  NLD
  ANT
  NCL
  NZL
  NIC
  NER
  NGA
  NIU
  NFK
  MNP
  NOR
  OMN
  PAK
  PLW
  PAN
  PNG
  PRY
  PER
  PHL
  PCN
  POL
  PRT
  PRI
  QAT
  REU
  ROM
  RUS
  RWA
  KNA
  LCA
  VCT
  WSM
  SMR
  STP
  SAU
  SEN
  SYC
  SLE
  SGP
  SVK
  SVN
  SLB
  SOM
  ZAF
  SGS
  ESP
  LKA
  SHN
  SPM
  SDN
  SUR
  SJM
  SWZ
  SWE
  CHE
  SYR
  TWN
  TJK
  TZA
  THA
  TGO
  TKL
  TON
  TTO
  TUN
  TUR
  TKM
  TCA
  TUV
  UGA
  UKR
  ARE
  GBR
  USA
  UMI
  URY
  UZB
  VUT
  VAT
  VEN
  VNM
  VGB
  VIR
  WLF
  ESH
  YEM
  YUG
  COD
  ZMB
  ZWE
}

type deleteEmergencyContactsResponse {
  status: Int
  statusMessage: String
}

type fetchEmergencyContactsResponse {
  status: Int
  statusMessage: String
  contacts_details: [fetchcontacts_detailsResponse]
}

type fetchcontacts_detailsResponse {
  emergency_contact_id: Int!
  emergency_contact_name: String!
  iso_code: String!
  country_code: Int
  emergency_mobile_number: String!
  email_id: String
  created_timestamp: String
  updated_timestamp: String
  status: Int
}

input contacts_detailsRequest {
  emergency_contact_name: String!
  iso_code: ISO_CODES!
  emergency_mobile_number: String!
  email_id: String
}

input commandValueInputs {
  id1: Int
  id2: Int
  id3: Int
  type: Int!
}

type updateEmergencyContactsResponse {
  status: Int
  statusMessage: String
  contacts_details: updateContacts_detailsResponse
}

type updateContacts_detailsResponse {
  emergency_contact_id: Int!
  app_user_id: String!
  iso_code: String!
  country_code: Int
  emergency_contact_name: String
  emergency_mobile_number: String!
  email_id: String
}

type addEmergencyContactsResponse {
  status: Int
  statusMessage: String
  app_user_id: String
  contacts_details: [contacts_detailsResponse]
}

type contacts_detailsResponse {
  emergency_contact_id: Int!
  iso_code: String!
  country_code: Int
  emergency_contact_name: String!
  emergency_mobile_number: String!
  email_id: String
}

type updateStatusResponse {
  status: Int
  statusMessage: String
}

type offlineMapsResponse {
  response: [responeData]
  status: Int
  statusMessage: String
}

type responeData {
  id: Int
  vin: String
  map1: String
  size1: Float
  map2: String
  size2: Float
  created_at: String
  update_at: String
}

type ResultDetails {
  status: Int
  statusMessage: String
}

type HomeChargerDetailsResponse {
  details: HomeChargerDetails
  status: Int!
  statusMessage: String!
}

type HomeChargerDetails {
  hc_imei: String!
  associated_vin: String!
  primary_bat_a_uid: String
  primary_bat_b_uid: String
  HCC_nick_name: String
  secondary_batteries_uid: [SecondaryBatteries]
}

type SecondaryBatteries {
  bat_uids: String
}

type BatteryDetailsResponse {
  details: getBatteryDetails
  status: Int
  statusMessage: String!
}

type getBatteryDetails {
  vin_deatails: vin_deatails_response
  hc_imei: String
  associated_vin: String
  primary_bat_a_uid: String
  primary_bat_b_uid: String
  primary_bat_whitelisted: String
  secondary_batteries_uid: [SecondaryBatteries]
  secondary_bat_whitelisted: String
  created_date: String
  updated_date: String
  status: String
}

type vin_deatails_response {
  vin: String
  user_deails: user_details_response
}

type user_details_response {
  app_user_id: String
  user_name: String
  email: String
  mobile_number: String
  user_type: String
}

type HomechargerDetailsforhc_imeiResponse {
  homechargerDetails: getBatteryDetails
  associated_primary_user: String
  status: Int
  statusMessage: String!
}

type removeHomechargerResponce {
  status: Int
  statusMessage: String
}

type removePortableChargerResponce {
  status: Int
  statusMessage: String
}

type onboardHomechargerResponse {
  status: Int!
  statusMessage: String!
}

type getAccessoryDataResponse {
  status: Int!
  statusMessage: String!
  data: [Accessorydata]
}

type Accessorydata {
  device_id: String!
  vin: String!
  app_user_id: String!
  accessory_name: String!
  created_at: String!
}

type accessoryDataResponse {
  status: Int!
  statusMessage: String!
}

type addAccessoryDataResponse {
  status: Int!
  statusMessage: String!
  token: String
  expiry_time: String
}

type autoUpdateAPIResponse {
  status: Int
  statusMessage: String
}

type generateSATokenResponse {
  status: Int
  statusMessage: String
  token: String
}

type serviceAuthTokenResponse {
  status: Int
  statusMessage: String
  token: String
  expiryDateTime: String
}

type getAllRoleDetailsResponse {
  status: Int
  statusMessage: String
  response: [responseData]
}

type responseData {
  role_id: String
  api_id: Int
  role_name: String
  role_type: String
  api_type: String
  api_name: String
  createdAt: String
  updatedAt: String
}

type getAllAPIsResponse {
  status: Int
  statusMessage: String
  response: [roleApiListResponse]
}

type roleApiListResponse {
  api_id: Int
  api_name: String
  api_type: api_typeEnum
}

type getRoleNameDetailsResponse {
  status: Int
  statusMessage: String
  details: roleNameDetails
}

type roleNameDetails {
  rolename: String
  role_id: String
  createdAt: String
  updatedAt: String
  api_id: String
  api_name: String
}

enum RoleType {
  Primary
  Secondary
  Service
  Primary_accessory
  Secondary_accessory
}

enum Model {
  u388
  u546
  u546_hcc
  u546_pcc
  hlx
  ecycle
  u577
  ntorq
  apache
  u702
  u347_ug
  u467pp_17
  u467pp_12
}

type createRoleResponse {
  status: Int
  statusMessage: String
  response: createRoleDetails
}

type createRoleDetails {
  roleId: String
  roleName: String
  api_ids: [Int]
}

type addAPIResponse {
  status: Int
  statusMessage: String
  response: addAPIDetails
}

type addAPIDetails {
  api_id: Int
  api_name: String
}

type updateAPIResponse {
  status: Int
  statusMessage: String
}

type deleteAPIResponse {
  status: Int
  statusMessage: String
}

type deleteApiRoleResponse {
  status: Int
  statusMessage: String
}

enum api_typeEnum {
  Mutation
  Query
  Subscription
}

type deleteRoleResponse {
  status: Int
  statusMessage: String
}

type updateRoleResponse {
  status: Int
  statusMessage: String
}

type fetchwallpaperResponse {
  wallpapers: [wallpapersDetails]
  vin: String
  app_user_id: String
  status: Int!
  statusMessage: String!
}

type wallpapersDetails {
  wallpaper_id: Int
  wallpaper_name: String
  wallpaper_link: String
  set: Int
  approved_status: String
}

enum wallpaperType {
  USER
  TVS
}

enum StatusEnum {
  OK
  FAIL
}

type wallpaperResponse {
  wallpaper_id: Int
  status: Int!
  statusMessage: String!
}

type setWallpaperResponse {
  vin: String
  app_user_id: String
  wallpaper_id: Int
  status: Int!
  statusMessage: String!
}

type statusResponse {
  status: Int
  statusMessage: String
  location: locationResponse
}

type onBoardPortableChargerResponse {
  status: Int!
  statusMessage: String!
}

type deletePIResponse {
  status: Int!
  statusMessage: String!
}

enum documentCategory {
  VEHICLE
  USER
}

enum documentType {
  DrivingLicense
  RegistrationCertificate
  VehicleInsurance
  PollutionCertificate
}

type documentResponse {
  document_id: Int
  status: Int!
  statusMessage: String!
}

type fetchDocumentsResponse {
  documents: [documentDetails]
  vin: String
  app_user_id: String
  status: Int!
  statusMessage: String!
}

type documentDetails {
  document_id: Int!
  document_name: String!
  document_link_front: String
  document_link_back: String
  document_type: documentType!
  category: documentCategory!
  approved_status: String
}

type PortableChargerDetailsResponse {
  details: PortableChargerDetails
  status: Int!
  statusMessage: String!
}

type PortableChargerDetails {
  pcc_imei: String!
  associated_vin: String!
  primary_bat_a_uid: String
  primary_bat_b_uid: String
  secondary_batteries_uid: [SecondaryBatteries]
  PCC_nick_name: String
}

input CoordinateInput {
  lat: Float!
  lng: Float!
}

enum RouteCoordinateType {
  break
  through
}

input RouteCoordinateInput {
  lat: Float!
  lon: Float!
  type: RouteCoordinateType
}

type SnappedCoordinate {
  lat: Float!
  lng: Float!
  idx: Int
}

type RouteCoordinate {
  lat: Float!
  lon: Float!
}

type Summary {
  max_lon: Float!
  max_lat: Float!
  time: Float!
  length: Float!
  min_lat: Float!
  min_lon: Float!
}

type Leg {
  shape: [RouteCoordinate!]!
  summary: Summary!
}

type RouteTrip {
  legs: [Leg]
  summary: Summary
}

type RouteDetails {
  trip: RouteTrip
}

type PlusCodeAddress {
  plusCode: String!
  address: String!
  postal_code: String
  city: String
  country: String
  state: String
}

type CoordinateArray {
  """
  coordinates = [lng, lat]
  """
  coordinates: [Float!]!
}

type FeatureProperty {
  id: String!
  gid: String!

  """
  Address of the place pointed by coordinate
  """
  label: String!
}

"""
Has both latlng and label
"""
type PlaceFeature {
  geometry: CoordinateArray!
  properties: FeatureProperty!
}

enum mapType {
  GOOGLE
  HEREMAP
}

enum PLATFORM {
  ANDROID
  IOS
  WEB
}

input FcmTokenInput {
  fcmToken: String!
  platform: PLATFORM!

  """
  enabled is true by default. Setting this false will not send fcm notifications to this client
  """
  enabled: Boolean
}

type ClientFcmToken {
  clientLoginId: Int!
  fcmToken: String!
  platform: PLATFORM!
  enabled: Boolean!
}

type updateTheClientFcmSettingsResponse {
  status: Int!
  statusMessage: String!
}

type unregisterTheClientFcmTokenResponse {
  status: Int!
  statusMessage: String!
}

type sendFcmTokenResponse {
  status: Int!
  statusMessage: String!
}

input payload {
  body: String!
  title: String!
  alertType: String!
}

input notification {
  title: String!
  body: String!
}

type Alert {
  clientid: Int!
  uniqueid: String!
  alerttype: String!
  alertvalue: String
  from_ts: String!
  to_ts: String!
  server_ts: String!
  areaandroute: String
  lat: Float
  lng: Float
  to_lat: Float
  to_lng: Float
  alert_completed: Boolean!
  view_status: Boolean!
  pluscode: String
  address: String
  vehicleNumber: String
  type: String
}

type Message {
  message: String!
}

enum alerttype {
  aoi
  overspeed
  pullout
  tow
  sos
  panic
  noResponse
  scheduleMaintenance
  IntBatLow
  halt
  idle
  ExtBatLow
  route
  conditionalMaintenance
  crash
  fall
  low_fuel
  theft
  soc
  timeFence
  vehicle_charging
  vehicle_battery_fully_charged
  vehicle_battery_low
  vehicle_battery_critically_low
  vehicle_ignition
  homecharger_charging
  battery_fully_charged
  battery_taken_out
  both_batteries_taken_out
  both_non_owner_battery_fully_charged
  both_non_owner_homecharger_charging
  both_homecharger_charging
  both_battery_fully_charged
  non_owner_battery_fully_charged
  non_owner_homecharger_charging
  PCC_battery_charging
  PCC_battery_fully_charged
  PCC_battery_taken_out
  non_owner_PCC_battery_charging
  non_owner_PCC_battery_fully_charged
  front
  rear
  battery_incompitable
  home_charger_error
  upright
  incognito_mode
  chargeThreshold
  front_tyre_low_pressure
  front_tyre_high_pressure
  rear_tyre_low_pressure
  rear_tyre_high_pressure
  HCC_high_battery_temperature
  HCC_high_battery_voltage
  PCC_high_battery_voltage
  PCC_high_battery_temperature
  immobilisation_by_command
  immobilisation_by_geofence
  tamper
  geofence_exit
  geofence_entry
  polygon_exit
  mobilisation_by_command
  mobilisation_by_geofence
}

type allAlertResponse {
  status: Int!
  statusMessage: String!
  response: [alertResponse]
}

type alertResponse {
  alerttype: String!
  alertvalue: String!
  from_ts: String!
  to_ts: String
  server_ts: String!
  from_lat: Float!
  from_lng: Float!
  to_lat: Float!
  to_lng: Float!
  alert_completed: Boolean!
  address: String!
  to_address: String
  vin: String
  areaandroute: String!
  alert_generated_by_app_userid: String
  alert_ended_by_app_user_id: String
  from_timestamp: String
  to_timestamp: String
  request_id: String
  live_location_link: String
  to_be_expired_at: String
  event_id: String
  threshold_type: String
}

type TripAlert {
  type: String
  details: [BreachDetails]
}

type BreachDetails {
  areaName: String
  index: Int
  startLocation: TripAlertLocation
  startTimestamp: String
  endLocation: TripAlertLocation
  endTimestamp: String
}

type TripAlertLocation {
  lat: Float
  lng: Float
  address: String
}

type stopSOSAlertResponse {
  status: Int
  statusMessage: String
}

type RaiseSOSAlertRespone {
  sos_alert_details: sos_alert_Data
  status: Int!
  statusMessage: String!
}

type sos_alert_Data {
  vin: String
  app_user_id: String
  event_id: String
  start_timestamp: String
  expire_timestamp: String
  alert_completed: Boolean!
}

type Location {
  latitude: String
  longitude: String
  address: String
}

type MinMaxSpeed {
  min: Float
  max: Float
}

type fetchSmsDataReponse {
  response: [SmsData]
  status: Int!
  statusMessage: String!
}

type SmsData {
  vehicleNumber: String
  message_sent: String
  alert_type: String
  alert_time: String
  app_user_id: String
  sent_to: String
  category: String
  type: String
  notification_status: String
  response_data: String
  updatedAt: String
  status: String
}

type trackingData {
  timestamp: String
  latitude: Float
  longitude: Float
  gpsStatus: String
  isHA: Boolean
  isHB: Boolean
  isPrimaryBattery: Boolean
  isNoGps: Boolean
  speed: Float
  extBatVol: Float
  location: String
  eventFlag: String
  plusCode: String
  satellites: Int
  isOffline: Boolean
  isNoData: Boolean
  idlingStatus: Boolean
  haltStatus: Boolean
}

enum types {
  vehicle
  hc
  pcc
}

type rideAnalysisResponse {
  data: [DaywiseResponse]
  status: Int!
  statusMessage: String!
}

type DaywiseResponse {
  date: String
  details: [modewiseRide]
}

type modewiseRide {
  mode: String
  top_speed: Float
  average_speed: Float
  rpm: Int
}

type getChargeCumulativeSummaryResponse {
  status: Int
  statusMessage: String
  summary_details: summaryDetailResponse
}

type summaryDetailResponse {
  vin: String!
  total_charging_time: Int
  total_energy_consumed: Float
  total_charging_sessions: Int
}

type fetchDataReponse {
  response: [fetchDataRespData]
  status: Int!
  statusMessage: String!
}

type fetchDataRespData {
  vin: String
  user_id: String
  imei: String
  event_flag: Int
  seq_num: Int
  device_time: String
  kafka_enqueued_time: String
  local_device_time: String
  db_insert_time: String
  original_event_flag: Int
  packet_type: Int
  packet_event_code: String
  gps_fix: Int
  gps_validity: String
  latitude: Float
  longitude: Float
  altitude: Float
  direction: Float
  satellite_in_view: Int
  satellite_in_use: Int
  rssi: Int
  network_operator_name: String
  iccid: String
  area_zip_code: String
  tcu_bat_volt: Float
  timezone_name: String
  timezone_offset: String
  ignition_status: Int
  pluscode: String
  odometer: Float
  incognito_mode: String
  charging_status: String
  vehicle_mode: String
  vehicle_state: String
  speed: Float
  soc: Int
  regen_status: String
  dte_eco: Int
  dte_ride: Int
  dte_power: Int
  dte_city_mode: Int
  time_to_charge: Int
  co2_saved: Float
  sel_regen_selection: String
  sw_package_version: String
  bat_a_voltage: Float
  bat_a_soc: Float
  bat_a_warning_code: Int
  bat_a_current: Float
  bat_a_mode: Int
  bat_a_max_discharge_current: Float
  bat_a_i2t_limit: Float
  bat_a_soh: Int
  bat_a_soe: Float
  bat_a_max_temp: Float
  bat_a_min_temp: Float
  bat_a_max_charge_current: Float
  bat_a_cell1_volt: Float
  bat_a_cell2_volt: Float
  bat_a_cell3_volt: Float
  bat_a_cell4_volt: Float
  bat_a_cell5_volt: Float
  bat_a_cell6_volt: Float
  bat_a_cell7_volt: Float
  bat_a_cell8_volt: Float
  bat_a_cell9_volt: Float
  bat_a_cell10_volt: Float
  bat_a_cell11_volt: Float
  bat_a_cell12_volt: Float
  bat_a_cell13_volt: Float
  bat_a_cell14_volt: Float
  bat_a_fc_detect: Float
  bat_a_max_cell_voltage: Float
  bat_a_mosfet_temperature: Int
  bat_a_pcb_temperature: Int
  bat_a_pack_positive_term_temp: Int
  bat_a_pack_negative_term_temp: Int
  bat_a_load_positive_term_temp: Int
  bat_a_error_byte_num_in_rest: Int
  bat_a_corresponding_error_byte: Int
  bat_a_error_byte_0: Int
  bat_a_error_byte_1: Int
  bat_a_error_byte_2: Int
  bat_a_error_byte_3: Int
  bat_a_error_byte_4: Int
  bat_a_error_byte_5: Int
  bat_a_error_byte_6: Int
  bat_a_error_byte_7: Int
  bat_a_full_charge_flag: Int
  bat_b_voltage: Float
  bat_b_soc: Float
  bat_b_warning_code: Int
  bat_b_current: Float
  bat_b_mode: Int
  bat_b_max_discharge_current: Float
  bat_b_i2t_limit: Float
  bat_b_soh: Int
  bat_b_soe: Float
  bat_b_max_temp: Float
  bat_b_min_temp: Float
  bat_b_max_charge_current: Float
  bat_b_cell1_volt: Float
  bat_b_cell2_volt: Float
  bat_b_cell3_volt: Float
  bat_b_cell4_volt: Float
  bat_b_cell5_volt: Float
  bat_b_cell6_volt: Float
  bat_b_cell7_volt: Float
  bat_b_cell8_volt: Float
  bat_b_cell9_volt: Float
  bat_b_cell10_volt: Float
  bat_b_cell11_volt: Float
  bat_b_cell12_volt: Float
  bat_b_cell13_volt: Float
  bat_b_cell14_volt: Float
  bat_b_fc_detect: Float
  bat_b_max_cell_voltage: Float
  bat_b_mosfet_temperature: Int
  bat_b_pcb_temperature: Int
  bat_b_pack_positive_term_temp: Int
  bat_b_pack_negative_term_temp: Int
  bat_b_load_positive_term_temp: Int
  bat_b_error_byte_num_in_rest: Int
  bat_b_corresponding_error_byte: Int
  bat_b_error_byte_0: Int
  bat_b_error_byte_1: Int
  bat_b_error_byte_2: Int
  bat_b_error_byte_3: Int
  bat_b_error_byte_4: Int
  bat_b_error_byte_5: Int
  bat_b_error_byte_6: Int
  bat_b_error_byte_7: Int
  bat_b_full_charge_flag: Int
  payload_type: String
  can_modified: String
  change_version: Float
  acc_x: Int
  acc_y: Int
  acc_z: Int
  bms_maxchargecurrent: Float
  bms_maxchargevoltage: Float
  bms_cutoffchargecurrent: Float
  bms_prechargecurrent: Float
  bms_current: Int
  bms_voltage: Int
  bms_counter: Int
  bms_soc: Int
  bms_a_sw_version: String
  main_voltage: Float
  variant: String
  tps: Int
  accn_detect: Int
  actively_charging_batteries: Int
  actively_discharging_batteries: Int
  bms_b_sw_version: String
  bms_error_state: Int
  bms_temperature: Int
  can_distance: Float
  cep_value: Float
  charger_current: Float
  charger_error_status: Int
  charger_fan_status: Int
  charger_input_voltage: Int
  charger_output_status: Int
  charger_temperature: Int
  charger_terminal_voltage: Float
  charger_type: Int
  charging_mode: Int
  distance_eco_mode: Int
  distance_power_mode: Int
  distance_city_mode: Int
  dtc_cluster_not_responding: Int
  dtc_tcu_not_responding: Int
  dtc_vehicle_on_charge: Int
  ecu_temp: Int
  energy_consumed_by_powertrain: Float
  energy_consumption_eco_mode: Float
  energy_consumption_pow_mode: Float
  fix_type: String
  gprs_connection_status: Int
  gps_distance: Float
  gradient_detect: Int
  indicated_dte: Int
  input_dc_current: Float
  limphome_actively_discharging_batteries: Int
  low_tyre_pressure_status: Int
  mcu_dc_bus_discharge_maxlimit: Int
  mcu_dc_bus_regen_maxlimit: Int
  mcu_enable_t15_voltage: Float
  mcu_irms_maxlimit: Int
  mcudc_battery_voltage: Float
  mil: Int
  motor_temperature: Int
  motor_torque_output: Int
  network_band: String
  no_of_communicating_batteries: Int
  odometer_gps: Float
  output_phase_current: Float
  pitch_angle: Int
  precharge_fault: Int
  precharge_status_ack_fault: Int
  regeneration_status: Int
  roll_angle: Int
  service_reset: Int
  side_stand_status: Int
  speed_data: Float
  speed_gps: Float
  speed_mode_status: Int
  speed_rpm_data: Float
  subsystem_fault_bits: Int
  subsystem_protect_derating: Int
  subsystem_sensor_tps_bits: Int
  subsystem_status_bits: Int
  subsystem_switchstatus_bits: Int
  subsystem_protect_status_bits: Int
  supply_fault_5v: Int
  supply_voltage_5v: Int
  tcp_connection_status: Int
  tcu_avg_rssi: Int
  tcu_batt_per: Int
  tcu_fw_ver: String
  tcu_inst_rssi: Int
  tcu_no_of_can_packets_in_buffer: Int
  tcu_no_of_can_packets_lost: Int
  tcu_no_of_change_in_cell_id: Int
  tcu_no_of_loc_packets_in_buffer: Int
  tcu_no_of_loc_packets_lost: Int
  tcu_no_of_unsucess_attempts_gprs: Int
  tcu_no_of_unsucess_attempts_tcp: Int
  tcu_packet_buffer_fill_level: Int
  tft_cluster_sw_version: String
  throttle_percentage: Int
  torque_ref_from_throttledemand: Int
  total_remaining_charging_time_min: Int
  tps_voltage: Float
  vcu_sw_version: String
  bat_a_uid: String
  bat_b_uid: String
  charger_mode: Int
  slot1_charging_status: Int
  slot2_charging_status: Int
  home_charger_state: Int
  home_charger_dock_id: String
  charger_firmware_version: String
}

type allGeofenceAlertsResponse {
  GeofenceAlerts: [geofenceAlertsResp]
  status: Int!
  statusMessage: String!
}

type geofenceAlertsResp {
  alerttype: String
  from_ts: String
  to_ts: String
  from_lat: Float
  from_lng: Float
  to_lat: Float
  to_lng: Float
  breached_In_userId: String
  breached_out_userId: String
  alerted_to_in_userid: String
  alerted_to_out_userid: String
  vin: String
  geofenceId: Int
  from_address: String
  to_address: String
}

type ChargingStationsResponse {
  data: [ChargingStationsData]
  status: Int!
  statusMessage: String!
}

type ChargingStationsData {
  actionId: Int
  chargingStationId: Int
  chargingStationName: String
  stationTypeId: Int
  stationType: String
  chargingStationLatitude: Float
  chargingStationLongitude: Float
  chargingStationCountryId: Int
  chargingStationStateId: Int
  chargingStationCityId: Int
  chargingStationAddress: String
  chargingStationMobileNumber: String
  chargingStationEmailId: String
  chargingStationRegistrationNumber: String
  chargingStationOrganizationId: Int
  chargingStationCreatedBy: Int
  chargingStationCreatedOn: String
  chargingStationStatusID: Int
  chargingStationStatusDisplayName: String
  openAt: String
  closeAt: String
  comment: String
  availableChargingPointCount: Int
  distance: Float
  priceId: Int
  averagePrice: Float
  statusName: String
  reviewCount: Int
  parkingStationCounts: Int
  availabilityOrder: Int
  CPOIId: Int
  partyId: String
  locationId: String
  outputRating: String
  chargingStationPhotoUrl: String
  selected: Boolean
  chargingStationProtocolType: Float
  chargingStationDataCount: DataCountResponse
  favouriteData: FavouriteDataResponse
  connectorTypeData: [String]
  connectorData: [String]
}

type DataCountResponse {
  reviewsCount: Int
  reviewPoint: Float
  chargersCount: Int
  chargingPriceCount: Int
  usersCount: Int
  supportedModelCount: Int
  chargingStationId: Int
  categoryId: Int
  connectedToEVChargerCount: Int
  connectedToEVAndChargingCount: Int
  chargerPointAndPriceCount: Int
  chargingPointsCount: Int
  availableChargingPointCount: Int
  bookedChargingPointCount: Int
  liveChargingPointCount: Int
  availableChargersCount: Int
  unAvailableChargersCount: Int
  emergencyPressChargingPointCount: Int
  activeChargingPointCount: Int
  notWorkingChargingPointCount: Int
  inoperativeChargingPointCount: Int
  notInOperationChargingPointCount: Int
  notExistChargingPointCount: Int
  pendingChargingPointCount: Int
  totalChargingPointCount: Int
  parkingPricePointCount: Int
  chargerAvailableForBookingCount: Int
  captiveChargerCount: Int
  onlineChargerCount: Int
  dtMeterCount: Int
  stationCount: Int
  chargerTriggerId: Int
}

type FavouriteDataResponse {
  actionID: Int
  favouriteID: Int
  organizationID: Int
  referenceID: Int
  categoryID: Int
  starCount: Float
  nickName: String
  statudID: Int
  createdBy: Int
  createdOn: String
}

type ChargeHistoryResponse {
  charge_history: [ChargeResponse]
  vin: String!
  status: Int!
  statusMessage: String!
}

type ChargeHistoryResponseNewV1 {
  charge_history: [ChargeResponseNewV1]
  vin: String!
  status: Int!
  statusMessage: String!
}

type ChargeResponse {
  start_soc: Float!
  end_soc: Float!
  start_datetime: String!
  end_datetime: String!
  energy_consumed: Float
  vin: String!
}

type ChargeResponseNewV1 {
  start_soc: Float!
  end_soc: Float!
  start_timestamp: String!
  end_timestamp: String!
  duration: Int!
  total_energy_consumed: Float
  vin: String!
}

type HCChargingHistoryResponse {
  status: Int!
  statusMessage: String!
  charging_session_data: ChargingSessionData
}

type ChargingSessionData {
  no_of_charge_sessions: Int!
  total_charging_time: String!
  charge_sessions: [ChargingSession]
}

type ChargingSession {
  """
  Date Format is DD/MM/YYYY hh:mm:ss In UTC
  """
  start_date: String

  """
  Date Format is DD/MM/YYYY hh:mm:ss In UTC
  """
  end_date: String
  bat_a_uid: String
  bat_b_uid: String
  bat_a_start_soc: Float
  bat_a_end_soc: Float
  bat_b_start_soc: Float
  bat_b_end_soc: Float
  charging_time: String
  energyConsumedByBatA: Float
  energyConsumedByBatB: Float
}

type HCChargingHistoryResponseNew {
  status: Int!
  statusMessage: String!
  charging_session_data: ChargingSessionDataNew
}

type ChargingSessionDataNew {
  no_of_charge_sessions: Int!
  total_charging_time: Int!
  overallEnergyConsumed: Float
  charge_sessions: [ChargingSessionNew]
}

type ChargingSessionNew {
  """
  Date Format is DD/MM/YYYY hh:mm:ss In UTC
  """
  start_date: String

  """
  Date Format is DD/MM/YYYY hh:mm:ss In UTC
  """
  end_date: String
  bat_a_uid: String
  bat_b_uid: String
  bat_a_start_soc: Float
  bat_a_end_soc: Float
  bat_b_start_soc: Float
  bat_b_end_soc: Float
  charging_time: Int
  totalEnergyConsumed: Float
}

type HCCummulativeDataResponse {
  status: Int!
  statusMessage: String!
  cummulativeData: CummulativeDataObject
}

type PCCummulativeDataResponse {
  status: Int!
  statusMessage: String!
  cummulativeData: CummulativeDataObject
}

type CummulativeDataObject {
  numberOfSessions: Int
  chargingTime: Int
  energyConsumedInWh: Float
}

type PCCHResponse {
  status: Int!
  statusMessage: String!
  charging_session_data: PCCHChargingSessionsObject
}

type PCCHChargingSessionsObject {
  no_of_charge_sessions: Int!
  total_charging_time: Int!
  overallEnergyConsumed: Float!
  charge_sessions: [PCCHSessions]
}

type PCCHSessions {
  start_date: String
  end_date: String
  bat_uid: String
  bat_start_soc: Float
  bat_end_soc: Float
  charging_time: Int
  totalEnergyConsumed: Float
}

type tripHistory {
  trip: [historyResponse]
  vin: String
  status: Int
  statusMessage: String
}

type historyResponse {
  vIgnitionDisplay: [String!]
  vCreatedDisplay: [String!]
  vSpeed: [Float!]
  vLatitude: [Float!]
  vLongitude: [Float!]
  vOdometer: [Float!]
  vSoc: [Float!]
  isNoGps: [Boolean!]
  incognitoModes: [String!]
  vcuElevation: [String]
  vcuMotorPower: [String]
  vcuCadence: [String]
}

type chargingPointsHistory {
  vin: String
  trip: [chargingHistoryResponse]
  status: Int
  statusMessage: String
}

type TrackingPointsResponse {
  vin: String
  trip: [trackingPontHistory]
  status: Int
  statusMessage: String
}

type chargingHistoryResponse {
  latitude: [Float]
  longitude: [Float]
  bat_a_soc: [Float]
  bat_b_soc: [Float]
  bat_c_soc: [Float]
  soc: [Int]
  bat_a_uid: [String]
  bat_b_uid: [String]
  bat_c_uid: [String]
  date_time: [String]
}

type trackingPontHistory {
  latitude: [Float]
  longitude: [Float]
  bat_a_soc: [Float]
  bat_b_soc: [Float]
  bat_c_soc: [Float]
  soc: [Int]
  bat_a_uid: [String]
  bat_b_uid: [String]
  bat_c_uid: [String]
  ignition_status: [String]
  charging_status: [String]
  incognito_modes: [String]
  odometer: [Float]
  date_time: [String]
  speed: [Float]
  is_no_gps: [Boolean]
  vcuElevation: [String]
  vcuMotorPower: [String]
  vcuCadence: [String]
}

type chargeSummaryresponse {
  start_soc: Float
  end_soc: Float
  start_datetime: String
  end_datetime: String
  energy_consumed: Float
  vin: String
  status: Int
  statusMessage: String
}

type tripData {
  distance: Float
  start_datetime: String!
  end_datetime: String!
  end_longitude: Float
  start_soc: Float
  end_soc: Float
  end_latitude: Float
  incognito_mode: String
  start_pluscode: String
  start_address: String
  start_latitude: Float
  end_pluscode: String
  end_address: String
  avg_speed: Float
  end_odometer: Float
  ev_range: Float
  max_speed: Float
  time_taken: Float
  start_longitude: Float
  energy_consumption: Float
  regen_energy: Float
  start_odometer: Float
  driving_mode: String
}

type tripDataNew {
  vin: String
  start_timestamp: String
  end_timestamp: String
  start_latitude: Float
  end_latitude: Float
  start_longitude: Float
  end_longitude: Float
  start_soc: Float
  end_soc: Float
  incognito_mode: String
  start_pluscode: String
  start_address: String
  end_pluscode: String
  end_address: String
  top_speed: Float
  avg_speed: Float
  start_odo: Float
  end_odo: Float
  total_distance: Float
  ev_range: Float
  co2_saved: Float
  duration: Float
  energy_consumed: Float
  time_taken_mode_wise: String
  time_taken_mode_wise_perc: String
  distance_covered_mode_wise: String
  distance_covered_mode_wise_perc: String
  best_0_30_time: Float
  regen_energy: Float
  start_location: location_lat_long
  end_location: location_lat_long
  battery_used: Float
}

type tripDataNewV1 {
  vin: String
  start_timestamp: String
  end_timestamp: String
  start_latitude: Float
  end_latitude: Float
  start_longitude: Float
  end_longitude: Float
  start_soc: Float
  end_soc: Float
  incognito_mode: String
  start_pluscode: String
  start_address: String
  end_pluscode: String
  end_address: String
  top_speed: Float
  avg_speed: Float
  start_odo: Float
  end_odo: Float
  total_distance: Float
  ev_range: Float
  co2_saved: Float
  duration: Float
  energy_consumed: Float
  time_taken_mode_wise: String
  time_taken_mode_wise_perc: String
  distance_covered_mode_wise: String
  distance_covered_mode_wise_perc: String
  best_0_30_time: Float
  regen_energy: Float
  start_location: location_lat_long
  end_location: location_lat_long
  battery_used: Float
  favourite_status: Boolean
  trip_name: String
  drive_mode: String
  idle_time: Int
  boost_on_count: Int
  top_rpm: Float
  top_speed_mode_wise: String
  top_rpm_mode_wise: String
}

type location_lat_long {
  lat: Float
  long: Float
}

type tripDataResponse {
  tripHistory: [tripData]
  vin: String!
  status: Int!
  statusMessage: String!
}

type tripDataResponseNew {
  tripHistory: [tripDataNew]
  vin: String!
  status: Int!
  statusMessage: String!
}

type tripDataResponseNewV1 {
  tripHistory: [tripDataNewV1]
  vin: String!
  status: Int!
  statusMessage: String!
}

type AllTripSessionsResponse {
  tripHistory: [allTripHistory]
  vin: String
  status: Int
  statusMessage: String
}

type allTripHistory {
  variant: String
  vin: String
  imei: String
  bat_a_uid: String
  bat_b_uid: String
  trip_duration: Int
  trip_distance: Float
  trip_start_odometer: Float
  trip_end_odometer: Float
  soc_consumed: Int
  trip_start_soc: Int
  trip_end_soc: Int
  overall_range: Float
  trip_start_time: String
  trip_end_time: String
  trip_start_time_utc: String
  trip_end_time_utc: String
  tcu_fw_ver: String
  trip_start_dte: Int
  trip_end_dte: Int
  dayOfWeek: String
  avg_tps_brakeon: Float
  regen_duration: Int
  battery_pack_error: Int
  service_status: Int
  best_0_30_speed_time: Int
  slow_0_30_speed_time: Int
  trip_start_lat: Float
  trip_end_lat: Float
  trip_start_lon: Float
  trip_end_lon: Float
  trip_avg_lat: Float
  trip_avg_lon: Float
  trip_start_altitude: Float
  trip_end_altitude: Float
  trip_max_altitude: Float
  trip_avg_altitude: Float
  trip_min_altitude: Float
  trip_start_pluscode: String
  trip_end_pluscode: String
  sold_city: String
  city_mode_distance: Float
  city_mode_duration: Int
  city_mode_range: Float
  city_mode_soc: Int
  trip_start_dte_city: Int
  trip_end_dte_city: Int
  eco_mode_distance: Float
  eco_mode_duration: Int
  eco_mode_range: Float
  eco_mode_soc: Int
  trip_start_dte_eco: Int
  trip_end_dte_eco: Int
  fwd_park_distance: Float
  fwd_park_duration: Int
  fwd_park_range: Float
  fwd_park_soc: Int
  idle_duration: Int
  power_mode_distance: Float
  power_mode_duration: Int
  power_mode_range: Float
  power_mode_soc: Int
  trip_start_dte_power: Int
  trip_end_dte_power: Int
  ride_mode_distance: Float
  ride_mode_duration: Int
  ride_mode_soc: Int
  ride_mode_range: Float
  trip_start_dte_ride: Int
  trip_end_dte_ride: Int
  rev_park_distance: Float
  rev_park_duration: Int
  rev_park_range: Float
  rev_park_soc: Int
  trip_avg_speed: Float
  trip_max_speed: Float
  speed_duration_0_20: Int
  speed_duration_20_40: Int
  speed_duration_40_60: Int
  speed_duration_60_85: Int
  overspeed_duration: Int
  overspeed_count: Int
  min_tps: Float
  avg_tps: Float
  max_tps: Float
  brake_20_tps_duration: Int
  brake_0_tps_duration: Int
  tps_duration_0_20: Int
  tps_duration_20_40: Int
  tps_duration_40_60: Int
  tps_duration_60_80: Int
  tps_duration_80_100: Int
  trip_start_soe: Int
  trip_end_soe: Int
  trip_start_bat_a_soe: Int
  trip_end_bat_a_soe: Int
  trip_start_bat_b_soe: Int
  trip_end_bat_b_soe: Int
  trip_start_bat_c_soe: Int
  trip_end_bat_c_soe: Int
  trip_start_bat_d_soe: Int
  trip_end_bat_d_soe: Int
  trip_start_soh: Int
  trip_end_soh: Int
  trip_start_bat_a_soh: Int
  trip_end_bat_a_soh: Int
  trip_start_bat_b_soh: Int
  trip_end_bat_b_soh: Int
  trip_start_bat_c_soh: Int
  trip_end_bat_c_soh: Int
  trip_start_bat_d_soh: Int
  trip_end_bat_d_soh: Int
  min_dc_voltage: Float
  max_dc_voltage: Float
  avg_dc_voltage: Float
  min_terminal_current: Float
  avg_terminal_current: Float
  max_terminal_current: Float
  min_ecu_temp: Float
  avg_ecu_temp: Float
  max_ecu_temp: Float
  min_motor_temp: Float
  avg_motor_temp: Float
  max_motor_temp: Float
  min_bat_discharge_temp: Float
  avg_bat_discharge_temp: Float
  max_bat_discharge_temp: Float
  ini_bat_discharge_temp: Float
  fin_bat_discharge_temp: Float
  avg_bat_a_temp: Float
  min_bat_a_temp: Float
  max_bat_a_temp: Float
  avg_bat_b_temp: Float
  min_bat_b_temp: Float
  max_bat_b_temp: Float
  min_bat_c_temp: Float
  max_bat_c_temp: Float
  avg_bat_c_temp: Float
  min_bat_d_temp: Float
  max_bat_d_temp: Float
  avg_bat_d_temp: Float
  min_mosfet_temp: Float
  avg_mosfet_temp: Float
  max_mosfet_temp: Float
  bat_temp_above_50C_duration: Int
  motor_temp_above_100C_duration: Int
  start_energy_consumed_by_powertrain: Float
  end_energy_consumed_by_powertrain: Float
  start_regen_energy: Float
  end_regen_energy: Float
  incognito_mode: Int
  table_version: Float
}

type AllChargeSessionsResponse {
  chargeHistory: [allChargeHistory]
  vin: String
  status: Int
  statusMessage: String
}

type allChargeHistory {
  variant: String
  vin: String
  imei: String
  bat_a_uid: String
  bat_b_uid: String
  charge_duration: Int
  charge_start_soc: Int
  charge_end_soc: Int
  charge_start_time: String
  charge_end_time: String
  charge_start_time_utc: String
  charge_end_time_utc: String
  charging_start_odometer: Float
  dayOfWeek: String
  time_period: String
  time_at_100per: String
  charge_start_lat: Float
  charge_end_lat: Float
  charge_start_lon: Float
  charge_end_lon: Float
  charge_start_pluscode: String
  charge_end_pluscode: String
  charge_start_altitude: Float
  charge_end_altitude: Float
  city_sold: String
  min_bat_a_soc: Int
  max_bat_a_soc: Int
  min_bat_b_soc: Int
  max_bat_b_soc: Int
  min_bat_c_soc: Int
  max_bat_c_soc: Int
  min_bat_d_soc: Int
  max_bat_d_soc: Int
  soc_duration_1_5: Int
  soc_duration_6_10: Int
  soc_duration_11_15: Int
  soc_duration_16_20: Int
  soc_duration_21_25: Int
  soc_duration_26_30: Int
  soc_duration_31_35: Int
  soc_duration_36_40: Int
  soc_duration_41_45: Int
  soc_duration_46_50: Int
  soc_duration_51_55: Int
  soc_duration_56_60: Int
  soc_duration_61_65: Int
  soc_duration_66_70: Int
  soc_duration_71_75: Int
  soc_duration_76_80: Int
  soc_duration_81_85: Int
  soc_duration_86_90: Int
  soc_duration_91_95: Int
  soc_duration_96_100: Int
  charge_start_bat_a_soe: Float
  charge_end_bat_a_soe: Float
  charge_start_bat_b_soe: Float
  charge_end_bat_b_soe: Float
  charge_start_bat_c_soe: Float
  charge_end_bat_c_soe: Float
  charge_start_bat_d_soe: Float
  charge_end_bat_d_soe: Float
  charge_start_bat_a_soh: Float
  charge_end_bat_a_soh: Float
  charge_start_bat_b_soh: Float
  charge_end_bat_b_soh: Float
  charge_start_bat_c_soh: Float
  charge_end_bat_c_soh: Float
  charge_start_bat_d_soh: Float
  charge_end_bat_d_soh: Float
  min_dc_voltage: Float
  max_dc_voltage: Float
  avg_dc_voltage: Float
  min_bat_a_voltage: Float
  max_bat_a_voltage: Float
  avg_bat_a_voltage: Float
  min_bat_b_voltage: Float
  max_bat_b_voltage: Float
  avg_bat_b_voltage: Float
  min_bat_c_voltage: Float
  max_bat_c_voltage: Float
  avg_bat_c_voltage: Float
  min_bat_d_voltage: Float
  max_bat_d_voltage: Float
  avg_bat_d_voltage: Float
  min_charge_current: Float
  max_charge_current: Float
  avg_charge_current: Float
  min_bat_a_current: Float
  max_bat_a_current: Float
  avg_bat_a_current: Float
  min_bat_b_current: Float
  max_bat_b_current: Float
  avg_bat_b_current: Float
  min_bat_c_current: Float
  max_bat_c_current: Float
  avg_bat_c_current: Float
  min_bat_d_current: Float
  max_bat_d_current: Float
  avg_bat_d_current: Float
  avg_bat_discharge_temp: Float
  max_bat_discharge_temp: Float
  ini_bat_discharge_temp: Float
  fin_bat_discharge_temp: Float
  avg_bat_a_temp: Float
  min_bat_a_temp: Float
  max_bat_a_temp: Float
  avg_bat_b_temp: Float
  min_bat_b_temp: Float
  max_bat_b_temp: Float
  avg_bat_c_temp: Float
  min_bat_c_temp: Float
  max_bat_c_temp: Float
  avg_bat_d_temp: Float
  min_bat_d_temp: Float
  max_bat_d_temp: Float
  energy_consumed_by_batteries: Float
  energy_consumed_by_powertrain: Float
  table_version: Float
}

type fetchwhatsappDataReponse {
  response: [WhatsappData]
  status: Int!
  statusMessage: String!
}

type WhatsappData {
  vehicleNumber: String
  mobileNumber: String
  message: String
  sender_id: String
  sentAt: String
  updatedAt: String
  status: String
  sent_to: String
  category: String
  type: String
  response_data: String
}

type fetchEmailDataReponse {
  response: [EmailData]
  status: Int!
  statusMessage: String!
}

type EmailData {
  vin: String
  user_id: String
  clientLoginId: String
  category: String
  type: String
  sent_to: String
  subject: String
  body: String
  retry_count: String
  response_data: String
  createdAt: String
  updatedAt: String
  status: String
}

type GetTripsCumulativeSummaryResponse {
  status: Int
  statusMessage: String
  summary_details: SummaryDetailsResponse
}

type SummaryDetailsResponse {
  vin: String!
  total_duration: Int
  total_trips: Int
  distance_covered_mode_wise: String
  total_distance: Float
  cumulative_total_distance: Float
  avg_speed_mode_wise: String
  avg_speed: Float
  top_speed: Float
  energy_consumed_mode_wise: String
  energy_consumed_overall: Float
  energy_recovered_mode_wise: String
  energy_recovered_overall: Float
  co2_saved: Float
  driving_score: Int
  cornering_score: Int
  braking_score: Int
  speeding_score: Int
  acceleration_screen: Int
  battery_used: Int
  best_0_60: Float
  idle_time: Int
  top_speed_in_7_rides: Float
  top_rpm: Float
  top_rpm_in_7_rides: Float
  modeWiseData: ModeWiseDataObj
}

type ModeWiseDataObj {
  SPORT: ModeData
  STREET: ModeData
}

type ModeData {
  top_speed: Float
  top_speed_in_7_rides: Float
  top_rpm: Float
  top_rpm_in_7_rides: Float
}

input route_Array {
  route_id: Int!
  route: String!
  distance: Float!
}

input LatLong {
  lat: Float!
  long: Float!
}

type cs_detailsInput {
  route_id: Int!
  cs_details: [ChargingStation!]!
}

type ChargingStationsAlongRouteResponse {
  status: Int!
  statusMessage: String!
  cs_along_route_details: [cs_detailsInput]!
}

type ChargingStation {
  charging_station_latitude_longitude: [Float!]!
  charging_station_name: String!
  distance_from_start_point: Float!
  within_dte_range_flag: [Boolean!]!
}

enum statusEnum {
  Completed
  Live
  Scheduled
  All
}

enum footballStatusEnum {
  result
  upcoming
  live
  all
}

enum unitsEnum {
  imperial
  metric
  standard
}

enum enumLang {
  af
  al
  ar
  az
  bg
  ca
  cz
  da
  de
  el
  en
  eu
  fa
  fi
  fr
  gl
  he
  hi
  hr
  hu
  id
  it
  ja
  kr
  la
  lt
  mk
  no
  nl
  pl
  pt
  pt_br
  ro
  ru
  sv
  se
  sk
  sl
  sp
  es
  sr
  th
  tr
  ua
  vi
  zh_cn
  zh_tw
  zu
}

type getFootballMatchListResponse {
  status: Int
  statusMessage: String
  response: footballRes
  etag: String
  modified: String
  datetime: String
  api_version: Float
}

type footballRes {
  items: [footballResponseDetails]
  total_items: Int
}

type footballResponseDetails {
  mid: String
  round: String
  match_number: String
  result: Result
  teams: Team
  periods: periodResponse
  datestart: String
  dateend: String
  timestampstart: String
  timestampend: String
  injurytime: String
  time: String
  status_str: String
  status: String
  gamestate_str: String
  gamestate: String
  pre_squad: String
  verified: String
  periodlength: String
  numberofperiods: String
  attendance: String
  overtimelength: String
  competition: competitionRes
  venue: venueRes
  lineupavailable: String
  projectionavailable: String
  eventavailable: String
  commentaryavailable: String
}

type Result {
  home: String
  away: String
  winner: String
}

type Team {
  home: TeamResponse
  away: TeamResponse
}

type TeamResponse {
  tid: String
  tname: String
  logo: String
  fullname: String
  abbr: String
}

type periodResponse {
  p1: periodInfo
  p2: periodInfo
  ft: periodInfo
}

type periodInfo {
  home: Int
  away: Int
}

type competitionRes {
  cid: String
  cname: String
  startdate: String
  enddate: String
  startdatetimestamp: String
  endtdatetimestamp: String
  year: String
  category: String
  tournament_id: String
  category_id: String
  ioc: String
  status: String
  status_str: String
  logo: String
}

type venueRes {
  venueid: String
  name: String
  location: String
  founded: String
  capacity: String
  googlecoords: String
}

type getCrricketMatchResponse {
  status: Int
  statusMessage: String
  response: responseRes
  etag: String
  modified: String
  datetime: String
  api_version: Float
}

type responseRes {
  items: [responseDetails]
  total_items: Int
}

type responseDetails {
  match_id: Int
  title: String
  short_title: String
  subtitle: String
  match_number: String
  format: Int
  format_str: String
  status: String
  status_str: String
  status_note: String
  verified: String
  pre_squad: String
  odds_available: String
  game_state: Int
  game_state_str: String
  domestic: String
  competition: competitionResponse
  teama: teamaResponse
  teamb: teambResponse
  date_start: String
  date_end: String
  timestamp_start: Int
  timestamp_end: Int
  date_start_ist: String
  date_end_ist: String
  venue: venueResponse
  umpires: String
  referee: String
  equation: String
  live: String
  result: String
  result_type: Int
  win_margin: String
  winning_team_id: Int
  commentary: Int
  wagon: Int
  latest_inning_number: Int
  presquad_time: String
  verify_time: String
  match_dls_affected: String
  toss: tossResponse
}

type competitionResponse {
  cid: Int
  title: String
  abbr: String
  type: String
  category: String
  match_format: String
  season: String
  status: String
  datestart: String
  dateend: String
  country: String
  total_matches: Int
  total_rounds: Int
  total_teams: Int
}

type teamaResponse {
  team_id: Int
  name: String
  short_name: String
  logo_url: String
  scores_full: String
  scores: String
  overs: String
}

type teambResponse {
  team_id: Int
  name: String
  short_name: String
  logo_url: String
  scores_full: String
  scores: String
  overs: String
}

type venueResponse {
  venue_id: Int
  name: String
  location: String
  country: String
  timezone: String
}

type tossResponse {
  text: String
  winner: Int
  decision: Int
}

type currentWeatherDataResponse {
  response: responseObj
  status: String
  statusMessage: String
}

type responseObj {
  coord: latlon
  weather: [weatherArr]
  base: String
  main: mainResponse
  visibility: Int
  wind: speedDegresponse
  rain: rainObj
  snow: snowObj
  clouds: allClouds
  dt: Int
  sys: sycObj
  timezone: Int
  id: Int
  name: String
}

type lastupdateObj {
  value: String
}

type currWeatherObj {
  number: String
  value: String
  icon: String
}

type precipitationObj {
  value: String
  mode: String
}

type cloudsObj {
  name: String
  value: String
}

type windCurrent {
  speed: speedObj
  direction: directionObj
}

type speedObj {
  value: String
  code: String
  name: String
}

type directionObj {
  value: String
  unit: String
  name: String
}

type Currtemperature {
  value: String
  min: String
  max: String
  unit: String
}

type CurrentCityObj {
  id: String
  name: String
  coord: coordCityObj
  country: String
  timezone: String
  sun: sunCurrObj
}

type coordCityObj {
  lon: Float
  lat: Float
}

type sunCurrObj {
  rise: String
  set: String
}

type rainObj {
  rain_1h: Float
  rain_3h: Float
}

type rainObjHourly {
  rain_1h: Float
}

type snowObj {
  snow_1h: Float
  snow_3h: Float
}

type snowObjHour {
  snow_1h: Float
}

type latlon {
  lon: Float
  lat: Float
}

type weatherArr {
  id: Int
  main: String
  description: String
  icon: String
  iconPath: String
}

type mainResponse {
  temp: Float
  feels_like: Float
  temp_min: Float
  temp_max: Float
  pressure: Float
  humidity: Float
  sea_level: Float
  grnd_level: Float
}

type speedDegresponse {
  speed: Float
  deg: Int
  gust: Float
}

type allClouds {
  all: Int
}

type sycObj {
  type: Int
  id: Int
  message: String
  country: String
  sunrise: Int
  sunset: Int
}

type HourlyForecastDataResponse {
  response: hourlyresponse
  status: String
  statusMessage: String
}

type hourlyresponse {
  cnt: Int
  list: [listArr]
  city: cityObj
  location: locationObj
  credit: String
  meta: metaObj
  sun: sunObj
}

type forecastObj {
  time: foreCastTime
  symbol: foreCastsymbol
  precipitation: forePrecipitation
  windDirection: windDirectionObj
  windSpeed: windSpeedObj
  windGust: windGustObj
  temperature: temperatureObj
  feels_like: fore_feels_like
  pressure: fore_pressure
  humidity: fore_humidity
  clouds: fore_clouds
  visibility: fore_visibility
}

type fore_visibility {
  value: String
}

type fore_clouds {
  value: String
  all: String
  unit: String
}

type fore_humidity {
  unit: String
  value: String
}

type fore_pressure {
  unit: String
  value: String
}

type fore_feels_like {
  unit: String
  value: String
}

type temperatureObj {
  unit: String
  value: String
  min: String
  max: String
}

type windGustObj {
  gust: String
  unit: String
}

type windSpeedObj {
  mps: String
  unit: String
  name: String
}

type windDirectionObj {
  deg: String
  code: String
  name: String
}

type forePrecipitation {
  value: String
  unit: String
  type: String
  probability: String
}

type foreCastsymbol {
  number: String
  name: String
  var: String
}

type foreCastTime {
  from: String
  to: String
}

type sunObj {
  rise: String
  set: String
}

type metaObj {
  lastupdate: String
  calctime: String
  nextupdate: String
}

type locationObj {
  name: String
  type: String
  country: String
  timezone: String
  location: locationObjj
}

type locationObjj {
  altitude: Float
  latitude: Float
  longitude: Float
  geobase: Float
  geobaseid: String
}

type listArr {
  dt: Int
  main: mainObj
  weather: [weatherArr]
  clouds: allClouds
  wind: windResponse
  visibility: Int
  pop: Float
  rain: rainObjHourly
  snow: snowObjHour
  sys: sysResponse
  dt_txt: String
}

type windResponse {
  speed: Float
  deg: Int
  gust: Float
}

type cityObj {
  id: String
  name: String
  coord: citycoord
  country: String
  timezone: String
  sunrise: String
  sunset: String
  population: Float
}

type cityObjDaily {
  id: String
  name: String
  coord: citycoord
  country: String
  timezone: String
  population: Float
}

type citycoord {
  lat: Float
  lon: Float
}

type sysResponse {
  pod: String
}

type mainObj {
  temp: Float
  feels_like: Float
  temp_min: Float
  temp_max: Float
  pressure: Float
  sea_level: Int
  grnd_level: Int
  humidity: Float
  temp_kf: Float
}

type getChargeStationsResponse {
  response: [responeDataChargeStation]
  status: Int
  statusMessage: String
}

type responeDataChargeStation {
  device_id: String
  model: String
  name: String
  rate: Float
  timings: String
  sockets: [String]
  host_details: hostDetailsObj
  private: Boolean
  isTwentyFourSeven: Boolean
  superHostUID: String
  vehicleNo: String
  segment: String
  subsegment: String
  installation_date: String
  image: [String]
  output_type: String
  total_capacity: Float
  coordinates: [Float]
  distance: Float
  address: [addressListObj]
  location: [Float]
  vehicle_types: [String]
  parking: [String]
  geo_state: String
  fullAddress: String
}

type addressListObj {
  long_name: String
  short_name: String
  types: [String]
}

type hostDetailsObj {
  host_id: String
  name: String
  phone: String
}

type getTariffDetailsResponse {
  response: responeDataTariffDetails
  status: Int
  statusMessage: String
}

type responeDataTariffDetails {
  _id: String
  name: String
  org: String
  tariff_id: String
  rate: [rate]
}

type rate {
  type: String
  charge: Int
  unit: String
}

type enableDeviceResponse {
  response: String
  status: Int
  statusMessage: String
}

type disableDeviceResponse {
  response: String
  status: Int
  statusMessage: String
}

type getDeviceStateResponse {
  response: [responeDataDeviceState]
  status: Int
  statusMessage: String
}

type getTransactionDetailsResponse {
  response: responeDataLatestTransactions
  status: Int
  statusMessage: String
}

type getTransactionsResponse {
  response: [responeDataLatestTransactions]
  status: Int
  statusMessage: String
}

type getLatestTransactionsResponse {
  response: responeDataLatestTransactions
  status: Int
  statusMessage: String
}

type responeDataDeviceState {
  device_id: String
  org: String
  geo_state: String
  network: Boolean
  vendor: String
  protocol: String
  device_group: String
  host_id: String
  timestamp: Int
  boot: String
  firmware_version: String
  imsi: String
  model: String
  cp_error: String
  cp_state: Int
  num_connectors: Int
  tariff: String
  zone: String
  charge_state: [Int]
  config: config
  location: [Float]
  imei: String
  network_info: network_info
  network_type: Int
  rssi: Int
  voltage: Float
  error_code: [String]
  rate: Int
  theft_state: Int
}

type network_info {
  op: String
  imsi: String
}

type config {
  p_thresh: Int
  v_thresh: Int
  em_stat: Int
  plugd_set: Int
  plugd_t: Int
  tamp_set: Boolean
  resume_set: Boolean
  contact: String
  e_r: Int
}

type responeDataLatestTransactions {
  txn_id: String
  connector_id: Int
  duration: Int
  device_id: String
  device_org: String
  initiated_from: String
  segment: String
  set_duration: Int
  subsegment: String
  user_id: String
  device_network_type: String
  end_time: Int
  power: Float
  start_time: Int
  total_usage: Float
  tx_status: Int
  txn_type: String
  usage_limit: Float
  vehicle_no: String
  voltage: Float
  payment_id: String
  payment_status: Int
  end_reason: String
  payment_initialised: Boolean
}

type startTransactionResponse {
  status: Int
  statusMessage: String
  response: String
}

type stopTransactionResponse {
  status: Int
  statusMessage: String
  response: String
}

type configDeviceResponse {
  status: Int
  statusMessage: String
  response: String
}

type configDeviceThresoldResponse {
  status: Int
  statusMessage: String
  response: String
}

type CurrentAirPollutionDataResponse {
  status: Int
  statusMessage: String
  response: airPollutionData
}

type getDailyWeatherForecastDataResponse {
  status: Int
  statusMessage: String
  response: dailyForecastData
}

type getNearestServiceStationResponse {
  status: Int
  statusMessage: String
  response: nearestServiceStationData
}

type timeToChargeResponse {
  status: Int
  statusMessage: String
  soc: Int
  time_to_charge_mins: Int
}

type nearestServiceStationData {
  count: Int
  stores: [storesArr]
}

type storesArr {
  id: String
  dealer_id: String
  dealer_code: String
  branch_code: String
  wp_name: String
  category_id: Int
  distance: Float
  is_routeable: Boolean
  wp_id: Int
  phone_no: String
  email_id: String
  address: String
  area: String
  city: String
  state: String
  pincode: String
  store_timings: String
  store_open: Boolean
  geofeature: geofeatureObj
}

type geofeatureObj {
  geoproperty: latLong
}

type airPollutionData {
  coord: Coord
  list: [ListItem]
}

type dailyForecastData {
  city: cityObjDaily
  cod: String
  cnt: Int
  list: [listArryDaily]
}

type listArryDaily {
  dt: Int
  sunrise: Int
  sunset: Int
  temp: dailyTempObj
  feels_like: dailyfeels_like
  pressure: Float
  humidity: Float
  weather: [weatherArrDaily]
  speed: Float
  deg: Int
  gust: Float
  clouds: Int
  pop: Float
  rain: Float
}

type weatherArrDaily {
  id: Int
  main: String
  description: String
  icon: String
  iconPath: String
}

type dailyTempObj {
  day: Float
  min: Float
  max: Float
  night: Float
  eve: Float
  morn: Float
}

type dailyfeels_like {
  day: Float
  night: Float
  eve: Float
  morn: Float
}

type Main {
  aqi: Int
}

type ListItem {
  dt: Int
  AQI_Qualitative_Openweather: String
  AQI_Qualitative_calculated: String
  AQI_Calculated_Index: Float
  AQI_Openweather_Index: Int
  components: Components
}

type Components {
  co: Float
  no: Float
  no2: Float
  o3: Float
  so2: Float
  pm2_5: Float
  pm10: Float
  nh3: Float
}

type Coord {
  lat: Float
  lon: Float
}

type allLocationResponse {
  response: [allResponseOfLocation]
  status: Int
  statusMessage: String
}

type allResponseOfLocation {
  location_id: Int!
  location_name: String
  user_generated_name: String
  fromUserId: String!
  vin: String!
  lat_long: latLongResponse!
  placeId: String!
  is_shared: Boolean
  is_recent: Boolean
  is_favorite: Boolean
  createdAt: String!
  updatedAt: String!
  status: Int!
  address: String!
  created_timestamp: String
  updated_timestamp: String
  location_type: String
}

type latLongResponse {
  lat: Float
  long: Float
}

type AllSharedLocationsResponse {
  destinationDetails: [destinationDetails]
  status: Int
  statusMessage: String
}

type destinationDetails {
  location_name: String
  location_id: Int!
  fromUserId: String!
  toUserId: String
  user_generated_name: String
  vin: String!
  lat_long: lat_longResponse!
  placeId: String
  is_shared: Boolean
  is_recent: Boolean
  is_favorite: Boolean
  createdAt: String!
  updatedAt: String!
  address: String!
  shared_time: String
  shared_timestamp: String
  created_timestamp: String
  updated_timestamp: String
  is_shared_today: Boolean
  sequence_number: String
  location_type: String
}

type lat_longResponse {
  lat: Float
  long: Float
}

enum locationTypeEnum {
  home
  work
  other
}

input lat_longRes {
  lat: Float
  long: Float
}

type locationResponse {
  location_id: Int
  placeId: String
}

type statusMessageRespons {
  status: Int
  statusMessage: String
}

type editTripDetailsResponse {
  status: String!
  statusMessage: String
  response: editTripDetailsResponseDetails
}

type editTripDetailsResponseDetails {
  favourite_status: Boolean
  trip_name: String
}

type getApiStatResponse {
  status: Int
  statusMessage: String
  api_details: [api_detailsResponse]
}

type api_detailsResponse {
  vin: String
  app_userid: String
  api_name: String
  query: String
  api_variables: String
  response_data: String
  status: Int
  response_time: Int
  timestamp: String
}

type fetchClusterChargeSessionSummaryResponse {
  status: Int
  statusMessage: String
  summary_details: [chargeSummaryDetailsResponse]
}

type chargeSummaryDetailsResponse {
  session_id: String
  app_user_id: String!
  vin: String!
  start_soc: Int
  end_soc: Int
  start_timestamp: String!
  end_timestamp: String!
  kafka_enquequed_time: String
  server_time: String
  local_time: String
  start_latitude: Float
  start_longitude: Float
  end_latitude: Float
  end_longitude: Float
  pluscode: String
  total_energy_consumed: Float
  method_of_charging: String
  duration: Int
}

type CumulativeChargeSessionSummaryResponse {
  status: Int
  statusMessage: String
  summary_details: [cumulativeSummaryDetailsResponse]
}

type cumulativeSummaryDetailsResponse {
  id: String
  app_user_id: String!
  vin: String!
  total_charging_time: Int
  total_charging_sessions: Int
  total_energy_consumed: Int
}

type ICENonGearedAggregatedDataResponse {
  status: Int
  statusMessage: String
  data: NonGearedAggregatedTripsData
}

type NonGearedAggregatedTripsData {
  trips: [NonGearedTripsResponse]
}

type NonGearedTripsResponse {
  variant: String
  vehicle: Float
  user_id: Int
  vin: String
  trip_start_time: String
  trip_end_time: String
  start_country: String
  end_country: String
  start_city: String
  end_city: String
  start_state: String
  end_state: String
  start_plus_code: String
  end_plus_code: String
  start_postal_code: Float
  end_postal_code: Float
  start_lat: Float
  end_lat: Float
  start_long: Float
  end_long: Float
  start_fuel: Int
  end_fuel: Int
  sensor_failure: Int
  diagnostics_status: Int
  trip_duration: Float
  trip_distance: Float
  trip_avg_speed: Float
  avg_fuel: Float
  avg_throttle: Float
  max_throttle: Int
  avg_engine_rpm: Float
  max_engine_rpm: Int
  max_speed: Float
  avg_speed: Float
  trip_day: String
  avg_main_voltage: Float
  max_main_voltage: Float
  min_main_voltage: Float
  avg_engine_temp: Float
  max_engine_temp: Float
  min_engine_temp: Float
  avg_backlight_illumination: Float
  avg_altitude: Float
  max_altitude: Float
  min_altitude: Float
  app_version: String
  os_version: String
  speedo_sw_version: String
  service_reminder_status: Int
  total_mode_shift_count: Float
  speed_0_20: Float
  speed_20_40: Float
  speed_40_60: Float
  speed_60_80: Float
  speed_80_100: Float
  speed_100_120: Float
  throttle_0_20: Float
  throttle_20_40: Float
  throttle_40_60: Float
  throttle_60_80: Float
  throttle_80_100: Float
  odometer_first: Float
  odometer_last: Float
  best0To60: Float
  vehicleBest0to60: Float
  bestShortestTime: Float
  avg_baro_press: Float
  max_baro_press: Int
  min_baro_press: Int
  avg_intake_air_temp: Float
  max_intake_air_temp: Int
  min_intake_air_temp: Int
  switch_status_on_count: Float
  switch_status_off_count: Float
  best_shortest_time_sport_mode: Float
  top_speed_sport_mode: Float
  min_engine_load: Int
  max_engine_load: Int
  avg_engine_load: Int
  min_mani_air_pres: Int
  max_mani_air_pres: Int
  avg_mani_air_pres: Int
  max_runtime_since_engine_start: Int
  max_distance_with_mil_on: Float
  avg_distance_with_mil_on: Float
  mil_on_count: Float
  mil_off_count: Float
  max_distance_in_low_fuel_mode: Float
  avg_distance_in_low_fuel_mode: Float
  distance_eco: Float
  distance_power: Float
  duration_eco: Float
  duration_power: Float
  max_throttle_eco: Int
  min_throttle_eco: Int
  max_throttle_power: Int
  min_throttle_power: Int
  distance_street_mode: Float
  avg_speed_street_mode: Float
  max_speed_street_mode: Float
  duration_street_mode: Float
  distance_race_mode: Float
  avg_speed_race_mode: Float
  max_speed_race_mode: Float
  duration_race_mode: Float
  version: Float
}

type fetchICEGearedAggregatedDataResponse {
  status: Int
  statusMessage: String
  data: agregatedtripsData
}

type agregatedtripsData {
  trips: [tripsResponse]
}

type tripsResponse {
  user_id: Int
  vehicle: Int
  variant: String
  vin: String
  city: String
  state: String
  postal_code: Float
  trip_start_time: String
  trip_end_time: String
  start_plus_code: String
  end_plus_code: String
  start_country: String
  end_country: String
  start_lat: Float
  end_lat: Float
  start_long: Float
  end_long: Float
  start_address: String
  end_address: String
  start_fuel: Int
  end_fuel: Int
  sensor_failure: Int
  diagnostics_status: Int
  gear_duration_0: Int
  gear_duration_1: Int
  gear_duration_2: Int
  gear_duration_3: Int
  gear_duration_4: Int
  gear_duration_5: Int
  gear_duration_6: Int
  gear_distance_0: Float
  gear_distance_1: Float
  gear_distance_2: Float
  gear_distance_3: Float
  gear_distance_4: Float
  gear_distance_5: Float
  gear_distance_6: Float
  distance_urban_mode: Float
  avg_speed_urban_mode: Float
  max_speed_urban_mode: Float
  duration_urban_mode: Int
  distance_rain_mode: Float
  avg_speed_rain_mode: Float
  max_speed_rain_mode: Float
  duration_rain_mode: Int
  distance_sport_mode: Float
  avg_speed_sport_mode: Float
  max_speed_sport_mode: Float
  duration_sport_mode: Int
  distance_track_mode: Float
  avg_speed_track_mode: Float
  max_speed_track_mode: Float
  duration_track_mode: Int
  distance_supermoto_mode: Float
  avg_speed_supermoto_mode: Float
  max_speed_supermoto_mode: Float
  duration_supermoto_mode: Int
  trip_duration: Int
  trip_distance: Float
  trip_avg_speed: Float
  avg_fuel: Float
  avg_throttle: Float
  max_throttle: Int
  avg_engine_rpm: Float
  max_engine_rpm: Int
  max_speed: Float
  avg_speed: Float
  trip_day: String
  avg_main_voltage: Float
  max_main_voltage: Float
  min_main_voltage: Float
  avg_engine_temp: Float
  max_engine_temp: Float
  min_engine_temp: Float
  avg_backlight_illumination: Float
  avg_altitude: Float
  max_altitude: Float
  min_altitude: Float
  trip_start_weather_temp: Int
  trip_end_weather_temp: Int
  avg_weather_temp: Float
  max_weather_temp: Int
  min_weather_temp: Int
  avg_insta_mileage: Float
  max_insta_mileage: Float
  min_insta_mileage: Float
  avg_avg_mileage: Float
  app_version: String
  os_version: String
  speedo_sw_version: String
  service_reminder_status: String
  first_to_second_avg_speed: Float
  second_to_third_avg_speed: Float
  third_to_fourth_avg_speed: Float
  fourth_to_fifth_avg_speed: Float
  fifth_to_sixth_avg_speed: Float
  first_to_second_min_speed: Float
  second_to_third_min_speed: Float
  third_to_fourth_min_speed: Float
  fourth_to_fifth_min_speed: Float
  fifth_to_sixth_min_speed: Float
  first_to_second_max_speed: Float
  second_to_third_max_speed: Float
  third_to_fourth_max_speed: Float
  fourth_to_fifth_max_speed: Float
  fifth_to_sixth_max_speed: Float
  first_to_second_avg_rpm: Float
  second_to_third_avg_rpm: Float
  third_to_fourth_avg_rpm: Float
  fourth_to_fifth_avg_rpm: Float
  fifth_to_sixth_avg_rpm: Float
  first_to_second_min_rpm: Int
  second_to_third_min_rpm: Int
  third_to_fourth_min_rpm: Int
  fourth_to_fifth_min_rpm: Int
  fifth_to_sixth_min_rpm: Int
  first_to_second_max_rpm: Int
  second_to_third_max_rpm: Int
  third_to_fourth_max_rpm: Int
  fourth_to_fifth_max_rpm: Int
  fifth_to_sixth_max_rpm: Int
  first_to_second_avg_throttle: Float
  second_to_third_avg_throttle: Float
  third_to_fourth_avg_throttle: Float
  fourth_to_fifth_avg_throttle: Float
  fifth_to_sixth_avg_throttle: Float
  first_to_second_min_throttle: Int
  second_to_third_min_throttle: Int
  third_to_fourth_min_throttle: Int
  fourth_to_fifth_min_throttle: Int
  fifth_to_sixth_min_throttle: Int
  first_to_second_max_throttle: Int
  second_to_third_max_throttle: Int
  third_to_fourth_max_throttle: Int
  fourth_to_fifth_max_throttle: Int
  fifth_to_sixth_max_throttle: Int
  first_to_n_avg_speed: Float
  second_to_first_avg_speed: Float
  third_to_second_avg_speed: Float
  fourth_to_third_avg_speed: Float
  fifth_to_fourth_avg_speed: Float
  sixth_to_fifth_avg_speed: Float
  first_to_n_min_speed: Float
  second_to_first_min_speed: Float
  third_to_second_min_speed: Float
  fourth_to_third_min_speed: Float
  fifth_to_fourth_min_speed: Float
  sixth_to_fifth_min_speed: Float
  first_to_n_max_speed: Float
  second_to_first_max_speed: Float
  third_to_second_max_speed: Float
  fourth_to_third_max_speed: Float
  fifth_to_fourth_max_speed: Float
  sixth_to_fifth_max_speed: Float
  first_to_n_avg_rpm: Float
  second_to_first_avg_rpm: Float
  third_to_second_avg_rpm: Float
  fourth_to_third_avg_rpm: Float
  fifth_to_fourth_avg_rpm: Float
  sixth_to_fifth_avg_rpm: Float
  first_to_n_min_rpm: Int
  second_to_first_min_rpm: Int
  third_to_second_min_rpm: Int
  fourth_to_third_min_rpm: Int
  fifth_to_fourth_min_rpm: Int
  sixth_to_fifth_min_rpm: Int
  first_to_n_max_rpm: Int
  second_to_first_max_rpm: Int
  third_to_second_max_rpm: Int
  fourth_to_third_max_rpm: Int
  fifth_to_fourth_max_rpm: Int
  sixth_to_fifth_max_rpm: Int
  first_to_n_avg_throttle: Float
  second_to_first_avg_throttle: Float
  third_to_second_avg_throttle: Float
  fourth_to_third_avg_throttle: Float
  fifth_to_fourth_avg_throttle: Float
  sixth_to_fifth_avg_throttle: Float
  first_to_n_min_throttle: Int
  second_to_first_min_throttle: Int
  third_to_second_min_throttle: Int
  fourth_to_third_min_throttle: Int
  fifth_to_fourth_min_throttle: Int
  sixth_to_fifth_min_throttle: Int
  first_to_n_max_throttle: Int
  second_to_first_max_throttle: Int
  third_to_second_max_throttle: Int
  fourth_to_third_max_throttle: Int
  fifth_to_fourth_max_throttle: Int
  sixth_to_fifth_max_throttle: Int
  n_to_first_shift_count: Int
  first_to_second_shift_count: Int
  second_to_third_shift_count: Int
  third_to_fourth_shift_count: Int
  fourth_to_fifth_shift_count: Int
  fifth_to_sixth_shift_count: Int
  sixth_to_fifth_shift_count: Int
  fifth_to_fourth_shift_count: Int
  fourth_to_third_shift_count: Int
  third_to_second_shift_count: Int
  second_to_first_shift_count: Int
  first_to_n_shift_count: Int
  total_gear_shift_count: Int
  total_mode_shift_count: Int
  speed_0_20: Int
  speed_20_40: Int
  speed_40_60: Int
  speed_60_80: Int
  speed_80_100: Int
  speed_100_120: Int
  speed_120_140: Int
  speed_140_160: Int
  throttle_0_20: Int
  throttle_20_40: Int
  throttle_40_60: Int
  throttle_60_80: Int
  throttle_80_100: Int
  avg_gforce: Float
  max_gforce: Float
  min_gforce: Float
  avg_acceleration: Float
  max_acceleration: Float
  min_acceleration: Float
  odometer_first: Float
  odometer_last: Float
  bestDeceleration: Float
  bestAcceleration: Float
  literPer100KM: Float
  best0To60: Float
  mileage: Float
  vehicleBest0to60: Float
  best0To100: Float
  bestShortestTime: Float
  maxLeanAngle: Int
  AverageDownShiftSpeed: Float
  AverageUpShiftSpeed: Float
  NumberOfLaps: Int
  BestLapNumber: Int
  BestLapTime: Int
  LapNumber: Int
  LapTime: Int
  LapDistance: Int
  trip_start_rear_tyre_pressure: Int
  trip_end_rear_tyre_pressure: Int
  trip_start_front_tyre_pressure: Int
  trip_end_front_tyre_pressure: Int
  trip_start_rear_tyre_battery: Float
  trip_end_rear_tyre_battery: Float
  trip_start_front_tyre_battery: Float
  trip_end_front_tyre_battery: Float
  avg_baro_press: Float
  max_baro_press: Int
  min_baro_press: Int
  avg_intake_air_temp: Float
  max_intake_air_temp: Int
  min_intake_air_temp: Int
  avg_range_dte: Float
  max_range_dte: Float
  min_range_dte: Float
  kill_switch_on_count: Int
  kill_switch_off_count: Int
  es_enabled_on_count: Int
  es_enabled_off_count: Int
  tps_error_count: Int
  tps_non_error_count: Int
  battery_low: Int
  battery_not_low: Int
  mil_off_count: Int
  mil_on_count: Int
  ems_mil_on_count: Int
  ems_mil_off_count: Int
  abs_mil_on_count: Int
  abs_mil_off_count: Int
  lfi_on_count: Int
  lfi_off_count: Int
  crash_alert_on_count: Int
  crash_alert_off_count: Int
  gear_pos_sensor_err_on_count: Int
  gear_pos_sensor_err_off_count: Int
  side_stand_down_count: Int
  side_stand_up_count: Int
  side_stand_sensor_error_count: Int
  side_stand_sensor_non_error_count: Int
  eng_temp_sensor_error_count: Int
  eng_temp_sensor_non_error_count: Int
  veh_speed_front_error_count: Int
  veh_speed_front_non_error_count: Int
  veh_speed_rear_sensor_err_count: Int
  veh_speed_rear_sensor_non_error_count: Int
  intake_air_temp_sens_err_count: Int
  intake_air_temp_sens_non_error_count: Int
  clutch_switch_on_count: Int
  clutch_switch_off_count: Int
  brake_switch_on_count: Int
  brake_switch_off_count: Int
  neutral_tell_on_count: Int
  neutral_tell_off_count: Int
  fuel_sensor_error_count: Int
  fuel_sensor_non_error_count: Int
  switch_status_on_count: Int
  switch_status_off_count: Int
  can_comm_error_count: Int
  can_comm_non_error_count: Int
  electric_start_switch_on_count: Int
  electric_start_switch_off_count: Int
  engine_cranking_on_count: Int
  engine_cranking_off_count: Int
  isg_normal_count: Int
  isg_abnormal_count: Int
  abs_normal_count: Int
  abs_abnormal_count: Int
  turn_left_tell_on_count: Int
  turn_left_tell_off_count: Int
  turn_right_tell_on_count: Int
  turn_right_tell_off_count: Int
  high_beam_tell_on_count: Int
  high_beam_tell_off_count: Int
  sidestand_tell_on_count: Int
  sidestand_tell_off_count: Int
  general_warn_on_count: Int
  general_warn_off_count: Int
  engine_speed_sens_err_count: Int
  engine_speed_sens_non_error_count: Int
  best_shortest_time_sport_mode: Float
  top_speed_sport_mode: Float
  min_engine_load: Int
  max_engine_load: Int
  avg_engine_load: Int
  min_mani_air_pres: Int
  max_mani_air_pres: Int
  avg_mani_air_pres: Int
  max_runtime_since_engine_start: Int
  max_distance_with_mil_on: Float
  avg_distance_with_mil_on: Float
  max_distance_in_low_fuel_mode: Float
  avg_distance_in_low_fuel_mode: Float
  distance_eco: Float
  distance_power: Float
  duration_eco: Int
  duration_power: Int
  max_throttle_eco: Int
  min_throttle_eco: Int
  max_throttle_power: Int
  min_throttle_power: Int
  distance_street_mode: Float
  avg_speed_street_mode: Float
  max_speed_street_mode: Float
  duration_street_mode: Int
  distance_race_mode: Float
  avg_speed_race_mode: Float
  max_speed_race_mode: Float
  duration_race_mode: Int
  version: Float
}

type rideDetailsResponse {
  status: Int
  statusMessage: String
  data: rideData
}

type rideData {
  totalRecords: Int
  totalRideRecords: Int
  totalTourRecords: Int
  totalFavoriteRecords: Int
  results: [resultData]
}

type resultData {
  travelId: Int
  vehicleTypeId: Int
  vin: String
  app_user_id: String
  travelFileName: String
  vehicleModelName: String
  rideTime: Int
  travelStartDateTime: String
  travelEndDateTime: String
  totalTravelledDistance: Float
  topSpeed: Float
  averageSpeed: Float
  travelStatsDownloadLink: String
  createdAt: String
  travelName: String
  type: Int
  isFavourite: Boolean
  day: String
  totalTime: Int
  isDeleted: Boolean
  travelMMIDownloadLink: String
  startLocation: String
  endLocation: String
  currentRideBestLapTime: Int
  currentRideBestLapNumber: Int
  currentRideTotalLapTime: Int
  currentRideTotalLaps: Int
  literPer100KM: Float
  highestAltitude: Float
  lastFuelStatus: Int
  lowestAltitude: Float
  vehicleAvgSpeed: Float
  distanceToEmpty: Float
  mileage: Float
  odometerReading: Float
  batteryVoltage: Float
  cruisingRange: Int
  vehicleBest0to60: Float
  best0To100: Float
  vehicleTopSpeed: Float
  idleTime: Int
  averageRPM: Float
  topSpeedOverAll: Float
  bestShortestTimeSportMode: Float
  totalDistanceOverAll: Float
  totalDuration: Int
  maxAcceleration: Float
  altitude: Float
  maxDeceleration: Float
  temperature: Float
  isCompleted: Boolean
  bestDeceleration: String
  bestAcceleration: String
  rearTyreMacId: String
  frontTyreBattery: Float
  speedoSWVersion: String
  frontTyrePressure: Float
  frontTyreMacId: String
  rearTyrePressure: Float
  rearTyreBattery: Float
  best0To60: Float
  frontTyreTemperature: Float
  rearTyreTemperature: Float
  totalDistanceStreetMode: Float
  weatherShortDescription: String
  isSportMode: Boolean
  weatherIcon: String
  rideTimeRaceMode: Int
  averageSpeedSportMode: Float
  averageSpeedStreetMode: Float
  totalDistanceRaceMode: Float
  lapDistanceSportMode: Float
  averageSpeedRaceMode: Float
  rideTimeStreetMode: Float
  rideTag: Int
  topSpeedRaceMode: Int
  topSpeedSportMode: Float
  isStreetMode: Boolean
  topRPMRaceMode: Float
  isRaceMode: Boolean
  best0to60RaceMode: Float
  userId274140: String
  topSpeedStreetMode: Float
  weatherTemp: Float
  topRPM: Int
  topRPMStreetMode: Float
  best0to60StreetMode: Float
  averageSpeedOverAll: Float
  insertDate: String
  modes: [ModesResponseData]
  gears: [GearsResponseData]
  laps: [LapsResponseData]
  tour: TourResponseData
}

type getVehicleOverViewResponse {
  status: Int
  statusMessage: String
  data: [VehicleOverViewResponse]
}

type getRidingPatternResponse {
  status: Int
  statusMessage: String
  data: RidingPatternData
}

type VehicleOverViewResponse {
  rideCumulativeId: String
  vehicleTypeId: Int
  vin: String
  appUserId: String
  totalRides: Float
  totalTime: Float
  rideTime: Float
  totalTravelledDistance: Float
  topSpeed: Float
  averageSpeed: Float
  isDeleted: Float
  literPer100KM: Float
  highestAltitude: Float
  lastFuelStatus: Int
  lowestAltitude: Float
  vehicleAvgSpeed: Float
  distanceToEmpty: Float
  mileage: Float
  odometerReading: Float
  batteryVoltage: Float
  cruisingRange: Int
  vehicleBest0to60: Float
  best0To100: Float
  vehicleTopSpeed: Float
  idleTime: Int
  averageRPM: Float
  topSpeedOverAll: Float
  bestShortestTimeSportMode: Float
  totalDistanceOverAll: Float
  totalDuration: Int
  maxAcceleration: Float
  altitude: Float
  tourId: Int
  maxDeceleration: Float
  temperature: Float
  bestDeceleration: String
  bestAcceleration: String
  rearTyreMacId: String
  frontTyreBattery: Float
  speedoSwVersion: String
  frontTyrePressure: Float
  FrontTyreMacId: String
  rearTyrePressure: Float
  rearTyreBattery: Float
  best0To60: Float
  frontTyreTemperature: Float
  rearTyreTemperature: Float
  totalDistanceStreetMode: Float
  weatherShortDescription: String
  isSportMode: Boolean
  weatherIcon: String
  rideTimeRaceMode: Int
  averageSpeedSportMode: Float
  averageSpeedStreetMode: Float
  totalDistanceRaceMode: Float
  lapDistanceSportMode: Float
  averageSpeedRaceMode: Float
  rideTimeStreetMode: Float
  rideTag: Int
  topSpeedRaceMode: Int
  topSpeedSportMode: Float
  isStreetMode: Boolean
  topRpmRaceMode: Float
  isRaceMode: Boolean
  best0To60RaceMode: Float
  userId274140: String
  topSpeedStreetMode: Float
  weatherTemp: Float
  topRpm: Int
  topRpmStreetMode: Float
  best0To60StreetMode: Float
  averageSpeedOverall: Float
  status: Int
  modes: [ModesResponseData]
  gears: [GearsResponseData]
  laps: [LapsResponseData]
  createdAt: String
  updatedAt: String
}

type RidingPatternData {
  Modes: [ModesResponseData]
  Gears: [GearsResponseData]
}

type lastRidesResponse {
  travelId: Int
  user_id: Int
  travelFileName: String
  trip_start_time: Float
  trip_end_time: Float
  bestShortestTimeSportMode: Float
  topSpeedOverAll: Float
  averageSpeedOverAll: Float
  max_engine_rpm: Int
  avg_engine_rpm: Int
  trip_duration: Int
  totalDistanceOverAll: Float
  mileage: Float
}

type CumulativeLastNRidesResponse {
  best0to60: Float
  bikeTopSpeed: Float
  max_engine_rpm: Int
  mileage: Float
}

type updateRideResponse {
  status: Int
  statusMessage: String
}

type deleteRideResponse {
  status: Int
  statusMessage: String
}

type addRideResponse {
  status: Int
  statusMessage: String
  data: dataResponse
}

type dataResponse {
  travelId: Int
  vin: String!
  app_user_id: String!
  vehicleTypeId: Int!
  travelFileName: String
  vehicleModelName: String
  totalTime: Int
  rideTime: Int
  travelStartDateTime: String
  travelEndDateTime: String
  totalTravelledDistance: Float
  topSpeed: Float
  averageSpeed: Float
  travelStatsDownloadLink: String
  travelName: String
  isFavourite: Boolean
  type: Int
  travelMMIDownloadLink: String
  startLocation: String
  endLocation: String
  day: String
  currentRideBestLapTime: Int
  currentRideBestLapNumber: Int
  currentRideTotalLapTime: Int
  currentRideTotalLaps: Int
  literPer100KM: Float
  highestAltitude: Float
  lastFuelStatus: Int
  lowestAltitude: Float
  vehicleAvgSpeed: Float
  distanceToEmpty: Float
  mileage: Float
  odometerReading: Float
  batteryVoltage: Float
  cruisingRange: Int
  vehicleBest0to60: Float
  best0To100: Float
  vehicleTopSpeed: Float
  idleTime: Int
  averageRPM: Float
  topSpeedOverAll: Float
  bestShortestTimeSportMode: Float
  totalDistanceOverAll: Float
  totalDuration: Int
  maxAcceleration: Float
  altitude: Float
  maxDeceleration: Float
  temperature: Float
  isCompleted: Boolean
  bestDeceleration: String
  bestAcceleration: String
  rearTyreMacId: String
  frontTyreBattery: Float
  speedoSWVersion: String
  frontTyrePressure: Float
  frontTyreMacId: String
  rearTyrePressure: Float
  rearTyreBattery: Float
  best0To60: Float
  frontTyreTemperature: Float
  rearTyreTemperature: Float
  totalDistanceStreetMode: Float
  weatherShortDescription: String
  isSportMode: Boolean
  weatherIcon: String
  rideTimeRaceMode: Int
  averageSpeedSportMode: Float
  averageSpeedStreetMode: Float
  totalDistanceRaceMode: Float
  lapDistanceSportMode: Float
  averageSpeedRaceMode: Float
  rideTimeStreetMode: Float
  rideTag: Int
  topSpeedRaceMode: Int
  topSpeedSportMode: Float
  isStreetMode: Boolean
  topRPMRaceMode: Float
  isRaceMode: Boolean
  best0to60RaceMode: Float
  userId274140: String
  topSpeedStreetMode: Float
  weatherTemp: Float
  topRPM: Int
  topRPMStreetMode: Float
  best0to60StreetMode: Float
  averageSpeedOverAll: Float
  insertDate: String
  modes: [ModesResponseData]
  gears: [GearsResponseData]
  laps: [LapsResponseData]
  tour: TourResponseData
}

input OtherRideParametersResponse {
  literPer100KM: Float
  highestAltitude: Float
  lastFuelStatus: Int
  lowestAltitude: Float
  vehicleAvgSpeed: Float
  DistanceToEmpty: Float
  mileage: Float
  odometerReading: Float
  batteryVoltage: Float
  cruisingRange: Int
  vehicleBest0to60: Float
  best0To100: Float
  vehicleTopSpeed: Float
  IdleTime: Int
  AverageRPM: Float
  TopSpeedOverAll: Float
  BestShortestTimeSportMode: Float
  TotalDistanceOverAll: Float
  TotalDuration: Int
  maxAcceleration: Float
  altitude: Float
  tourId: Int
  maxDeceleration: Float
  temperature: Float
  IsCompleted: Boolean
  BestDeceleration: String
  BestAcceleration: String
  RearTyreMacId: String
  frontTyreBattery: Float
  speedoSwVersion: String
  frontTyrePressure: Float
  FrontTyreMacId: String
  rearTyrePressure: Float
  rearTyreBattery: Float
  best0To60: Float
  frontTyreTemperature: Float
  rearTyreTemperature: Float
}

input ModesResponse {
  modeTypeId: Int
  modeStartDateTime: Int
  modeEndDateTime: Int
  totalDistanceCovered: Float
  totalDuration: Int
}

input GearsResponse {
  gearNumber: Int
  gearStartDateTime: Int
  gearEndDateTime: Int
  totalDuration: Int
  totalDistanceCovered: Float
  averageSpeed: Float
  averageUpshiftSpeed: Float
  averageDownshiftSpeed: Float
  averageRPM: Float
  averageUpshiftRPM: Float
  averageDownshiftRPM: Float
}

input LapsResponse {
  lapNumber: Int
  lapTime: Int
  lapDistance: Float
}

input TourResponse {
  tourId: Int
  tourName: String!
  tourStartLocation: String!
  tourEndLocation: String!
  totalDuration: Int!
  totalDistance: Float!
  isDeleted: Boolean!
  isTourEnded: Boolean!
  tourStartDateTime: Int!
  tourEndDateTime: Int!
  mileage: Float!
  literPer100KM: Float!
  highestAltitude: Float!
  lowestAltitude: Float!
  topSpeed: Float!
  averageSpeed: Float!
  isFavourite: Boolean!
  tourMMIDownloadLink: String
}

type ModesResponseData {
  modeTypeId: Int
  modeStartDateTime: Int
  modeEndDateTime: Int
  totalDistanceCovered: Float
  totalDuration: Int
}

type GearsResponseData {
  gearNumber: Int
  gearStartDateTime: Int
  gearEndDateTime: Int
  totalDuration: Int
  totalDistanceCovered: Float
  averageSpeed: Float
  averageUpshiftSpeed: Float
  averageDownshiftSpeed: Float
  averageRPM: Float
  averageUpshiftRPM: Float
  averageDownshiftRPM: Float
}

type LapsResponseData {
  lapNumber: Int
  lapTime: Int
  lapDistance: Float
}

type TourResponseData {
  tourId: Int
  vin: String
  app_user_id: String
  type: Int
  tourName: String
  tourStartLocation: String
  tourEndLocation: String
  totalDuration: Int
  totalDistance: Float
  isDeleted: Boolean
  isTourEnded: Boolean
  tourStartDateTime: String
  tourEndDateTime: String
  mileage: Float
  literPer100KM: Float
  highestAltitude: Float
  lowestAltitude: Float
  topSpeed: Float
  averageSpeed: Float
  isFavourite: Boolean
  tourMMIDownloadLink: String
  createdAt: String
  insertDate: String
}

type OtherRideParametersResponseData {
  literPer100KM: Float
  highestAltitude: Float
  lastFuelStatus: Int
  lowestAltitude: Float
  vehicleAvgSpeed: Float
  DistanceToEmpty: Float
  mileage: Float
  odometerReading: Float
  batteryVoltage: Float
  cruisingRange: Int
  vehicleBest0to60: Float
  best0To100: Float
  vehicleTopSpeed: Float
  IdleTime: Int
  AverageRPM: Float
  TopSpeedOverAll: Float
  BestShortestTimeSportMode: Float
  TotalDistanceOverAll: Float
  TotalDuration: Int
  maxAcceleration: Float
  altitude: Float
  tourId: Int
  maxDeceleration: Float
  temperature: Float
  IsCompleted: Boolean
  BestDeceleration: String
  BestAcceleration: String
  RearTyreMacId: String
  frontTyreBattery: Float
  speedoSwVersion: String
  frontTyrePressure: Float
  FrontTyreMacId: String
  rearTyrePressure: Float
  rearTyreBattery: Float
  best0To60: Float
  frontTyreTemperature: Float
  rearTyreTemperature: Float
}

enum rangeType {
  WEEK
  MONTH
  YEAR
}

type fetchAnnualReportResponse {
  status: Int!
  statusMessage: String
  customDateData: annualDataResponse
  currentdetails: annualDataResponse
  prevDetails: annualDataResponse
}

type annualDataResponse {
  distance: Float
  average_speed: Float
  ride_time: Float
  ascent: Int
  descent: Int
  average_cadence: Float
}

type getCaloriesBurntResponse {
  status: Int
  statusMessage: String
  data: [dayWiseData]
}

type dayWiseData {
  date: String
  cal: Float
}

type fetchClusterRideSessionSummaryResponse {
  status: Int
  statusMessage: String
  sessions_total_distance: Float
  sessions_total_avg_speed: Float
  sessions_total_time_taken: Int
  sessions_trips: Int
  sessions_total_ascent: Int
  sessions_total_descent: Int
  sessions_total_elevation: Int
  sessions_total_avg_cadence: Int
  sessions_total_cal: Float
  summary_details: [summaryDetailsResponse]
}

type summaryDetailsResponse {
  session_id: String
  app_user_id: String!
  vin: String!
  start_timestamp: String
  end_timestamp: String
  kafka_enquequed_time: String
  server_time: String
  local_time: String
  start_location: location_lat_long
  end_location: location_lat_long
  start_address: String
  end_address: String
  type: String
  start_odo: Float
  end_odo: Float
  distance_covered_mode_wise: String
  total_distance: Float
  avg_speed_mode_wise: String
  total_avg_speed: Float
  top_speed: Float
  energy_consumed_mode_wise: String
  energy_consumed_overall: Float
  energy_recovered_mode_wise: String
  energy_recovered_overall: Float
  duration: Int
  co2_saved: Float
  driving_score: Int
  energy_effciency_score: Int
  braking_score: Int
  acceleration_score: Int
  handling_maintenance_score: Int
  start_soc: Int
  end_soc: Int
  battery_used: Int
  avg_cadence: Int
  avg_human_power: Float
  avg_motor_power: Float
  cal: Float
  ascent: Int
  descent: Int
  duration_spent_mode_wise: String
}

type fetchClusterCumulativeRideSessionSummaryResponse {
  status: Int
  statusMessage: String
  summary_details: [CumulativesummaryDetailsResponse]
}

type CumulativesummaryDetailsResponse {
  id: String
  app_user_id: String!
  vin: String!
  total_duration: Int
  total_trips: Int
  distance_covered_mode_wise: String
  total_distance: Float
  avg_speed_mode_wise: String
  avg_speed: Float
  top_speed: Float
  energy_consumed_mode_wise: String
  energy_consumed_overall: Float
  energy_recovered_mode_wise: String
  energy_recovered_overall: Float
  co2_saved: Float
  driving_score: Int
  energy_effciency_score: Int
  braking_score: Int
  handling_maintenance_score: Int
  acceleration_score: Int
  battery_used: Int
}

type CommandsToQueueResponseOld {
  status: Int
  response: [QueueResponse]
}

type QueueResponse {
  vin: String
  statusMessage: String
}

enum hcCommandEnums {
  APN
  HBFREQ
  ACAL
  HOMEDOCKID
  STOPCH
  BATUID
  STOPCHLIMIT
  SPEEDCH
}

input SettingsInputForHomeCharger {
  APN: apnInputs
  HBFREQ: hbfInputs
  ACAL: acalInputs
  HOMEDOCKID: homeDockInputs
  STOPCH: stopChInputs
  BATUID: batUidInputs
  STOPCHLIMIT: stopChLimitInputs
  SPEEDCH: speedChInputs
}

input SettingsInputForPortableCharger {
  APN: apnInputs
  HBFREQ: hbfInputs
  ACAL: acalInputs
  HOMEDOCKID: homeDockInputs
  STOPCH: stopChInputs
  BATUID: batUidInputs
  STOPCHLIMIT: stopChLimitInputs
  SPEEDCH: speedChInputs
}

input SettingsInput {
  OVRST: overspeedInputs
  APN: apnInputs
  HBFREQ: hbfInputs
  ACAL: acalInputs
  RASHT: accInputs
  HBT: accInputs
  HAT: accInputs
  TRIPOFD: tripofdInputs
  TLBATT: tlbattInputs
  IMMOB: immobInput
  CRASH: crashInput
  FALL: fallInput
  THEFT: theftInput
  THEFTMO: theftmoInputs
  PROTOCOLV: protocolvInputs
  REGPCKFREQ: regpckreqInputs
  MQTTCONN: mqttConnInputs
  MQTTCRED: mqttCredInputs
  CHARGE: chargeInputs
  TPMS: tpmsInputs
  KIDS_MODE: kidsmodeInputs
  SOS: sosInputs
  ALERTLANGUAGE: languagesInput
  LOWFUEL: lowFuelInput
  IGNITION: ignitionInput
}

enum languagesInput {
  en
  fr
}

input lowFuelInput {
  alertsEnabled: Boolean!
  lowFuelWhatsAppNotificationEnabled: Boolean
  lowFuelSmsNotificationEnabled: Boolean
}

input ignitionInput {
  alertsEnabled: Boolean!
  ignitionWhatsAppNotificationEnabled: Boolean
  ignitionSmsNotificationEnabled: Boolean
}

input kidsmodeInputs {
  kids_mode: Boolean!
  kids_ovrst: Boolean
  kids_geofence: Boolean
  kids_timefence: Boolean
}

input sosInputs {
  alertsEnabled: Boolean!
}

input chargeInputs {
  alertsEnabled: Boolean!
  chargeThreshold: Int
  chargeWhatsAppNotificationEnabled: Boolean
  chargeEmailNotificationEnabled: Boolean
  chargeSmsNotificationEnabled: Boolean
}

input tpmsInputs {
  alertsEnabled: Boolean!
  rearTyreLowPressureThreshold: Int
  frontTyreLowPressureThreshold: Int
  rearTyreHighPressureThreshold: Int
  frontTyreHighPressureThreshold: Int
  tpmsWhatsAppNotificationEnabled: Boolean
  tpmsEmailNotificationEnabled: Boolean
  tpmsSmsNotificationEnabled: Boolean
}

input overspeedInputs {
  alertsEnabled: Boolean!
  speedLimit: Int
  duration: Int
  overstWhatsAppNotificationEnabled: Boolean
  overstEmailNotificationEnabled: Boolean
  overstSmsNotificationEnabled: Boolean
}

input overspeedInput {
  speedLimit: Int
  duration: Int
}

input geofenceInputs {
  geofenceName: String
  geofenceType: GeofenceEnum
  circularGeofence: CircularGeofences
  polygonGeofence: PolygonGeofences
  recipients: [String]
}

enum GeofenceEnum {
  polygon
  circular
}

input timefenceInputs {
  timeFenceName: String!
  fromTime: String!
  toTime: String!
  osLimit: Int!
  weekDays: [Weekday!]!
  fromDate: String!
  toDate: String!
  push_notifications_enabled: Boolean!
  whatsapp_enabled: Boolean!
  sms_enabled: Boolean!
  email_enabled: Boolean!
}

input apnInputs {
  apn: String!
}

input hbfInputs {
  duration: Int!
}

input acalInputs {
  accX: Int!
  accY: Int!
  accZ: Int!
  tiltAngle: Int!
}

input accInputs {
  accX: Int!
  accY: Int!
  accZ: Int!
}

input tripofdInputs {
  duration: Int!
}

input tlbattInputs {
  percentage: Int!
}

input immobInputs {
  immob: Int!
}

input immobInput {
  immob: Int!
  immobWhatsAppNotificationEnabled: Boolean
  immobEmailNotificationEnabled: Boolean
  immobSmsNotificationEnabled: Boolean
}

input theftmoInputs {
  theftmo: theftmoEnum!
}

enum theftmoEnum {
  ON
  OFF
}

input protocolvInputs {
  protocolv: Int!
}

input regpckreqInputs {
  duration: Int!
}

input homeDockInputs {
  id: String!
}

input speedChInputs {
  limit: speedChEnum!
}

enum speedChEnum {
  NORMAL
  LOW
}

input batUidInputs {
  id: String!
}

input stopChLimitInputs {
  alertsEnabled: Boolean!
  socLimit: Int!
  whatsAppNotificationEnabled: Boolean
  emailNotificationEnabled: Boolean
  smsNotificationEnabled: Boolean
}

input commandArgumentsResponse {
  vin: [String]
  userId: [String]
  numberOfCommands: Int
  commandName: [String]
  commandInputs: [String]
}

input crashInput {
  alertsEnabled: Boolean!
  speed: Int!
  tiltAngle: Int!
  crashWhatsAppNotificationEnabled: Boolean
  crashEmailNotificationEnabled: Boolean
  crashSmsNotificationEnabled: Boolean
}

input fallInput {
  alertsEnabled: Boolean!
  tiltAngle: Int!
  fallWhatsAppNotificationEnabled: Boolean
  fallEmailNotificationEnabled: Boolean
  fallSmsNotificationEnabled: Boolean
}

input theftInput {
  alertsEnabled: Boolean!
  thresholdDistance: Int!
  pdop: Int!
  satelliteNo: Int!
  theftWhatsAppNotificationEnabled: Boolean
  theftEmailNotificationEnabled: Boolean
  theftSmsNotificationEnabled: Boolean
}

enum commandTypeEnum {
  SET
  GET
  RES
}

enum deviceTypeEnum {
  vehicle
  homecharger
  portablecharger
}

input commandArgument {
  numberOfCommands: Int!
  commandName: [commandNames!]!
  commandInputs: commandInput
}

input commandInput {
  OVRST: overstInputs
  APN: apnInputs
  HBFREQ: hbfInputs
  ACAL: acalInputs
  RASHT: accInputs
  HBT: accInputs
  HAT: accInputs
  TRIPOFD: tripofdInputs
  TLBATT: tlbattInputs
  IMMOB: immobInputs
  HOMEDOCKID: homeDockInputs
  STOPCH: stopChInputs
  BATUID: homeDockInputs
  STOPCHLIMIT: stopChLimitInput
  MQTTCONN: mqttConnInputs
  MQTTCRED: mqttCredInputs
  CRASH: crashInputs
  FALL: fallInputs
  THEFT: theftInputs
  UPDSEC: updsecInputs
  SPEEDCH: speedChInputs
  THEFTMO: theftmoInputs
  PROTOCOLV: protocolvInputs
  REGPCKFREQ: regpckreqInputs
  WLPUPD: wlpupdInputs
  WLPDEL: wlpInputs
  WLPSET: wlpInputs
  WLPUNSET: wlpInputs
  UPDEMG: updemgInputs
  DOCUPD: docUpdInputs
  DOCEDT: docUpdInputs
  DOCDEL: docDelInputs
  UPDUSER: upuserInputs
  CHARGE: chargeInput
  SDEST: sdestInput
  GEOC: geocInput
  GEOP: geopInput
}

input chargeInput {
  chargeThreshold: Int!
}

input mqttConnInputs {
  ip_value: String!
  tls_port: String!
  mqtt_topic: String!
}

input mqttCredInputs {
  user_name: String!
  password: String!
}

input crashInputs {
  speed: Int!
  tiltAngle: Int!
}

input fallInputs {
  tiltAngle: Int!
}

input theftInputs {
  thresholdDistance: Int!
  pdop: Int!
  satelliteNo: Int!
}

input stopChLimitInput {
  socLimit: Int!
}

input stopChInputs {
  stopch: stopCh_Enum!
}

enum stopCh_Enum {
  ON
  OFF
}

input overstInputs {
  speedLimit: Int!
  duration: Int!
}

input updsecInputs {
  app_user_id: String!
  addUpdateRemove: Int!
}

input wlpupdInputs {
  id: Int!
  wallpaper_name: String!
  wallpaper_link: String!
  type: wallpaperType
}

input wlpInputs {
  id: Int!
}

input updemgInputs {
  id1: Int
  id2: Int
  id3: Int
  type: Int!
}

input sdestInput {
  location: String!
}

enum categoryEnum {
  VEHICLE
  USER
}

input docUpdInputs {
  id: Int!
  document_link_front: String
  document_link_back: String
  document_name: String!
  document_expiry: Int!
  document_type: documentType!
  category: categoryEnum!
}

input docDelInputs {
  id: Int!
  category: categoryEnum!
}

input upuserInputs {
  addUpdateRemove: Int!
  app_user_id: String!
  token: String
}

input geocInput {
  radius: Int!
  location: [Float!]
}

input geopInput {
  location: [[Float!]]
}

enum commandNames {
  """
  vehicle
  """
  OVRST
  APN
  HBFREQ
  ACAL
  RASHT
  HBT
  HAT
  TRIPOFD
  TLBATT
  IMMOB
  MQTTCONN
  MQTTCRED
  CRASH
  FALL
  THEFT
  THEFTMO
  PROTOCOLV
  REGPCKFREQ

  """
  homeCharger
  """
  HOMEDOCKID
  STOPCH
  BATUID
  STOPCHLIMIT
  UPDSEC
  SPEEDCH
  WLPUPD
  WLPDEL
  WLPSET
  WLPUNSET
  DOCUPD
  DOCEDT
  DOCDEL
  UPDEMG
  UPDUSER
  CHARGE
  SDEST
  GEOC
  GEOP
}

type CommandsToQueueResponse {
  status: Int!
  statusMessage: String!
}

enum Message_Enum {
  NO_ACTIVE_COMMAND_FOUND
  SUCCESS
  FAILED
}

enum commandSource_Enum {
  SRV
  APP
  CLS
}

enum hcCommandsEnum {
  STOPCH
  STOPCHLIMIT
  SPEEDCH
  APN
  HBFREQ
  ACAL
  HOMEDOCKID
  BATUID
}

enum pcCommandsEnum {
  STOPCH
  STOPCHLIMIT
  SPEEDCH
  APN
  HBFREQ
  ACAL
  HOMEDOCKID
  BATUID
}

type getHomeChargerSettingsResponse {
  status: Int
  statusMessage: String
  settings: [SettingsResponse]
}

type getPortableChargerSettingsResponse {
  status: Int
  statusMessage: String
  settings: [SettingsResponse]
}

type getHomeChargerCommandStatusResponse {
  status: Int
  statusMessage: String
  command: [commandResponse]
}

type getPortableChargerCommandStatusResponse {
  status: Int
  statusMessage: String
  command: [commandResponse]
}

type getHomeChargerCommandFromDeviceResponse {
  status: Int
  statusMessage: String
}

type getPortableChargerCommandFromDeviceResponse {
  status: Int
  statusMessage: String
}

type commandResponse {
  cmdValue: String
  cmdName: String
  updateTimestamp: String
  createTimestamp: String
  cmdStatus: String!
}

type SettingsResponse {
  APN: apnResponce
  HBFREQ: hbfResponce
  ACAL: acalResponce
  HOMEDOCKID: homeDockResponse
  STOPCH: stopChResponse
  SPEEDCH: speedChResponse
  BATUID: batUidResponse
  STOPCHLIMIT: stopChLimitResponse
}

type apnResponce {
  apn: String
}

type hbfResponce {
  duration: Int
}

type acalResponce {
  accX: Int
  accY: Int
  accZ: Int
  tiltAngle: Int
}

type homeDockResponse {
  id: String
}

type stopChResponse {
  stopch: stopChEnum
}

type speedChResponse {
  limit: speedChEnum
}

type batUidResponse {
  id: String
}

type stopChLimitResponse {
  alertsEnabled: Boolean
  socLimit: Int
  whatsAppNotificationEnabled: Boolean
  emailNotificationEnabled: Boolean
  smsNotificationEnabled: Boolean
}

enum stopChEnum {
  ON
  OFF
}

type commandresponse {
  id: Int
  vin: String
  command_display: String
  status: String
  create_at: String
  modified_at: String
  response: String
}

type VehicleCommandResponse {
  status: Int!
  statusMessage: String!
}

type VehicleKidsModeCommandResponse {
  status: Int
  statusMessage: String
}

type updateKidsTimefenceResponse {
  status: Int
  statusMessage: String
}

type deleteKidsTimefenceResponse {
  status: Int
  statusMessage: String
}

type getVehicleCommandResponse {
  status: Int!
  statusMessage: String
  settings: [settingsRes]
}

type settingsRes {
  OVRST: overspeedRes
  APN: apnRes
  HBFREQ: hbfRes
  ACAL: acalRes
  RASHT: accRes
  HBT: accRes
  HAT: accRes
  TRIPOFD: trpofdRes
  TLBATT: tlbattRes
  IMMOB: immobRes
  CRASH: crashRes
  FALL: fallRes
  THEFT: theftRes
  MQTTCONN: mqttConnRes
  MQTTCRED: mqttCredRes
  THEFTMO: theftmoRes
  PROTOCOLV: protocolvRes
  REGPCKFREQ: regpckreqRes
  CHARGE: chargeRes
  TPMS: tpmsRes
  ALERTLANGUAGE: String
  KIDS_MODE: kidsRes
  SOS: sosRes
  LOWFUEL: lowFuelResponse
  IGNITION: ignitionResponse
}

type sosRes {
  alertsEnabled: Boolean
}

type kidsRes {
  kids_mode: Boolean!
  kids_ovrst: Boolean
  kids_geofence: Boolean
  kids_timefence: Boolean
  kids_ovrst_res: kids_ovrst_settings
  kids_timefence_res: kids_timefence_settings
}

type lowFuelResponse {
  alertsEnabled: Boolean
  whatsappNotiEnabled: Boolean
  smsNotiEnabled: Boolean
}

type ignitionResponse {
  alertsEnabled: Boolean
  whatsappNotificationEnabled: Boolean
  smsNotificationEnabled: Boolean
}

type kids_ovrst_settings {
  speedLimit: Int
  duration: Int
}

type kids_timefence_settings {
  timeFenceName: String
  fromTime: String
  toTime: String
  osLimit: Int
  weekDays: [String]
  fromDate: String
  toDate: String
  push_notifications_enabled: Boolean
  whatsapp_enabled: Boolean
  sms_enabled: Boolean
  email_enabled: Boolean
}

type chargeRes {
  alertsEnabled: Boolean!
  chargeThreshold: Int
  chargeWhatsAppNotificationEnabled: Boolean
  chargeEmailNotificationEnabled: Boolean
  chargeSmsNotificationEnabled: Boolean
}

type overspeedRes {
  alertsEnabled: Boolean
  speedLimit: Int
  duration: Int
  overstWhatsAppNotificationEnabled: Boolean
  overstEmailNotificationEnabled: Boolean
  overstSmsNotificationEnabled: Boolean
}

type tpmsRes {
  alertsEnabled: Boolean!
  rearTyreLowPressureThreshold: Int
  frontTyreLowPressureThreshold: Int
  rearTyreHighPressureThreshold: Int
  frontTyreHighPressureThreshold: Int
  tpmsWhatsAppNotificationEnabled: Boolean
  tpmsEmailNotificationEnabled: Boolean
  tpmsSmsNotificationEnabled: Boolean
}

type apnRes {
  apn: String
}

type hbfRes {
  duration: Int
}

type acalRes {
  accX: Int
  accY: Int
  accZ: Int
  tiltAngle: Int
}

type accRes {
  accX: Int
  accY: Int
  accZ: Int
}

type trpofdRes {
  duration: Int
}

type tlbattRes {
  percentage: Int
}

type setHomeChargerSettingsResponse {
  status: Int
  statusMessage: String
}

type setPortableChargerSettingsResponse {
  status: Int
  statusMessage: String
}

type immobRes {
  immob: Int
  immobWhatsAppNotificationEnabled: Boolean
  immobEmailNotificationEnabled: Boolean
  immobSmsNotificationEnabled: Boolean
}

type crashRes {
  speed: Int
  tiltAngle: Int
  crashWhatsAppNotificationEnabled: Boolean
  crashEmailNotificationEnabled: Boolean
  crashSmsNotificationEnabled: Boolean
  alertsEnabled: Boolean
}

type fallRes {
  tiltAngle: Int
  fallWhatsAppNotificationEnabled: Boolean
  fallEmailNotificationEnabled: Boolean
  fallSmsNotificationEnabled: Boolean
  alertsEnabled: Boolean
}

type theftRes {
  thresholdDistance: Int
  pdop: Int
  satelliteNo: Int
  theftWhatsAppNotificationEnabled: Boolean
  theftEmailNotificationEnabled: Boolean
  theftSmsNotificationEnabled: Boolean
  alertsEnabled: Boolean
}

type mqttConnRes {
  ip_value: String
  tls_port: String
  mqtt_topic: String
}

type mqttCredRes {
  user_name: String
  password: String
}

type theftmoRes {
  theftmo: theftmoEnum
}

type protocolvRes {
  protocolv: Int
}

type regpckreqRes {
  duration: Int
}

type getVehicleCommandStatusResponse {
  status: Int!
  statusMessage: String!
  command: [commandRes]
}

type commandRes {
  cmdName: String!
  cmdValue: String!
  createTimestamp: String!
  updateTimestamp: String!
  cmdStatus: String!
  alertEnabled: Boolean
}

enum vehicleCommandsEnum {
  OVRST
  CRASH
  FALL
  THEFT
  MQTTCONN
  MQTTCRED
  THEFTMO
  PROTOCOLV
  REGPCKFREQ
  IMMOB
}

type getVehicleCommandFromDeviceResponse {
  status: Int!
  statusMessage: String!
}

enum vehicleCommandEnums {
  OVRST
  APN
  HBFREQ
  ACAL
  RASHT
  HBT
  HAT
  TRIPOFD
  TLBATT
  IMMOB
  MQTTCONN
  MQTTCRED
  THEFTMO
  PROTOCOLV
  REGPCKFREQ
  CHARGE
}

type HomechargerDataResponse {
  status: Int!
  statusMessage: String!
  hc_data: HomechargerData
}

type PortablechargerLatestData {
  status: Int!
  statusMessage: String!
  pcc_data: pccData
}

type pccData {
  pcc_imei: String
  bat_soc: Int
  bat_uid: String
  pcc_charging_status: Boolean
  charging_dock_states_bat: String
  bat_timestamp: String
  network_type: String
  time_to_charge: Float
  eco_range: Float
  battery_plug_status: String
  max_bat_temperature: Float
  max_bat_voltage: Float
  high_temperature_threshold: Float
  high_voltage_threshold: Float
}

type HomechargerData {
  hc_imei: String
  bat_a_uid: String
  bat_b_uid: String
  bat_a_soc: Float
  bat_b_soc: Float
  hc_charging_status: Boolean
  charging_dock_states_batA: String
  charging_dock_states_batB: String
  left_slot_bat_uid: String
  right_slot_bat_uid: String
  bat_a_timestamp: String
  bat_b_timestamp: String
  bat_a_eco_range: Float
  bat_b_eco_range: Float
  time_to_charge: Float
  soc: Float
  network_type: String
  eco_range: Float
  battery_a_plug_status: Int
  battery_b_plug_status: Int
  max_bat_temperature: Float
  max_bat_voltage: Float
  high_temperature_threshold: Float
  high_voltage_threshold: Float
}

type LiveDataTrackingResponse {
  response: DataLive
  status: Int
  statusMessage: String
}

type DataLive {
  userId: String
  timestamp: String
  unitid: String
  odometer: Float
  vin: String
  latitude: Float
  longitude: Float
  isLiveLocation: Boolean
  lastValidTimestamp: String
  last_incognito_off_latitude: Float
  last_incognito_off_longitude: Float
  last_incognito_off_address: String
  last_incognito_off_timestamp: String
  idlingStatus: Boolean
  haltStatus: Boolean
  isOverspeed: Boolean
  speed: Float
  extBatVol: Float
  heading: Float
  main_voltage: Float
  ignition: Float
  panic_button: Float
  immobilizer: Float
  datetime_pkt: String
  soc: Float
  odometer_can: Float
  speed_can: Float
  isPrimaryBattery: Boolean
  charging_status: Int
  isNoGps: Boolean
  address: String
  ignition_status: Int
  driving_mode: Float
  can_modified: String
  time_to_charge_completion: Float
  incognito_mode: String
  co2Saved: Float
  regen_status: Float
  regen_energy: Float
  ev_range: ev_range_detail
  tyre_pressure: tyre_pressure_detail
  package_version: String
  totalTripsToday: Int
  avgSpeedToday: Float
  totalDistanceToday: Float
  totalTimeTakenToday: Float
  trees_offset: Float
  is_sos: Boolean
  is_tow: Boolean
  is_crash: Boolean
  is_fall: Boolean
  regen_level: Float
  imeiNo: String
  serviceProvider: String
  bat_a_uid: String
  bat_b_uid: String
  bat_c_uid: String
  bat_a_soc: Float
  bat_b_soc: Float
  bat_c_soc: Float
  handleBar_status: String
  time_to_charge: Float
  tpms_front_plugged_status: Boolean
  tpms_rear_plugged_status: Boolean
  tcu_batt_per: Int
  battery_a_plug_status: String
  battery_b_plug_status: String
  battery_c_plug_status: String
  vcu_sw_major: Int
  vcu_sw_minor: Int
  vcu_sw_patch: Int
  vcu_sw_month: Int
  vcu_sw_year: Int
  number_of_sessions: String
  rssi: Int
  immobilized_by_command: Boolean
  immobilized_by_geofence: Boolean
  vehicle_mode: String
  fuel_level: Float
  steering_lock: Int
  ISS_status_lamp: String
}

type ev_range_detail {
  dte_eco: Float
  dte_power: Float
  dte_street: Float
  Xtl: Float
  Xtr: Float
  Xnc: Float
  dte_city: Float
  dte_sport: Float
}

type tyre_pressure_detail {
  front: String
  rear: String
  default_front_tyre_high_pressure: Float
  default_rear_tyre_high_pressure: Float
  default_front_tyre_low_pressure: Float
  default_rear_tyre_low_pressure: Float
  default_front_tyre_nominal_pressure: Float
  default_rear_tyre_nominal_pressure: Float
}

type DeviceTrackingData {
  vehicleNumber: String!
  vehicleType: String!
  vehicleModel: String!
  uniqueId: String!
  vehicleGroups: [String!]
  timestamp: String
  latitude: Float
  longitude: Float
  gpsStatus: String
  satellites: Int
  idlingStatus: Boolean
  haltStatus: Boolean
  isOverspeed: Boolean
  isHA: Boolean
  isHB: Boolean
  isNoGps: Boolean
  isOffline: Boolean
  isNoData: Boolean
  speed: Float
  extBatVol: Float
  plusCode: String
  address: String
  event_flag: String
  gpsSignal: Int
  isPrimaryBattery: Boolean
  standAlone: Boolean
  revenue: Boolean
}

input Filters {
  isPrimaryBattery: Boolean
  isNoGps: Boolean
  isNoData: Boolean
  haltStatus: Boolean
  idlingStatus: Boolean

  """
  Will be true if isOfflineSinceSeconds have passed since the last packet time
  """
  isOffline: Boolean
}

input Configs {
  """
  Value in seconds, should be greater than 0. Defaults to 1800 seconds
  """
  isOfflineSinceSeconds: Int
}

type BatteriesLatestDataResponse {
  response: batteriesData
  status: Int
  statusMessage: String
}

type batteriesData {
  bat_a_uid: String
  bat_b_uid: String
  bat_a_state: String
  bat_b_state: String
  bat_a_soc: Float
  bat_b_soc: Float
  bat_a_charging_status: String
  bat_b_charging_status: String
  soc: Float
  eco_range: Float
  pow_range: Float
  bat_a_timestamp: String
  bat_b_timestamp: String
  time_to_charge_on_vehicle: Int
}

type BatteryUsageTrackingResponse {
  response: batteriesUsageTrackingData
  status: Int
  statusMessage: String
}

type batteriesUsageTrackingData {
  ev_battery_details: [ev_battery_overallObj]
}

type vehicle_detailsObj {
  vin: String
  imei: String
  battery_uid: String
  Product: String
  Last_Tracked_Time: String
  Last_Charged_Time: String
  Last_Rode_Time: String
  Owner_Product: String
  Charge_Duration_Single_Pack: String
  Charge_Duration_Double_Pack: String
  Total_Charge_Duration: String
  Charge_Count_Single_Pack: String
  Charge_Count_Double_Pack: String
  Total_Charge_Count: String
  Trip_Duration_Single_Pack: String
  Trip_Duration_Double_Pack: String
  Total_Trip_Duration: String
  Trip_Distance_Single_Pack: String
  Trip_Distance_Double_Pack: String
  Total_Trip_Distance: String
  Trip_Count_Single_Pack: String
  Trip_Count_Double_Pack: String
  Total_Trip_Count: String
}

type ev_battery_overallObj {
  owner_vin: String
  battery_uid: String
  last_tracked_time: String
  last_charged_time: String
  last_rode_time: String
  vehicle_used_count: String
  hcc_used_count: String
  pcc_used_count: String
  non_own_vehicle_used_count: String
  non_own_hcc_used_count: String
  non_own_pcc_used_count: String
  total_distance: String
  total_distance_own_vehicle: String
  total_distance_non_own_vehicle: String
  total_distance_single_pack: String
  total_distance_single_pack_own_vehicle: String
  total_distance_single_pack_non_own_vehicle: String
  total_distance_double_pack: String
  total_distance_double_pack_own_vehicle: String
  total_distance_double_pack_non_own_vehicle: String
  total_trip_count: String
  total_trip_count_own_vehicle: String
  total_trip_count_non_own_vehicle: String
  total_trip_count_single_pack: String
  total_trip_count_single_pack_own_vehicle: String
  total_trip_count_single_pack_non_own_vehicle: String
  total_trip_count_double_pack: String
  total_trip_count_double_pack_own_vehicle: String
  total_trip_count_double_pack_non_own_vehicle: String
  total_charge_duration: String
  total_charge_duration_vehicle: String
  total_charge_duration_own_vehicle: String
  total_charge_duration_non_own_vehicle: String
  total_charge_duration_hcc: String
  total_charge_duration_own_hcc: String
  total_charge_duration_non_own_hcc: String
  total_charge_duration_pcc: String
  total_charge_duration_own_pcc: String
  total_charge_duration_non_own_pcc: String
  total_charge_count: String
  total_charge_count_vehicle: String
  total_charge_count_own_vehicle: String
  total_charge_count_non_own_vehicle: String
  total_charge_count_hcc: String
  total_charge_count_own_hcc: String
  total_charge_count_non_own_hcc: String
  total_charge_count_pcc: String
  total_charge_count_own_pcc: String
  total_charge_count_non_own_pcc: String
}

type WatchResponseLive {
  status: Int
  message: String
  data: WatchDataLive
}

type WatchDataLive {
  soc: Float
  ignition_status: Int
  driving_mode: Int
  charging_status: Int
  odometer: Float
  last_sync: String
  dte_eco: Float
  dte_power: Float
  tpms_front: Float
  tpms_rear: Float
  carbon_emission_saved: Float
  speed: Float
  time_to_charge_completion: Float
  top_speed: Float
  fuel_level: Float
  battery: Float
}

type WatchResponseAggregate {
  status: Int
  message: String
  data: WatchDataAggregate
}

type WatchDataAggregate {
  distance_covered_today: Float
  avg_speed_today: Float
  total_duration_today: Float
  number_of_rides: Int
}

type WatchResponseLifetimeAggregate {
  status: Int
  message: String
  data: WatchDataLifetimeAggregate
}

type WatchDataLifetimeAggregate {
  top_speed: Float
  avg_speed: Float
  best_0_60: Float
  total_rides: Float
  total_distance: Float
  co2_saved: Float
  total_duration: Float
  last_ride_distance: Float
}
